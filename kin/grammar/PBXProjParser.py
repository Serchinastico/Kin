# Generated from PBXProj.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,145,1796,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,389,8,5,1,5,3,5,392,8,5,1,
        5,3,5,395,8,5,1,5,3,5,398,8,5,1,5,3,5,401,8,5,1,5,1,5,3,5,405,8,
        5,1,5,1,5,3,5,409,8,5,1,5,3,5,412,8,5,1,5,3,5,415,8,5,1,5,1,5,3,
        5,419,8,5,1,5,3,5,422,8,5,1,5,3,5,425,8,5,1,5,3,5,428,8,5,1,5,3,
        5,431,8,5,1,5,3,5,434,8,5,1,5,1,5,1,5,3,5,439,8,5,1,5,3,5,442,8,
        5,1,5,3,5,445,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,4,7,456,8,
        7,11,7,12,7,457,1,8,4,8,461,8,8,11,8,12,8,462,1,9,4,9,466,8,9,11,
        9,12,9,467,1,10,4,10,471,8,10,11,10,12,10,472,1,11,4,11,476,8,11,
        11,11,12,11,477,1,12,4,12,481,8,12,11,12,12,12,482,1,13,4,13,486,
        8,13,11,13,12,13,487,1,14,4,14,491,8,14,11,14,12,14,492,1,15,4,15,
        496,8,15,11,15,12,15,497,1,16,4,16,501,8,16,11,16,12,16,502,1,17,
        4,17,506,8,17,11,17,12,17,507,1,18,4,18,511,8,18,11,18,12,18,512,
        1,19,4,19,516,8,19,11,19,12,19,517,1,20,4,20,521,8,20,11,20,12,20,
        522,1,21,4,21,526,8,21,11,21,12,21,527,1,22,4,22,531,8,22,11,22,
        12,22,532,1,23,4,23,536,8,23,11,23,12,23,537,1,24,4,24,541,8,24,
        11,24,12,24,542,1,25,4,25,546,8,25,11,25,12,25,547,1,26,4,26,551,
        8,26,11,26,12,26,552,1,27,4,27,556,8,27,11,27,12,27,557,1,28,4,28,
        561,8,28,11,28,12,28,562,1,29,4,29,566,8,29,11,29,12,29,567,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,577,8,30,1,30,3,30,580,8,30,1,
        30,1,30,1,30,3,30,585,8,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,3,31,595,8,31,1,31,3,31,598,8,31,1,31,3,31,601,8,31,1,31,3,31,
        604,8,31,1,31,3,31,607,8,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,641,
        8,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,3,35,652,8,35,
        1,35,3,35,655,8,35,1,35,3,35,658,8,35,1,35,3,35,661,8,35,1,35,3,
        35,664,8,35,1,35,3,35,667,8,35,1,35,3,35,670,8,35,1,35,3,35,673,
        8,35,1,35,3,35,676,8,35,1,35,3,35,679,8,35,1,35,3,35,682,8,35,1,
        35,3,35,685,8,35,1,35,3,35,688,8,35,1,35,3,35,691,8,35,1,35,3,35,
        694,8,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,715,8,37,1,37,3,37,
        718,8,37,1,37,3,37,721,8,37,1,37,3,37,724,8,37,1,37,3,37,727,8,37,
        1,37,1,37,3,37,731,8,37,1,37,3,37,734,8,37,1,37,3,37,737,8,37,1,
        37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,760,8,39,1,39,3,39,763,
        8,39,1,39,1,39,1,39,3,39,768,8,39,1,39,3,39,771,8,39,1,39,1,39,3,
        39,775,8,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,
        41,1,41,3,41,802,8,41,1,41,1,41,3,41,806,8,41,1,41,3,41,809,8,41,
        1,41,3,41,812,8,41,1,41,3,41,815,8,41,1,41,1,41,3,41,819,8,41,1,
        41,1,41,3,41,823,8,41,1,41,3,41,826,8,41,1,41,1,41,3,41,830,8,41,
        1,41,3,41,833,8,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,
        1,42,3,42,845,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,3,44,
        868,8,44,1,44,1,44,1,44,3,44,873,8,44,1,44,3,44,876,8,44,1,44,3,
        44,879,8,44,1,44,3,44,882,8,44,1,44,3,44,885,8,44,1,44,1,44,1,44,
        1,44,3,44,891,8,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,3,46,911,8,46,1,46,
        3,46,914,8,46,1,46,3,46,917,8,46,1,46,3,46,920,8,46,1,46,3,46,923,
        8,46,1,46,3,46,926,8,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,938,8,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
        1,48,3,48,949,8,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,3,49,963,8,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,3,51,982,8,51,
        1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,995,
        8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,
        1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,
        1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,
        1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
        1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,
        1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,
        1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,
        1,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,
        1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,
        1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,
        1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,
        1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,
        1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,
        1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,
        1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,
        1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,
        1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,
        1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,5,97,1227,8,97,
        10,97,12,97,1230,9,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,
        99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,101,1,101,
        1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,
        1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,
        1,105,1,106,1,106,1,106,5,106,1278,8,106,10,106,12,106,1281,9,106,
        1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,107,5,107,1291,8,107,
        10,107,12,107,1294,9,107,1,107,3,107,1297,8,107,1,107,1,107,3,107,
        1301,8,107,1,108,1,108,1,108,5,108,1306,8,108,10,108,12,108,1309,
        9,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,
        1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,
        1,112,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
        1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,117,
        1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,119,1,119,
        1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,121,1,121,1,121,
        1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,123,
        3,123,1387,8,123,1,123,3,123,1390,8,123,1,123,3,123,1393,8,123,1,
        123,3,123,1396,8,123,1,123,3,123,1399,8,123,1,123,3,123,1402,8,123,
        1,123,3,123,1405,8,123,1,123,3,123,1408,8,123,1,123,3,123,1411,8,
        123,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,125,1,125,
        1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,
        1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,
        1,129,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,131,5,131,
        1455,8,131,10,131,12,131,1458,9,131,1,131,1,131,1,131,1,132,1,132,
        1,132,1,132,3,132,1467,8,132,1,132,3,132,1470,8,132,1,132,3,132,
        1473,8,132,1,132,3,132,1476,8,132,1,132,3,132,1479,8,132,1,132,3,
        132,1482,8,132,1,132,3,132,1485,8,132,1,132,3,132,1488,8,132,1,132,
        1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,
        1,134,1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,
        1,137,1,137,1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,139,
        1,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,141,1,141,
        1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,143,1,143,1,143,
        1,143,1,143,1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,
        1,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,3,146,1570,8,146,1,147,1,147,1,147,1,147,1,147,1,148,
        1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,1,150,1,150,
        1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,1,152,1,152,1,152,
        1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,154,1,154,1,154,1,154,
        1,154,1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,
        1,157,1,157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,159,
        1,159,1,159,1,159,1,159,1,160,1,160,1,160,1,160,1,160,1,161,1,161,
        1,161,1,161,5,161,1646,8,161,10,161,12,161,1649,9,161,1,161,1,161,
        1,161,1,162,1,162,1,162,1,162,1,162,1,163,1,163,1,163,1,163,1,163,
        1,164,1,164,1,164,1,164,1,164,1,165,5,165,1670,8,165,10,165,12,165,
        1673,9,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
        1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,167,3,167,1713,8,167,1,167,
        1,167,5,167,1717,8,167,10,167,12,167,1720,9,167,1,167,3,167,1723,
        8,167,1,167,1,167,1,167,3,167,1728,8,167,1,168,1,168,1,168,1,168,
        1,168,1,169,1,169,1,169,1,169,1,169,1,170,1,170,1,170,1,170,1,170,
        1,171,1,171,1,171,1,171,5,171,1749,8,171,10,171,12,171,1752,9,171,
        1,171,1,171,1,171,1,172,1,172,1,172,1,172,5,172,1761,8,172,10,172,
        12,172,1764,9,172,1,172,1,172,1,172,1,173,1,173,1,173,1,173,1,173,
        1,174,1,174,1,174,1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,176,
        1,176,1,176,3,176,1787,8,176,1,177,1,177,1,177,3,177,1792,8,177,
        1,178,1,178,1,178,0,0,179,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
        274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
        306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
        338,340,342,344,346,348,350,352,354,356,0,2,2,0,13,13,139,139,7,
        0,8,9,12,12,14,16,19,25,28,41,43,123,125,136,1763,0,358,1,0,0,0,
        2,360,1,0,0,0,4,368,1,0,0,0,6,373,1,0,0,0,8,379,1,0,0,0,10,384,1,
        0,0,0,12,449,1,0,0,0,14,455,1,0,0,0,16,460,1,0,0,0,18,465,1,0,0,
        0,20,470,1,0,0,0,22,475,1,0,0,0,24,480,1,0,0,0,26,485,1,0,0,0,28,
        490,1,0,0,0,30,495,1,0,0,0,32,500,1,0,0,0,34,505,1,0,0,0,36,510,
        1,0,0,0,38,515,1,0,0,0,40,520,1,0,0,0,42,525,1,0,0,0,44,530,1,0,
        0,0,46,535,1,0,0,0,48,540,1,0,0,0,50,545,1,0,0,0,52,550,1,0,0,0,
        54,555,1,0,0,0,56,560,1,0,0,0,58,565,1,0,0,0,60,569,1,0,0,0,62,589,
        1,0,0,0,64,611,1,0,0,0,66,620,1,0,0,0,68,631,1,0,0,0,70,646,1,0,
        0,0,72,698,1,0,0,0,74,708,1,0,0,0,76,741,1,0,0,0,78,751,1,0,0,0,
        80,780,1,0,0,0,82,796,1,0,0,0,84,838,1,0,0,0,86,852,1,0,0,0,88,862,
        1,0,0,0,90,895,1,0,0,0,92,905,1,0,0,0,94,930,1,0,0,0,96,943,1,0,
        0,0,98,955,1,0,0,0,100,967,1,0,0,0,102,976,1,0,0,0,104,987,1,0,0,
        0,106,1002,1,0,0,0,108,1007,1,0,0,0,110,1012,1,0,0,0,112,1017,1,
        0,0,0,114,1022,1,0,0,0,116,1027,1,0,0,0,118,1032,1,0,0,0,120,1037,
        1,0,0,0,122,1042,1,0,0,0,124,1047,1,0,0,0,126,1052,1,0,0,0,128,1057,
        1,0,0,0,130,1062,1,0,0,0,132,1067,1,0,0,0,134,1072,1,0,0,0,136,1077,
        1,0,0,0,138,1082,1,0,0,0,140,1087,1,0,0,0,142,1092,1,0,0,0,144,1097,
        1,0,0,0,146,1102,1,0,0,0,148,1107,1,0,0,0,150,1112,1,0,0,0,152,1117,
        1,0,0,0,154,1122,1,0,0,0,156,1127,1,0,0,0,158,1132,1,0,0,0,160,1137,
        1,0,0,0,162,1142,1,0,0,0,164,1147,1,0,0,0,166,1152,1,0,0,0,168,1157,
        1,0,0,0,170,1162,1,0,0,0,172,1167,1,0,0,0,174,1172,1,0,0,0,176,1177,
        1,0,0,0,178,1182,1,0,0,0,180,1187,1,0,0,0,182,1192,1,0,0,0,184,1197,
        1,0,0,0,186,1202,1,0,0,0,188,1207,1,0,0,0,190,1212,1,0,0,0,192,1217,
        1,0,0,0,194,1222,1,0,0,0,196,1234,1,0,0,0,198,1239,1,0,0,0,200,1244,
        1,0,0,0,202,1249,1,0,0,0,204,1254,1,0,0,0,206,1259,1,0,0,0,208,1264,
        1,0,0,0,210,1269,1,0,0,0,212,1274,1,0,0,0,214,1300,1,0,0,0,216,1302,
        1,0,0,0,218,1312,1,0,0,0,220,1317,1,0,0,0,222,1322,1,0,0,0,224,1327,
        1,0,0,0,226,1332,1,0,0,0,228,1337,1,0,0,0,230,1342,1,0,0,0,232,1347,
        1,0,0,0,234,1352,1,0,0,0,236,1357,1,0,0,0,238,1362,1,0,0,0,240,1367,
        1,0,0,0,242,1372,1,0,0,0,244,1377,1,0,0,0,246,1382,1,0,0,0,248,1415,
        1,0,0,0,250,1420,1,0,0,0,252,1425,1,0,0,0,254,1430,1,0,0,0,256,1435,
        1,0,0,0,258,1440,1,0,0,0,260,1445,1,0,0,0,262,1450,1,0,0,0,264,1462,
        1,0,0,0,266,1492,1,0,0,0,268,1497,1,0,0,0,270,1502,1,0,0,0,272,1507,
        1,0,0,0,274,1512,1,0,0,0,276,1517,1,0,0,0,278,1522,1,0,0,0,280,1527,
        1,0,0,0,282,1532,1,0,0,0,284,1537,1,0,0,0,286,1542,1,0,0,0,288,1547,
        1,0,0,0,290,1552,1,0,0,0,292,1569,1,0,0,0,294,1571,1,0,0,0,296,1576,
        1,0,0,0,298,1581,1,0,0,0,300,1586,1,0,0,0,302,1591,1,0,0,0,304,1596,
        1,0,0,0,306,1601,1,0,0,0,308,1606,1,0,0,0,310,1611,1,0,0,0,312,1616,
        1,0,0,0,314,1621,1,0,0,0,316,1626,1,0,0,0,318,1631,1,0,0,0,320,1636,
        1,0,0,0,322,1641,1,0,0,0,324,1653,1,0,0,0,326,1658,1,0,0,0,328,1663,
        1,0,0,0,330,1671,1,0,0,0,332,1674,1,0,0,0,334,1727,1,0,0,0,336,1729,
        1,0,0,0,338,1734,1,0,0,0,340,1739,1,0,0,0,342,1744,1,0,0,0,344,1756,
        1,0,0,0,346,1768,1,0,0,0,348,1773,1,0,0,0,350,1778,1,0,0,0,352,1786,
        1,0,0,0,354,1791,1,0,0,0,356,1793,1,0,0,0,358,359,3,2,1,0,359,1,
        1,0,0,0,360,361,5,1,0,0,361,362,3,4,2,0,362,363,3,6,3,0,363,364,
        3,8,4,0,364,365,3,10,5,0,365,366,3,12,6,0,366,367,5,2,0,0,367,3,
        1,0,0,0,368,369,5,8,0,0,369,370,5,3,0,0,370,371,5,13,0,0,371,372,
        5,4,0,0,372,5,1,0,0,0,373,374,5,9,0,0,374,375,5,3,0,0,375,376,5,
        1,0,0,376,377,5,2,0,0,377,378,5,4,0,0,378,7,1,0,0,0,379,380,5,14,
        0,0,380,381,5,3,0,0,381,382,5,13,0,0,382,383,5,4,0,0,383,9,1,0,0,
        0,384,385,5,15,0,0,385,386,5,3,0,0,386,388,5,1,0,0,387,389,3,14,
        7,0,388,387,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,392,3,16,
        8,0,391,390,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,395,3,18,
        9,0,394,393,1,0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,398,3,20,
        10,0,397,396,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,401,3,22,
        11,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,404,3,24,
        12,0,403,405,3,26,13,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,
        0,0,0,406,408,3,28,14,0,407,409,3,30,15,0,408,407,1,0,0,0,408,409,
        1,0,0,0,409,411,1,0,0,0,410,412,3,34,17,0,411,410,1,0,0,0,411,412,
        1,0,0,0,412,414,1,0,0,0,413,415,3,32,16,0,414,413,1,0,0,0,414,415,
        1,0,0,0,415,416,1,0,0,0,416,418,3,36,18,0,417,419,3,38,19,0,418,
        417,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,422,3,40,20,0,421,
        420,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,425,3,42,21,0,424,
        423,1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,428,3,44,22,0,427,
        426,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,431,3,46,23,0,430,
        429,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,434,3,48,24,0,433,
        432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,436,3,50,25,0,436,
        438,3,52,26,0,437,439,3,54,27,0,438,437,1,0,0,0,438,439,1,0,0,0,
        439,441,1,0,0,0,440,442,3,56,28,0,441,440,1,0,0,0,441,442,1,0,0,
        0,442,444,1,0,0,0,443,445,3,58,29,0,444,443,1,0,0,0,444,445,1,0,
        0,0,445,446,1,0,0,0,446,447,5,2,0,0,447,448,5,4,0,0,448,11,1,0,0,
        0,449,450,5,16,0,0,450,451,5,3,0,0,451,452,5,137,0,0,452,453,5,4,
        0,0,453,13,1,0,0,0,454,456,3,60,30,0,455,454,1,0,0,0,456,457,1,0,
        0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,15,1,0,0,0,459,461,3,62,
        31,0,460,459,1,0,0,0,461,462,1,0,0,0,462,460,1,0,0,0,462,463,1,0,
        0,0,463,17,1,0,0,0,464,466,3,64,32,0,465,464,1,0,0,0,466,467,1,0,
        0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,19,1,0,0,0,469,471,3,66,
        33,0,470,469,1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,473,1,0,
        0,0,473,21,1,0,0,0,474,476,3,68,34,0,475,474,1,0,0,0,476,477,1,0,
        0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,23,1,0,0,0,479,481,3,70,
        35,0,480,479,1,0,0,0,481,482,1,0,0,0,482,480,1,0,0,0,482,483,1,0,
        0,0,483,25,1,0,0,0,484,486,3,72,36,0,485,484,1,0,0,0,486,487,1,0,
        0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,27,1,0,0,0,489,491,3,74,
        37,0,490,489,1,0,0,0,491,492,1,0,0,0,492,490,1,0,0,0,492,493,1,0,
        0,0,493,29,1,0,0,0,494,496,3,76,38,0,495,494,1,0,0,0,496,497,1,0,
        0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,31,1,0,0,0,499,501,3,78,
        39,0,500,499,1,0,0,0,501,502,1,0,0,0,502,500,1,0,0,0,502,503,1,0,
        0,0,503,33,1,0,0,0,504,506,3,80,40,0,505,504,1,0,0,0,506,507,1,0,
        0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,35,1,0,0,0,509,511,3,82,
        41,0,510,509,1,0,0,0,511,512,1,0,0,0,512,510,1,0,0,0,512,513,1,0,
        0,0,513,37,1,0,0,0,514,516,3,84,42,0,515,514,1,0,0,0,516,517,1,0,
        0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,39,1,0,0,0,519,521,3,86,
        43,0,520,519,1,0,0,0,521,522,1,0,0,0,522,520,1,0,0,0,522,523,1,0,
        0,0,523,41,1,0,0,0,524,526,3,88,44,0,525,524,1,0,0,0,526,527,1,0,
        0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,43,1,0,0,0,529,531,3,90,
        45,0,530,529,1,0,0,0,531,532,1,0,0,0,532,530,1,0,0,0,532,533,1,0,
        0,0,533,45,1,0,0,0,534,536,3,92,46,0,535,534,1,0,0,0,536,537,1,0,
        0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,47,1,0,0,0,539,541,3,94,
        47,0,540,539,1,0,0,0,541,542,1,0,0,0,542,540,1,0,0,0,542,543,1,0,
        0,0,543,49,1,0,0,0,544,546,3,96,48,0,545,544,1,0,0,0,546,547,1,0,
        0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,51,1,0,0,0,549,551,3,98,
        49,0,550,549,1,0,0,0,551,552,1,0,0,0,552,550,1,0,0,0,552,553,1,0,
        0,0,553,53,1,0,0,0,554,556,3,100,50,0,555,554,1,0,0,0,556,557,1,
        0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,55,1,0,0,0,559,561,3,102,
        51,0,560,559,1,0,0,0,561,562,1,0,0,0,562,560,1,0,0,0,562,563,1,0,
        0,0,563,57,1,0,0,0,564,566,3,104,52,0,565,564,1,0,0,0,566,567,1,
        0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,59,1,0,0,0,569,570,5,137,
        0,0,570,571,5,3,0,0,571,572,5,1,0,0,572,573,3,106,53,0,573,574,3,
        218,109,0,574,576,3,220,110,0,575,577,3,322,161,0,576,575,1,0,0,
        0,576,577,1,0,0,0,577,579,1,0,0,0,578,580,3,168,84,0,579,578,1,0,
        0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,582,3,232,116,0,582,584,
        3,200,100,0,583,585,3,234,117,0,584,583,1,0,0,0,584,585,1,0,0,0,
        585,586,1,0,0,0,586,587,5,2,0,0,587,588,5,4,0,0,588,61,1,0,0,0,589,
        590,5,137,0,0,590,591,5,3,0,0,591,592,5,1,0,0,592,594,3,108,54,0,
        593,595,3,154,77,0,594,593,1,0,0,0,594,595,1,0,0,0,595,597,1,0,0,
        0,596,598,3,184,92,0,597,596,1,0,0,0,597,598,1,0,0,0,598,600,1,0,
        0,0,599,601,3,186,93,0,600,599,1,0,0,0,600,601,1,0,0,0,601,603,1,
        0,0,0,602,604,3,156,78,0,603,602,1,0,0,0,603,604,1,0,0,0,604,606,
        1,0,0,0,605,607,3,342,171,0,606,605,1,0,0,0,606,607,1,0,0,0,607,
        608,1,0,0,0,608,609,5,2,0,0,609,610,5,4,0,0,610,63,1,0,0,0,611,612,
        5,137,0,0,612,613,5,3,0,0,613,614,5,1,0,0,614,615,3,110,55,0,615,
        616,3,322,161,0,616,617,3,200,100,0,617,618,5,2,0,0,618,619,5,4,
        0,0,619,65,1,0,0,0,620,621,5,137,0,0,621,622,5,3,0,0,622,623,5,1,
        0,0,623,624,3,112,56,0,624,625,3,158,79,0,625,626,3,160,80,0,626,
        627,3,162,81,0,627,628,3,164,82,0,628,629,5,2,0,0,629,630,5,4,0,
        0,630,67,1,0,0,0,631,632,5,137,0,0,632,633,5,3,0,0,633,634,5,1,0,
        0,634,635,3,114,57,0,635,636,3,206,103,0,636,637,3,326,163,0,637,
        638,3,328,164,0,638,640,3,208,104,0,639,641,3,200,100,0,640,639,
        1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,3,210,105,0,643,
        644,5,2,0,0,644,645,5,4,0,0,645,69,1,0,0,0,646,647,5,137,0,0,647,
        648,5,3,0,0,648,649,5,1,0,0,649,651,3,116,58,0,650,652,3,168,84,
        0,651,650,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,655,3,166,
        83,0,654,653,1,0,0,0,654,655,1,0,0,0,655,657,1,0,0,0,656,658,3,170,
        85,0,657,656,1,0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,661,3,166,
        83,0,660,659,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,664,3,174,
        87,0,663,662,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,667,3,176,
        88,0,666,665,1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,670,3,172,
        86,0,669,668,1,0,0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,673,3,240,
        120,0,672,671,1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,676,3,
        200,100,0,675,674,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,679,
        3,202,101,0,678,677,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,680,
        682,3,244,122,0,681,680,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,
        683,685,3,204,102,0,684,683,1,0,0,0,684,685,1,0,0,0,685,687,1,0,
        0,0,686,688,3,178,89,0,687,686,1,0,0,0,687,688,1,0,0,0,688,690,1,
        0,0,0,689,691,3,242,121,0,690,689,1,0,0,0,690,691,1,0,0,0,691,693,
        1,0,0,0,692,694,3,180,90,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,
        1,0,0,0,695,696,5,2,0,0,696,697,5,4,0,0,697,71,1,0,0,0,698,699,5,
        137,0,0,699,700,5,3,0,0,700,701,5,1,0,0,701,702,3,118,59,0,702,703,
        3,206,103,0,703,704,3,208,104,0,704,705,3,210,105,0,705,706,5,2,
        0,0,706,707,5,4,0,0,707,73,1,0,0,0,708,709,5,137,0,0,709,710,5,3,
        0,0,710,711,5,1,0,0,711,712,3,120,60,0,712,714,3,188,94,0,713,715,
        3,168,84,0,714,713,1,0,0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,718,
        3,176,88,0,717,716,1,0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,721,
        3,174,87,0,720,719,1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,724,
        3,200,100,0,723,722,1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,
        727,3,202,101,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,
        728,730,3,204,102,0,729,731,3,178,89,0,730,729,1,0,0,0,730,731,1,
        0,0,0,731,733,1,0,0,0,732,734,3,180,90,0,733,732,1,0,0,0,733,734,
        1,0,0,0,734,736,1,0,0,0,735,737,3,182,91,0,736,735,1,0,0,0,736,737,
        1,0,0,0,737,738,1,0,0,0,738,739,5,2,0,0,739,740,5,4,0,0,740,75,1,
        0,0,0,741,742,5,137,0,0,742,743,5,3,0,0,743,744,5,1,0,0,744,745,
        3,122,61,0,745,746,3,206,103,0,746,747,3,208,104,0,747,748,3,210,
        105,0,748,749,5,2,0,0,749,750,5,4,0,0,750,77,1,0,0,0,751,752,5,137,
        0,0,752,753,5,3,0,0,753,754,5,1,0,0,754,755,3,124,62,0,755,756,3,
        218,109,0,756,757,3,220,110,0,757,759,3,222,111,0,758,760,3,168,
        84,0,759,758,1,0,0,0,759,760,1,0,0,0,760,762,1,0,0,0,761,763,3,322,
        161,0,762,761,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,765,3,
        232,116,0,765,767,3,200,100,0,766,768,3,190,95,0,767,766,1,0,0,0,
        767,768,1,0,0,0,768,770,1,0,0,0,769,771,3,198,99,0,770,769,1,0,0,
        0,770,771,1,0,0,0,771,772,1,0,0,0,772,774,3,234,117,0,773,775,3,
        236,118,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,
        3,238,119,0,777,778,5,2,0,0,778,779,5,4,0,0,779,79,1,0,0,0,780,781,
        5,137,0,0,781,782,5,3,0,0,782,783,5,1,0,0,783,784,3,126,63,0,784,
        785,3,224,112,0,785,786,3,218,109,0,786,787,3,220,110,0,787,788,
        3,226,113,0,788,789,3,228,114,0,789,790,3,232,116,0,790,791,3,200,
        100,0,791,792,3,230,115,0,792,793,3,234,117,0,793,794,5,2,0,0,794,
        795,5,4,0,0,795,81,1,0,0,0,796,797,5,137,0,0,797,798,5,3,0,0,798,
        799,5,1,0,0,799,801,3,128,64,0,800,802,3,246,123,0,801,800,1,0,0,
        0,801,802,1,0,0,0,802,803,1,0,0,0,803,805,3,218,109,0,804,806,3,
        322,161,0,805,804,1,0,0,0,805,806,1,0,0,0,806,808,1,0,0,0,807,809,
        3,276,138,0,808,807,1,0,0,0,808,809,1,0,0,0,809,811,1,0,0,0,810,
        812,3,324,162,0,811,810,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,
        813,815,3,278,139,0,814,813,1,0,0,0,814,815,1,0,0,0,815,816,1,0,
        0,0,816,818,3,280,140,0,817,819,3,282,141,0,818,817,1,0,0,0,818,
        819,1,0,0,0,819,820,1,0,0,0,820,822,3,284,142,0,821,823,3,288,144,
        0,822,821,1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,826,3,286,
        143,0,825,824,1,0,0,0,825,826,1,0,0,0,826,827,1,0,0,0,827,829,3,
        290,145,0,828,830,3,292,146,0,829,828,1,0,0,0,829,830,1,0,0,0,830,
        832,1,0,0,0,831,833,3,294,147,0,832,831,1,0,0,0,832,833,1,0,0,0,
        833,834,1,0,0,0,834,835,3,296,148,0,835,836,5,2,0,0,836,837,5,4,
        0,0,837,83,1,0,0,0,838,839,5,137,0,0,839,840,5,3,0,0,840,841,5,1,
        0,0,841,842,3,130,65,0,842,844,3,316,158,0,843,845,3,200,100,0,844,
        843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,847,3,202,101,0,
        847,848,3,318,159,0,848,849,3,204,102,0,849,850,5,2,0,0,850,851,
        5,4,0,0,851,85,1,0,0,0,852,853,5,137,0,0,853,854,5,3,0,0,854,855,
        5,1,0,0,855,856,3,132,66,0,856,857,3,206,103,0,857,858,3,208,104,
        0,858,859,3,210,105,0,859,860,5,2,0,0,860,861,5,4,0,0,861,87,1,0,
        0,0,862,863,5,137,0,0,863,864,5,3,0,0,864,865,5,1,0,0,865,867,3,
        134,67,0,866,868,3,152,76,0,867,866,1,0,0,0,867,868,1,0,0,0,868,
        869,1,0,0,0,869,870,3,206,103,0,870,872,3,208,104,0,871,873,3,298,
        149,0,872,871,1,0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,876,3,
        300,150,0,875,874,1,0,0,0,875,876,1,0,0,0,876,878,1,0,0,0,877,879,
        3,200,100,0,878,877,1,0,0,0,878,879,1,0,0,0,879,881,1,0,0,0,880,
        882,3,302,151,0,881,880,1,0,0,0,881,882,1,0,0,0,882,884,1,0,0,0,
        883,885,3,304,152,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,
        0,0,886,887,3,210,105,0,887,888,3,306,153,0,888,890,3,308,154,0,
        889,891,3,310,155,0,890,889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,
        0,0,892,893,5,2,0,0,893,894,5,4,0,0,894,89,1,0,0,0,895,896,5,137,
        0,0,896,897,5,3,0,0,897,898,5,1,0,0,898,899,3,136,68,0,899,900,3,
        206,103,0,900,901,3,208,104,0,901,902,3,210,105,0,902,903,5,2,0,
        0,903,904,5,4,0,0,904,91,1,0,0,0,905,906,5,137,0,0,906,907,5,3,0,
        0,907,908,5,1,0,0,908,910,3,138,69,0,909,911,3,200,100,0,910,909,
        1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,914,3,184,92,0,913,912,
        1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,917,3,186,93,0,916,915,
        1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,920,3,156,78,0,919,918,
        1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,923,3,312,156,0,922,
        921,1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,926,3,314,157,0,
        925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,5,2,0,0,
        928,929,5,4,0,0,929,93,1,0,0,0,930,931,5,137,0,0,931,932,5,3,0,0,
        932,933,5,1,0,0,933,934,3,140,70,0,934,935,3,188,94,0,935,937,3,
        200,100,0,936,938,3,202,101,0,937,936,1,0,0,0,937,938,1,0,0,0,938,
        939,1,0,0,0,939,940,3,204,102,0,940,941,5,2,0,0,941,942,5,4,0,0,
        942,95,1,0,0,0,943,944,5,137,0,0,944,945,5,3,0,0,945,946,5,1,0,0,
        946,948,3,142,71,0,947,949,3,320,160,0,948,947,1,0,0,0,948,949,1,
        0,0,0,949,950,1,0,0,0,950,951,3,322,161,0,951,952,3,200,100,0,952,
        953,5,2,0,0,953,954,5,4,0,0,954,97,1,0,0,0,955,956,5,137,0,0,956,
        957,5,3,0,0,957,958,5,1,0,0,958,959,3,144,72,0,959,960,3,336,168,
        0,960,962,3,338,169,0,961,963,3,340,170,0,962,961,1,0,0,0,962,963,
        1,0,0,0,963,964,1,0,0,0,964,965,5,2,0,0,965,966,5,4,0,0,966,99,1,
        0,0,0,967,968,5,137,0,0,968,969,5,3,0,0,969,970,5,1,0,0,970,971,
        3,146,73,0,971,972,3,192,96,0,972,973,3,194,97,0,973,974,5,2,0,0,
        974,975,5,4,0,0,975,101,1,0,0,0,976,977,5,137,0,0,977,978,5,3,0,
        0,978,979,5,1,0,0,979,981,3,148,74,0,980,982,3,196,98,0,981,980,
        1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,3,234,117,0,984,
        985,5,2,0,0,985,986,5,4,0,0,986,103,1,0,0,0,987,988,5,137,0,0,988,
        989,5,3,0,0,989,990,5,1,0,0,990,991,3,150,75,0,991,992,3,188,94,
        0,992,994,3,346,173,0,993,995,3,200,100,0,994,993,1,0,0,0,994,995,
        1,0,0,0,995,996,1,0,0,0,996,997,3,202,101,0,997,998,3,204,102,0,
        998,999,3,348,174,0,999,1000,5,2,0,0,1000,1001,5,4,0,0,1001,105,
        1,0,0,0,1002,1003,5,12,0,0,1003,1004,5,3,0,0,1004,1005,5,19,0,0,
        1005,1006,5,4,0,0,1006,107,1,0,0,0,1007,1008,5,12,0,0,1008,1009,
        5,3,0,0,1009,1010,5,20,0,0,1010,1011,5,4,0,0,1011,109,1,0,0,0,1012,
        1013,5,12,0,0,1013,1014,5,3,0,0,1014,1015,5,21,0,0,1015,1016,5,4,
        0,0,1016,111,1,0,0,0,1017,1018,5,12,0,0,1018,1019,5,3,0,0,1019,1020,
        5,22,0,0,1020,1021,5,4,0,0,1021,113,1,0,0,0,1022,1023,5,12,0,0,1023,
        1024,5,3,0,0,1024,1025,5,23,0,0,1025,1026,5,4,0,0,1026,115,1,0,0,
        0,1027,1028,5,12,0,0,1028,1029,5,3,0,0,1029,1030,5,24,0,0,1030,1031,
        5,4,0,0,1031,117,1,0,0,0,1032,1033,5,12,0,0,1033,1034,5,3,0,0,1034,
        1035,5,25,0,0,1035,1036,5,4,0,0,1036,119,1,0,0,0,1037,1038,5,12,
        0,0,1038,1039,5,3,0,0,1039,1040,5,26,0,0,1040,1041,5,4,0,0,1041,
        121,1,0,0,0,1042,1043,5,12,0,0,1043,1044,5,3,0,0,1044,1045,5,27,
        0,0,1045,1046,5,4,0,0,1046,123,1,0,0,0,1047,1048,5,12,0,0,1048,1049,
        5,3,0,0,1049,1050,5,28,0,0,1050,1051,5,4,0,0,1051,125,1,0,0,0,1052,
        1053,5,12,0,0,1053,1054,5,3,0,0,1054,1055,5,29,0,0,1055,1056,5,4,
        0,0,1056,127,1,0,0,0,1057,1058,5,12,0,0,1058,1059,5,3,0,0,1059,1060,
        5,30,0,0,1060,1061,5,4,0,0,1061,129,1,0,0,0,1062,1063,5,12,0,0,1063,
        1064,5,3,0,0,1064,1065,5,31,0,0,1065,1066,5,4,0,0,1066,131,1,0,0,
        0,1067,1068,5,12,0,0,1068,1069,5,3,0,0,1069,1070,5,32,0,0,1070,1071,
        5,4,0,0,1071,133,1,0,0,0,1072,1073,5,12,0,0,1073,1074,5,3,0,0,1074,
        1075,5,33,0,0,1075,1076,5,4,0,0,1076,135,1,0,0,0,1077,1078,5,12,
        0,0,1078,1079,5,3,0,0,1079,1080,5,34,0,0,1080,1081,5,4,0,0,1081,
        137,1,0,0,0,1082,1083,5,12,0,0,1083,1084,5,3,0,0,1084,1085,5,35,
        0,0,1085,1086,5,4,0,0,1086,139,1,0,0,0,1087,1088,5,12,0,0,1088,1089,
        5,3,0,0,1089,1090,5,36,0,0,1090,1091,5,4,0,0,1091,141,1,0,0,0,1092,
        1093,5,12,0,0,1093,1094,5,3,0,0,1094,1095,5,37,0,0,1095,1096,5,4,
        0,0,1096,143,1,0,0,0,1097,1098,5,12,0,0,1098,1099,5,3,0,0,1099,1100,
        5,38,0,0,1100,1101,5,4,0,0,1101,145,1,0,0,0,1102,1103,5,12,0,0,1103,
        1104,5,3,0,0,1104,1105,5,39,0,0,1105,1106,5,4,0,0,1106,147,1,0,0,
        0,1107,1108,5,12,0,0,1108,1109,5,3,0,0,1109,1110,5,40,0,0,1110,1111,
        5,4,0,0,1111,149,1,0,0,0,1112,1113,5,12,0,0,1113,1114,5,3,0,0,1114,
        1115,5,41,0,0,1115,1116,5,4,0,0,1116,151,1,0,0,0,1117,1118,5,42,
        0,0,1118,1119,5,3,0,0,1119,1120,5,13,0,0,1120,1121,5,4,0,0,1121,
        153,1,0,0,0,1122,1123,5,43,0,0,1123,1124,5,3,0,0,1124,1125,5,137,
        0,0,1125,1126,5,4,0,0,1126,155,1,0,0,0,1127,1128,5,44,0,0,1128,1129,
        5,3,0,0,1129,1130,5,137,0,0,1130,1131,5,4,0,0,1131,157,1,0,0,0,1132,
        1133,5,45,0,0,1133,1134,5,3,0,0,1134,1135,5,137,0,0,1135,1136,5,
        4,0,0,1136,159,1,0,0,0,1137,1138,5,46,0,0,1138,1139,5,3,0,0,1139,
        1140,5,13,0,0,1140,1141,5,4,0,0,1141,161,1,0,0,0,1142,1143,5,47,
        0,0,1143,1144,5,3,0,0,1144,1145,5,137,0,0,1145,1146,5,4,0,0,1146,
        163,1,0,0,0,1147,1148,5,48,0,0,1148,1149,5,3,0,0,1149,1150,3,354,
        177,0,1150,1151,5,4,0,0,1151,165,1,0,0,0,1152,1153,5,49,0,0,1153,
        1154,5,3,0,0,1154,1155,5,13,0,0,1155,1156,5,4,0,0,1156,167,1,0,0,
        0,1157,1158,5,50,0,0,1158,1159,5,3,0,0,1159,1160,3,354,177,0,1160,
        1161,5,4,0,0,1161,169,1,0,0,0,1162,1163,5,51,0,0,1163,1164,5,3,0,
        0,1164,1165,3,354,177,0,1165,1166,5,4,0,0,1166,171,1,0,0,0,1167,
        1168,5,52,0,0,1168,1169,5,3,0,0,1169,1170,3,354,177,0,1170,1171,
        5,4,0,0,1171,173,1,0,0,0,1172,1173,5,53,0,0,1173,1174,5,3,0,0,1174,
        1175,5,13,0,0,1175,1176,5,4,0,0,1176,175,1,0,0,0,1177,1178,5,54,
        0,0,1178,1179,5,3,0,0,1179,1180,5,13,0,0,1180,1181,5,4,0,0,1181,
        177,1,0,0,0,1182,1183,5,55,0,0,1183,1184,5,3,0,0,1184,1185,5,13,
        0,0,1185,1186,5,4,0,0,1186,179,1,0,0,0,1187,1188,5,56,0,0,1188,1189,
        5,3,0,0,1189,1190,5,13,0,0,1190,1191,5,4,0,0,1191,181,1,0,0,0,1192,
        1193,5,57,0,0,1193,1194,5,3,0,0,1194,1195,5,13,0,0,1195,1196,5,4,
        0,0,1196,183,1,0,0,0,1197,1198,5,58,0,0,1198,1199,5,3,0,0,1199,1200,
        3,352,176,0,1200,1201,5,4,0,0,1201,185,1,0,0,0,1202,1203,5,59,0,
        0,1203,1204,5,3,0,0,1204,1205,3,214,107,0,1205,1206,5,4,0,0,1206,
        187,1,0,0,0,1207,1208,5,60,0,0,1208,1209,5,3,0,0,1209,1210,3,212,
        106,0,1210,1211,5,4,0,0,1211,189,1,0,0,0,1212,1213,5,61,0,0,1213,
        1214,5,3,0,0,1214,1215,3,352,176,0,1215,1216,5,4,0,0,1216,191,1,
        0,0,0,1217,1218,5,62,0,0,1218,1219,5,3,0,0,1219,1220,5,138,0,0,1220,
        1221,5,4,0,0,1221,193,1,0,0,0,1222,1223,5,63,0,0,1223,1224,5,3,0,
        0,1224,1228,5,1,0,0,1225,1227,3,334,167,0,1226,1225,1,0,0,0,1227,
        1230,1,0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,1231,1,0,0,
        0,1230,1228,1,0,0,0,1231,1232,5,2,0,0,1232,1233,5,4,0,0,1233,195,
        1,0,0,0,1234,1235,5,64,0,0,1235,1236,5,3,0,0,1236,1237,5,137,0,0,
        1237,1238,5,4,0,0,1238,197,1,0,0,0,1239,1240,5,65,0,0,1240,1241,
        5,3,0,0,1241,1242,3,212,106,0,1242,1243,5,4,0,0,1243,199,1,0,0,0,
        1244,1245,5,66,0,0,1245,1246,5,3,0,0,1246,1247,3,352,176,0,1247,
        1248,5,4,0,0,1248,201,1,0,0,0,1249,1250,5,67,0,0,1250,1251,5,3,0,
        0,1251,1252,3,352,176,0,1252,1253,5,4,0,0,1253,203,1,0,0,0,1254,
        1255,5,68,0,0,1255,1256,5,3,0,0,1256,1257,3,352,176,0,1257,1258,
        5,4,0,0,1258,205,1,0,0,0,1259,1260,5,69,0,0,1260,1261,5,3,0,0,1261,
        1262,5,13,0,0,1262,1263,5,4,0,0,1263,207,1,0,0,0,1264,1265,5,70,
        0,0,1265,1266,5,3,0,0,1266,1267,3,212,106,0,1267,1268,5,4,0,0,1268,
        209,1,0,0,0,1269,1270,5,71,0,0,1270,1271,5,3,0,0,1271,1272,5,13,
        0,0,1272,1273,5,4,0,0,1273,211,1,0,0,0,1274,1279,5,5,0,0,1275,1276,
        5,137,0,0,1276,1278,5,6,0,0,1277,1275,1,0,0,0,1278,1281,1,0,0,0,
        1279,1277,1,0,0,0,1279,1280,1,0,0,0,1280,1282,1,0,0,0,1281,1279,
        1,0,0,0,1282,1283,5,7,0,0,1283,213,1,0,0,0,1284,1285,5,5,0,0,1285,
        1301,5,7,0,0,1286,1287,5,5,0,0,1287,1292,3,354,177,0,1288,1289,5,
        6,0,0,1289,1291,3,354,177,0,1290,1288,1,0,0,0,1291,1294,1,0,0,0,
        1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,1296,1,0,0,0,1294,1292,
        1,0,0,0,1295,1297,5,6,0,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,
        1298,1,0,0,0,1298,1299,5,7,0,0,1299,1301,1,0,0,0,1300,1284,1,0,0,
        0,1300,1286,1,0,0,0,1301,215,1,0,0,0,1302,1307,5,5,0,0,1303,1304,
        5,139,0,0,1304,1306,5,6,0,0,1305,1303,1,0,0,0,1306,1309,1,0,0,0,
        1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,1310,1,0,0,0,1309,1307,
        1,0,0,0,1310,1311,5,7,0,0,1311,217,1,0,0,0,1312,1313,5,72,0,0,1313,
        1314,5,3,0,0,1314,1315,5,137,0,0,1315,1316,5,4,0,0,1316,219,1,0,
        0,0,1317,1318,5,73,0,0,1318,1319,5,3,0,0,1319,1320,3,212,106,0,1320,
        1321,5,4,0,0,1321,221,1,0,0,0,1322,1323,5,74,0,0,1323,1324,5,3,0,
        0,1324,1325,3,212,106,0,1325,1326,5,4,0,0,1326,223,1,0,0,0,1327,
        1328,5,75,0,0,1328,1329,5,3,0,0,1329,1330,3,352,176,0,1330,1331,
        5,4,0,0,1331,225,1,0,0,0,1332,1333,5,76,0,0,1333,1334,5,3,0,0,1334,
        1335,3,352,176,0,1335,1336,5,4,0,0,1336,227,1,0,0,0,1337,1338,5,
        77,0,0,1338,1339,5,3,0,0,1339,1340,3,352,176,0,1340,1341,5,4,0,0,
        1341,229,1,0,0,0,1342,1343,5,78,0,0,1343,1344,5,3,0,0,1344,1345,
        5,13,0,0,1345,1346,5,4,0,0,1346,231,1,0,0,0,1347,1348,5,79,0,0,1348,
        1349,5,3,0,0,1349,1350,3,212,106,0,1350,1351,5,4,0,0,1351,233,1,
        0,0,0,1352,1353,5,80,0,0,1353,1354,5,3,0,0,1354,1355,3,354,177,0,
        1355,1356,5,4,0,0,1356,235,1,0,0,0,1357,1358,5,81,0,0,1358,1359,
        5,3,0,0,1359,1360,5,137,0,0,1360,1361,5,4,0,0,1361,237,1,0,0,0,1362,
        1363,5,82,0,0,1363,1364,5,3,0,0,1364,1365,5,138,0,0,1365,1366,5,
        4,0,0,1366,239,1,0,0,0,1367,1368,5,83,0,0,1368,1369,5,3,0,0,1369,
        1370,5,13,0,0,1370,1371,5,4,0,0,1371,241,1,0,0,0,1372,1373,5,84,
        0,0,1373,1374,5,3,0,0,1374,1375,3,354,177,0,1375,1376,5,4,0,0,1376,
        243,1,0,0,0,1377,1378,5,85,0,0,1378,1379,5,3,0,0,1379,1380,3,354,
        177,0,1380,1381,5,4,0,0,1381,245,1,0,0,0,1382,1383,5,86,0,0,1383,
        1384,5,3,0,0,1384,1386,5,1,0,0,1385,1387,3,254,127,0,1386,1385,1,
        0,0,0,1386,1387,1,0,0,0,1387,1389,1,0,0,0,1388,1390,3,350,175,0,
        1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1392,1,0,0,0,1391,1393,
        3,250,125,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1395,1,0,0,
        0,1394,1396,3,248,124,0,1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,
        1398,1,0,0,0,1397,1399,3,252,126,0,1398,1397,1,0,0,0,1398,1399,1,
        0,0,0,1399,1401,1,0,0,0,1400,1402,3,256,128,0,1401,1400,1,0,0,0,
        1401,1402,1,0,0,0,1402,1404,1,0,0,0,1403,1405,3,258,129,0,1404,1403,
        1,0,0,0,1404,1405,1,0,0,0,1405,1407,1,0,0,0,1406,1408,3,260,130,
        0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1410,1,0,0,0,1409,1411,
        3,262,131,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,
        0,1412,1413,5,2,0,0,1413,1414,5,4,0,0,1414,247,1,0,0,0,1415,1416,
        5,87,0,0,1416,1417,5,3,0,0,1417,1418,5,13,0,0,1418,1419,5,4,0,0,
        1419,249,1,0,0,0,1420,1421,5,88,0,0,1421,1422,5,3,0,0,1422,1423,
        5,139,0,0,1423,1424,5,4,0,0,1424,251,1,0,0,0,1425,1426,5,89,0,0,
        1426,1427,5,3,0,0,1427,1428,5,13,0,0,1428,1429,5,4,0,0,1429,253,
        1,0,0,0,1430,1431,5,90,0,0,1431,1432,5,3,0,0,1432,1433,7,0,0,0,1433,
        1434,5,4,0,0,1434,255,1,0,0,0,1435,1436,5,91,0,0,1436,1437,5,3,0,
        0,1437,1438,5,13,0,0,1438,1439,5,4,0,0,1439,257,1,0,0,0,1440,1441,
        5,92,0,0,1441,1442,5,3,0,0,1442,1443,5,13,0,0,1443,1444,5,4,0,0,
        1444,259,1,0,0,0,1445,1446,5,93,0,0,1446,1447,5,3,0,0,1447,1448,
        3,354,177,0,1448,1449,5,4,0,0,1449,261,1,0,0,0,1450,1451,5,94,0,
        0,1451,1452,5,3,0,0,1452,1456,5,1,0,0,1453,1455,3,264,132,0,1454,
        1453,1,0,0,0,1455,1458,1,0,0,0,1456,1454,1,0,0,0,1456,1457,1,0,0,
        0,1457,1459,1,0,0,0,1458,1456,1,0,0,0,1459,1460,5,2,0,0,1460,1461,
        5,4,0,0,1461,263,1,0,0,0,1462,1463,5,137,0,0,1463,1464,5,3,0,0,1464,
        1466,5,1,0,0,1465,1467,3,266,133,0,1466,1465,1,0,0,0,1466,1467,1,
        0,0,0,1467,1469,1,0,0,0,1468,1470,3,268,134,0,1469,1468,1,0,0,0,
        1469,1470,1,0,0,0,1470,1472,1,0,0,0,1471,1473,3,270,135,0,1472,1471,
        1,0,0,0,1472,1473,1,0,0,0,1473,1475,1,0,0,0,1474,1476,3,272,136,
        0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1478,1,0,0,0,1477,1479,
        3,248,124,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1481,1,0,0,
        0,1480,1482,3,274,137,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,
        1484,1,0,0,0,1483,1485,3,344,172,0,1484,1483,1,0,0,0,1484,1485,1,
        0,0,0,1485,1487,1,0,0,0,1486,1488,3,268,134,0,1487,1486,1,0,0,0,
        1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,1490,5,2,0,0,1490,1491,
        5,4,0,0,1491,265,1,0,0,0,1492,1493,5,95,0,0,1493,1494,5,3,0,0,1494,
        1495,5,139,0,0,1495,1496,5,4,0,0,1496,267,1,0,0,0,1497,1498,5,96,
        0,0,1498,1499,5,3,0,0,1499,1500,5,137,0,0,1500,1501,5,4,0,0,1501,
        269,1,0,0,0,1502,1503,5,97,0,0,1503,1504,5,3,0,0,1504,1505,3,352,
        176,0,1505,1506,5,4,0,0,1506,271,1,0,0,0,1507,1508,5,98,0,0,1508,
        1509,5,3,0,0,1509,1510,3,352,176,0,1510,1511,5,4,0,0,1511,273,1,
        0,0,0,1512,1513,5,99,0,0,1513,1514,5,3,0,0,1514,1515,5,139,0,0,1515,
        1516,5,4,0,0,1516,275,1,0,0,0,1517,1518,5,100,0,0,1518,1519,5,3,
        0,0,1519,1520,5,138,0,0,1520,1521,5,4,0,0,1521,277,1,0,0,0,1522,
        1523,5,101,0,0,1523,1524,5,3,0,0,1524,1525,5,139,0,0,1525,1526,5,
        4,0,0,1526,279,1,0,0,0,1527,1528,5,102,0,0,1528,1529,5,3,0,0,1529,
        1530,5,13,0,0,1530,1531,5,4,0,0,1531,281,1,0,0,0,1532,1533,5,103,
        0,0,1533,1534,5,3,0,0,1534,1535,3,214,107,0,1535,1536,5,4,0,0,1536,
        283,1,0,0,0,1537,1538,5,104,0,0,1538,1539,5,3,0,0,1539,1540,5,137,
        0,0,1540,1541,5,4,0,0,1541,285,1,0,0,0,1542,1543,5,105,0,0,1543,
        1544,5,3,0,0,1544,1545,5,137,0,0,1545,1546,5,4,0,0,1546,287,1,0,
        0,0,1547,1548,5,106,0,0,1548,1549,5,3,0,0,1549,1550,3,212,106,0,
        1550,1551,5,4,0,0,1551,289,1,0,0,0,1552,1553,5,107,0,0,1553,1554,
        5,3,0,0,1554,1555,3,352,176,0,1555,1556,5,4,0,0,1556,291,1,0,0,0,
        1557,1558,5,108,0,0,1558,1559,5,3,0,0,1559,1560,3,354,177,0,1560,
        1561,5,4,0,0,1561,1570,1,0,0,0,1562,1563,5,108,0,0,1563,1564,5,3,
        0,0,1564,1565,5,5,0,0,1565,1566,3,330,165,0,1566,1567,5,7,0,0,1567,
        1568,5,4,0,0,1568,1570,1,0,0,0,1569,1557,1,0,0,0,1569,1562,1,0,0,
        0,1570,293,1,0,0,0,1571,1572,5,109,0,0,1572,1573,5,3,0,0,1573,1574,
        3,352,176,0,1574,1575,5,4,0,0,1575,295,1,0,0,0,1576,1577,5,110,0,
        0,1577,1578,5,3,0,0,1578,1579,3,212,106,0,1579,1580,5,4,0,0,1580,
        297,1,0,0,0,1581,1582,5,111,0,0,1582,1583,5,3,0,0,1583,1584,3,214,
        107,0,1584,1585,5,4,0,0,1585,299,1,0,0,0,1586,1587,5,112,0,0,1587,
        1588,5,3,0,0,1588,1589,3,214,107,0,1589,1590,5,4,0,0,1590,301,1,
        0,0,0,1591,1592,5,113,0,0,1592,1593,5,3,0,0,1593,1594,3,214,107,
        0,1594,1595,5,4,0,0,1595,303,1,0,0,0,1596,1597,5,114,0,0,1597,1598,
        5,3,0,0,1598,1599,3,214,107,0,1599,1600,5,4,0,0,1600,305,1,0,0,0,
        1601,1602,5,115,0,0,1602,1603,5,3,0,0,1603,1604,5,139,0,0,1604,1605,
        5,4,0,0,1605,307,1,0,0,0,1606,1607,5,116,0,0,1607,1608,5,3,0,0,1608,
        1609,3,352,176,0,1609,1610,5,4,0,0,1610,309,1,0,0,0,1611,1612,5,
        117,0,0,1612,1613,5,3,0,0,1613,1614,5,13,0,0,1614,1615,5,4,0,0,1615,
        311,1,0,0,0,1616,1617,5,118,0,0,1617,1618,5,3,0,0,1618,1619,5,137,
        0,0,1619,1620,5,4,0,0,1620,313,1,0,0,0,1621,1622,5,119,0,0,1622,
        1623,5,3,0,0,1623,1624,5,137,0,0,1624,1625,5,4,0,0,1625,315,1,0,
        0,0,1626,1627,5,120,0,0,1627,1628,5,3,0,0,1628,1629,3,354,177,0,
        1629,1630,5,4,0,0,1630,317,1,0,0,0,1631,1632,5,121,0,0,1632,1633,
        5,3,0,0,1633,1634,5,137,0,0,1634,1635,5,4,0,0,1635,319,1,0,0,0,1636,
        1637,5,122,0,0,1637,1638,5,3,0,0,1638,1639,5,137,0,0,1639,1640,5,
        4,0,0,1640,321,1,0,0,0,1641,1642,5,123,0,0,1642,1643,5,3,0,0,1643,
        1647,5,1,0,0,1644,1646,3,334,167,0,1645,1644,1,0,0,0,1646,1649,1,
        0,0,0,1647,1645,1,0,0,0,1647,1648,1,0,0,0,1648,1650,1,0,0,0,1649,
        1647,1,0,0,0,1650,1651,5,2,0,0,1651,1652,5,4,0,0,1652,323,1,0,0,
        0,1653,1654,5,124,0,0,1654,1655,5,3,0,0,1655,1656,3,212,106,0,1656,
        1657,5,4,0,0,1657,325,1,0,0,0,1658,1659,5,125,0,0,1659,1660,5,3,
        0,0,1660,1661,3,352,176,0,1661,1662,5,4,0,0,1662,327,1,0,0,0,1663,
        1664,5,126,0,0,1664,1665,5,3,0,0,1665,1666,5,13,0,0,1666,1667,5,
        4,0,0,1667,329,1,0,0,0,1668,1670,3,332,166,0,1669,1668,1,0,0,0,1670,
        1673,1,0,0,0,1671,1669,1,0,0,0,1671,1672,1,0,0,0,1672,331,1,0,0,
        0,1673,1671,1,0,0,0,1674,1675,5,1,0,0,1675,1676,5,127,0,0,1676,1677,
        5,3,0,0,1677,1678,5,137,0,0,1678,1679,5,4,0,0,1679,1680,5,128,0,
        0,1680,1681,5,3,0,0,1681,1682,5,137,0,0,1682,1683,5,4,0,0,1683,1684,
        5,2,0,0,1684,1685,5,6,0,0,1685,333,1,0,0,0,1686,1687,3,354,177,0,
        1687,1688,5,3,0,0,1688,1689,3,354,177,0,1689,1690,5,4,0,0,1690,1728,
        1,0,0,0,1691,1692,3,354,177,0,1692,1693,5,3,0,0,1693,1694,5,13,0,
        0,1694,1695,5,4,0,0,1695,1728,1,0,0,0,1696,1697,3,354,177,0,1697,
        1698,5,3,0,0,1698,1699,5,141,0,0,1699,1700,5,4,0,0,1700,1728,1,0,
        0,0,1701,1702,3,354,177,0,1702,1703,5,3,0,0,1703,1704,5,1,0,0,1704,
        1705,3,334,167,0,1705,1706,5,2,0,0,1706,1707,5,4,0,0,1707,1728,1,
        0,0,0,1708,1709,3,354,177,0,1709,1710,5,3,0,0,1710,1712,5,5,0,0,
        1711,1713,3,354,177,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1718,
        1,0,0,0,1714,1715,5,6,0,0,1715,1717,3,354,177,0,1716,1714,1,0,0,
        0,1717,1720,1,0,0,0,1718,1716,1,0,0,0,1718,1719,1,0,0,0,1719,1722,
        1,0,0,0,1720,1718,1,0,0,0,1721,1723,5,6,0,0,1722,1721,1,0,0,0,1722,
        1723,1,0,0,0,1723,1724,1,0,0,0,1724,1725,5,7,0,0,1725,1726,5,4,0,
        0,1726,1728,1,0,0,0,1727,1686,1,0,0,0,1727,1691,1,0,0,0,1727,1696,
        1,0,0,0,1727,1701,1,0,0,0,1727,1708,1,0,0,0,1728,335,1,0,0,0,1729,
        1730,5,129,0,0,1730,1731,5,3,0,0,1731,1732,3,212,106,0,1732,1733,
        5,4,0,0,1733,337,1,0,0,0,1734,1735,5,130,0,0,1735,1736,5,3,0,0,1736,
        1737,5,13,0,0,1737,1738,5,4,0,0,1738,339,1,0,0,0,1739,1740,5,131,
        0,0,1740,1741,5,3,0,0,1741,1742,3,352,176,0,1742,1743,5,4,0,0,1743,
        341,1,0,0,0,1744,1745,5,132,0,0,1745,1746,5,3,0,0,1746,1750,5,1,
        0,0,1747,1749,3,334,167,0,1748,1747,1,0,0,0,1749,1752,1,0,0,0,1750,
        1748,1,0,0,0,1750,1751,1,0,0,0,1751,1753,1,0,0,0,1752,1750,1,0,0,
        0,1753,1754,5,2,0,0,1754,1755,5,4,0,0,1755,343,1,0,0,0,1756,1757,
        5,133,0,0,1757,1758,5,3,0,0,1758,1762,5,1,0,0,1759,1761,3,334,167,
        0,1760,1759,1,0,0,0,1761,1764,1,0,0,0,1762,1760,1,0,0,0,1762,1763,
        1,0,0,0,1763,1765,1,0,0,0,1764,1762,1,0,0,0,1765,1766,5,2,0,0,1766,
        1767,5,4,0,0,1767,345,1,0,0,0,1768,1769,5,134,0,0,1769,1770,5,3,
        0,0,1770,1771,5,137,0,0,1771,1772,5,4,0,0,1772,347,1,0,0,0,1773,
        1774,5,135,0,0,1774,1775,5,3,0,0,1775,1776,5,139,0,0,1776,1777,5,
        4,0,0,1777,349,1,0,0,0,1778,1779,5,136,0,0,1779,1780,5,3,0,0,1780,
        1781,3,354,177,0,1781,1782,5,4,0,0,1782,351,1,0,0,0,1783,1787,5,
        139,0,0,1784,1787,5,138,0,0,1785,1787,3,356,178,0,1786,1783,1,0,
        0,0,1786,1784,1,0,0,0,1786,1785,1,0,0,0,1787,353,1,0,0,0,1788,1792,
        3,352,176,0,1789,1792,5,13,0,0,1790,1792,5,140,0,0,1791,1788,1,0,
        0,0,1791,1789,1,0,0,0,1791,1790,1,0,0,0,1792,355,1,0,0,0,1793,1794,
        7,1,0,0,1794,357,1,0,0,0,142,388,391,394,397,400,404,408,411,414,
        418,421,424,427,430,433,438,441,444,457,462,467,472,477,482,487,
        492,497,502,507,512,517,522,527,532,537,542,547,552,557,562,567,
        576,579,584,594,597,600,603,606,640,651,654,657,660,663,666,669,
        672,675,678,681,684,687,690,693,714,717,720,723,726,730,733,736,
        759,762,767,770,774,801,805,808,811,814,818,822,825,829,832,844,
        867,872,875,878,881,884,890,910,913,916,919,922,925,937,948,962,
        981,994,1228,1279,1292,1296,1300,1307,1386,1389,1392,1395,1398,1401,
        1404,1407,1410,1456,1466,1469,1472,1475,1478,1481,1484,1487,1569,
        1647,1671,1712,1718,1722,1727,1750,1762,1786,1791
    ]

class PBXProjParser ( Parser ):

    grammarFileName = "PBXProj.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'='", "';'", "'('", "','", 
                     "')'", "'archiveVersion'", "'classes'", "'-'", "'.'", 
                     "'isa'", "<INVALID>", "'objectVersion'", "'objects'", 
                     "'rootObject'", "'/'", "'_'", "'PBXAggregateTarget'", 
                     "'PBXBuildFile'", "'PBXBuildStyle'", "'PBXContainerItemProxy'", 
                     "'PBXCopyFilesBuildPhase'", "'PBXFileReference'", "'PBXFrameworksBuildPhase'", 
                     "'PBXGroup'", "'PBXHeadersBuildPhase'", "'PBXNativeTarget'", 
                     "'PBXLegacyTarget'", "'PBXProject'", "'PBXReferenceProxy'", 
                     "<INVALID>", "'PBXShellScriptBuildPhase'", "'PBXSourcesBuildPhase'", 
                     "'PBXTargetDependency'", "'PBXVariantGroup'", "'XCBuildConfiguration'", 
                     "'XCConfigurationList'", "'XCRemoteSwiftPackageReference'", 
                     "'XCSwiftPackageProductDependency'", "'XCVersionGroup'", 
                     "'alwaysOutOfDate'", "'fileRef'", "'productRef'", "'containerPortal'", 
                     "'proxyType'", "'remoteGlobalIDString'", "'remoteInfo'", 
                     "'fileEncoding'", "'comments'", "'explicitFileType'", 
                     "'lastKnownFileType'", "'includeInIndex'", "'indentWidth'", 
                     "'tabWidth'", "'usesTabs'", "'wrapsLines'", "'platformFilter'", 
                     "'platformFilters'", "'children'", "'productInstallPath'", 
                     "'repositoryURL'", "'requirement'", "'package'", "'packageProductDependencies'", 
                     "'name'", "'path'", "'sourceTree'", "'buildActionMask'", 
                     "'files'", "'runOnlyForDeploymentPostprocessing'", 
                     "'buildConfigurationList'", "'buildPhases'", "'buildRules'", 
                     "'buildArgumentsString'", "'buildToolPath'", "'buildWorkingDirectory'", 
                     "'passBuildSettingsInEnvironment'", "'dependencies'", 
                     "'productName'", "'productReference'", "'productType'", 
                     "'lineEnding'", "'xcLanguageSpecificationIdentifier'", 
                     "'plistStructureDefinitionIdentifier'", "'attributes'", 
                     "'LastSwiftMigration'", "'DefaultBuildSystemTypeForWorkspace'", 
                     "'LastSwiftUpdateCheck'", "'BuildIndependentTargetsInParallel'", 
                     "'LastTestingUpgradeCheck'", "'LastUpgradeCheck'", 
                     "'ORGANIZATIONNAME'", "'TargetAttributes'", "'CreatedOnToolsVersion'", 
                     "'TestTargetID'", "'DevelopmentTeam'", "'DevelopmentTeamName'", 
                     "'ProvisioningStyle'", "'compatibilityVersion'", "'developmentRegion'", 
                     "'hasScannedForEncodings'", "'knownRegions'", "'mainGroup'", 
                     "'productRefGroup'", "'packageReferences'", "'projectDirPath'", 
                     "'projectReferences'", "'projectRoot'", "'targets'", 
                     "'inputFileListPaths'", "'inputPaths'", "'outputFileListPaths'", 
                     "'outputPaths'", "'shellPath'", "'shellScript'", "'showEnvVarsInLog'", 
                     "'target'", "'targetProxy'", "'fileType'", "'remoteRef'", 
                     "'baseConfigurationReference'", "'buildSettings'", 
                     "'buildStyles'", "'dstPath'", "'dstSubfolderSpec'", 
                     "'ProductGroup'", "'ProjectRef'", "'buildConfigurations'", 
                     "'defaultConfigurationIsVisible'", "'defaultConfigurationName'", 
                     "'settings'", "'SystemCapabilities'", "'currentVersion'", 
                     "'versionGroupType'", "'CLASSPREFIX'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "ARCHIVE_VERSION", "CLASSES", "DASH", "DOT", "ISA", 
                      "NUMBER", "OBJECT_VERSION", "OBJECTS", "ROOT_OBJECT", 
                      "SLASH", "UNDERSCORE", "PBX_AGGREGATE_TARGET", "PBX_BUILD_FILE", 
                      "PBX_BUILD_STYLE", "PBX_CONTAINER_ITEM_PROXY", "PBX_COPY_FILES_BUILD_PHASE", 
                      "PBX_FILE_REFERENCE", "PBX_FRAMEWORKS_BUILD_PHASE", 
                      "PBX_GROUP", "PBX_HEADERS_BUILD_PHASE", "PBX_NATIVE_TARGET", 
                      "PBX_LEGACY_TARGET", "PBX_PROJECT", "PBX_REFERENCE_PROXY", 
                      "PBX_RESOURCES_BUILD_PHASE", "PBX_SHELL_SCRIPT_BUILD_PHASE", 
                      "PBX_SOURCES_BUILD_PHASE", "PBX_TARGET_DEPENDENCY", 
                      "PBX_VARIANT_GROUP", "XC_BUILD_CONFIGURATION", "XC_CONFIGURATION_LIST", 
                      "XC_REMOTE_SWIFT_PACKAGE_REFERENCE", "XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY", 
                      "XC_VERSION_GROUP", "ALWAYS_OUT_OF_DATE", "FILE_REF", 
                      "PRODUCT_REF", "CONTAINER_PORTAL", "PROXY_TYPE", "REMOTE_GLOBAL_ID_STRING", 
                      "REMOTE_INFO", "FILE_ENCODING", "COMMENTS", "EXPLICIT_FILE_TYPE", 
                      "LAST_KNOWN_FILE_TYPE", "INCLUDE_IN_INDEX", "INDENT_WIDTH", 
                      "TAB_WIDTH", "USES_TABS", "WRAPS_LINES", "PLATFORM_FILTER", 
                      "PLATFORM_FILTERS", "CHILDREN", "PRODUCT_INSTALL_PATH", 
                      "REPOSITORY_URL", "REQUIREMENT", "PACKAGE", "PACKAGE_PRODUCT_DEPENDENCIES", 
                      "NAME", "PATH", "SOURCE_TREE", "BUILD_ACTION_MASK", 
                      "FILES", "RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING", 
                      "BUILD_CONFIGURATION_LIST", "BUILD_PHASES", "BUILD_RULES", 
                      "BUILD_ARGUMENTS_STRING", "BUILD_TOOL_PATH", "BUILD_WORKING_DIRECTORY", 
                      "PASS_BUILD_SETTINGS_IN_ENVIRONMENT", "DEPENDENCIES", 
                      "PRODUCT_NAME", "PRODUCT_REFERENCE", "PRODUCT_TYPE", 
                      "LINE_ENDING", "XC_LANGUAGE_SPECIFICATION_IDENTIFIER", 
                      "PLIST_STRUCTURE_DEFINITION_IDENTIFIER", "ATTRIBUTES", 
                      "LAST_SWIFT_MIGRATION", "DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE", 
                      "LAST_SWIFT_UPDATE_CHECK", "BUILD_INDEPENDENT_TARGETS_IN_PARALLEL", 
                      "LAST_TESTING_UPGRADE_CHECK", "LAST_UPGRADE_CHECK", 
                      "ORGANIZATION_NAME", "TARGET_ATTRIBUTES", "CREATED_ON_TOOLS_VERSION", 
                      "TEST_TARGET_ID", "DEVELOPMENT_TEAM", "DEVELOPMENT_TEAM_NAME", 
                      "PROVISIONING_STYLE", "COMPATIBILITY_VERSION", "DEVELOPMENT_REGION", 
                      "HAS_SCANNED_FOR_ENCODINGS", "KNOWN_REGIONS", "MAIN_GROUP", 
                      "PRODUCT_REF_GROUP", "PACKAGE_REFERENCES", "PRODUCT_DIR_PATH", 
                      "PROJECT_REFERENCES", "PROJECT_ROOT", "TARGETS", "INPUT_FILE_LIST_PATHS", 
                      "INPUT_PATHS", "OUTPUT_FILE_LIST_PATHS", "OUTPUT_PATHS", 
                      "SHELL_PATH", "SHELL_SCRIPT", "SHOW_ENV_VARS_IN_LOG", 
                      "TARGET", "TARGET_PROXY", "FILE_TYPE", "REMOTE_REF", 
                      "BASE_CONFIGURATION_REFERENCE", "BUILD_SETTINGS", 
                      "BUILD_STYLES", "DST_PATH", "DST_SUBFOLDER_SPEC", 
                      "PRODUCT_GROUP", "PROJECT_REF", "BUILD_CONFIGURATIONS", 
                      "DEFAULT_CONFIGURATION_IS_VISIBLE", "DEFAULT_CONFIGURATION_NAME", 
                      "SETTINGS", "SYSTEM_CAPABILITIES", "CURRENT_VERSION", 
                      "VERSION_GROUP_TYPE", "CLASSPREFIX", "REFERENCE", 
                      "QUOTED_STRING", "NON_QUOTED_STRING", "VARIABLE", 
                      "ALPHA_NUMERIC", "ALPHA_NUMERIC_CAP", "WS", "COMMENT", 
                      "LINE_COMMENT" ]

    RULE_start = 0
    RULE_root_element = 1
    RULE_archive_version = 2
    RULE_classes = 3
    RULE_object_version = 4
    RULE_objects = 5
    RULE_root_object = 6
    RULE_pbx_aggregate_target_section = 7
    RULE_pbx_build_file_section = 8
    RULE_pbx_build_style_section = 9
    RULE_pbx_container_item_proxy_section = 10
    RULE_pbx_copy_files_build_phase_section = 11
    RULE_pbx_file_reference_section = 12
    RULE_pbx_frameworks_build_phase_section = 13
    RULE_pbx_group_section = 14
    RULE_pbx_headers_build_phase_section = 15
    RULE_pbx_native_target_section = 16
    RULE_pbx_legacy_target_section = 17
    RULE_pbx_project_section = 18
    RULE_pbx_reference_proxy_section = 19
    RULE_pbx_resources_build_phase_section = 20
    RULE_pbx_shell_script_build_phase_section = 21
    RULE_pbx_sources_build_phase_section = 22
    RULE_pbx_target_dependency_section = 23
    RULE_pbx_variant_group_section = 24
    RULE_xc_build_configuration_section = 25
    RULE_xc_configuration_list_section = 26
    RULE_xc_remote_swift_package_reference_section = 27
    RULE_xc_swift_package_product_dependency_section = 28
    RULE_xc_version_group_section = 29
    RULE_pbx_aggregate_target = 30
    RULE_pbx_build_file = 31
    RULE_pbx_build_style = 32
    RULE_pbx_container_item_proxy = 33
    RULE_pbx_copy_files_build_phase = 34
    RULE_pbx_file_reference = 35
    RULE_pbx_frameworks_build_phase = 36
    RULE_pbx_group = 37
    RULE_pbx_headers_build_phase = 38
    RULE_pbx_native_target = 39
    RULE_pbx_legacy_target = 40
    RULE_pbx_project = 41
    RULE_pbx_reference_proxy = 42
    RULE_pbx_resources_build_phase = 43
    RULE_pbx_shell_script_build_phase = 44
    RULE_pbx_sources_build_phase = 45
    RULE_pbx_target_dependency = 46
    RULE_pbx_variant_group = 47
    RULE_xc_build_configuration = 48
    RULE_xc_configuration_list = 49
    RULE_xc_remote_swift_package_reference = 50
    RULE_xc_swift_package_product_dependency = 51
    RULE_xc_version_group = 52
    RULE_isa_pbx_aggregate_target = 53
    RULE_isa_pbx_build_file = 54
    RULE_isa_pbx_build_style = 55
    RULE_isa_pbx_container_item_proxy = 56
    RULE_isa_pbx_copy_files_build_phase = 57
    RULE_isa_pbx_file_reference = 58
    RULE_isa_pbx_frameworks_build_phase = 59
    RULE_isa_pbx_group = 60
    RULE_isa_pbx_header_build_phase = 61
    RULE_isa_pbx_native_target = 62
    RULE_isa_pbx_legacy_target = 63
    RULE_isa_pbx_project = 64
    RULE_isa_pbx_reference_proxy = 65
    RULE_isa_pbx_resources_build_phase = 66
    RULE_isa_pbx_shell_script_build_phase = 67
    RULE_isa_pbx_sources_build_phase = 68
    RULE_isa_pbx_target_dependency = 69
    RULE_isa_pbx_variant_group = 70
    RULE_isa_xc_build_configuration = 71
    RULE_isa_xc_configuration_list = 72
    RULE_isa_xc_remote_swift_package_reference = 73
    RULE_isa_xc_swift_package_product_dependency = 74
    RULE_isa_xc_version_group = 75
    RULE_always_out_of_date = 76
    RULE_file_ref = 77
    RULE_product_ref = 78
    RULE_container_portal = 79
    RULE_proxy_type = 80
    RULE_remote_global_id_string = 81
    RULE_remote_info = 82
    RULE_file_encoding = 83
    RULE_comments = 84
    RULE_explicit_file_type = 85
    RULE_last_known_file_type = 86
    RULE_include_in_index = 87
    RULE_indent_width = 88
    RULE_tab_width = 89
    RULE_uses_tabs = 90
    RULE_wraps_lines = 91
    RULE_platform_filter = 92
    RULE_platform_filters = 93
    RULE_children = 94
    RULE_product_install_path = 95
    RULE_repository_url = 96
    RULE_requirement = 97
    RULE_xc_package = 98
    RULE_package_product_dependencies = 99
    RULE_name = 100
    RULE_path = 101
    RULE_source_tree = 102
    RULE_build_action_mask = 103
    RULE_files = 104
    RULE_run_only_for_deployment_postprocessing = 105
    RULE_reference_list = 106
    RULE_any_string_list = 107
    RULE_non_quoted_strings_list = 108
    RULE_build_configuration_list = 109
    RULE_build_phases = 110
    RULE_build_rules = 111
    RULE_build_arguments_string = 112
    RULE_build_tool_path = 113
    RULE_build_working_directory = 114
    RULE_pass_build_settings_in_environment = 115
    RULE_dependencies = 116
    RULE_product_name = 117
    RULE_product_reference = 118
    RULE_product_type = 119
    RULE_line_ending = 120
    RULE_xc_language_specification_identifier = 121
    RULE_plist_structure_definition_identifier = 122
    RULE_attributes = 123
    RULE_last_swift_migration = 124
    RULE_default_build_system_type_for_workspace = 125
    RULE_last_swift_update_check = 126
    RULE_build_targets_in_parallel = 127
    RULE_last_testing_upgrade_check = 128
    RULE_last_upgrade_check = 129
    RULE_organization_name = 130
    RULE_target_attributes = 131
    RULE_target_attribute = 132
    RULE_created_on_tools_version = 133
    RULE_test_target_id = 134
    RULE_development_team = 135
    RULE_development_team_name = 136
    RULE_provisioning_style = 137
    RULE_compatibility_version = 138
    RULE_development_region = 139
    RULE_has_scanned_for_encodings = 140
    RULE_known_regions = 141
    RULE_main_group = 142
    RULE_product_ref_group = 143
    RULE_package_references = 144
    RULE_project_dir_path = 145
    RULE_project_references = 146
    RULE_project_root = 147
    RULE_targets = 148
    RULE_input_file_list_paths = 149
    RULE_input_paths = 150
    RULE_output_file_list_paths = 151
    RULE_output_paths = 152
    RULE_shell_path = 153
    RULE_shell_script = 154
    RULE_show_env_vars_in_log = 155
    RULE_target = 156
    RULE_target_proxy = 157
    RULE_file_type = 158
    RULE_remote_ref = 159
    RULE_base_configuration_reference = 160
    RULE_build_settings = 161
    RULE_build_styles = 162
    RULE_dst_path = 163
    RULE_dst_subfolder_spec = 164
    RULE_project_references_list = 165
    RULE_project_references_list_element = 166
    RULE_key_value = 167
    RULE_build_configurations = 168
    RULE_default_configuration_is_visible = 169
    RULE_default_configuration_name = 170
    RULE_settings = 171
    RULE_system_capabilities = 172
    RULE_current_version = 173
    RULE_version_group_type = 174
    RULE_class_prefix = 175
    RULE_any_string = 176
    RULE_str_number_variable = 177
    RULE_any_token = 178

    ruleNames =  [ "start", "root_element", "archive_version", "classes", 
                   "object_version", "objects", "root_object", "pbx_aggregate_target_section", 
                   "pbx_build_file_section", "pbx_build_style_section", 
                   "pbx_container_item_proxy_section", "pbx_copy_files_build_phase_section", 
                   "pbx_file_reference_section", "pbx_frameworks_build_phase_section", 
                   "pbx_group_section", "pbx_headers_build_phase_section", 
                   "pbx_native_target_section", "pbx_legacy_target_section", 
                   "pbx_project_section", "pbx_reference_proxy_section", 
                   "pbx_resources_build_phase_section", "pbx_shell_script_build_phase_section", 
                   "pbx_sources_build_phase_section", "pbx_target_dependency_section", 
                   "pbx_variant_group_section", "xc_build_configuration_section", 
                   "xc_configuration_list_section", "xc_remote_swift_package_reference_section", 
                   "xc_swift_package_product_dependency_section", "xc_version_group_section", 
                   "pbx_aggregate_target", "pbx_build_file", "pbx_build_style", 
                   "pbx_container_item_proxy", "pbx_copy_files_build_phase", 
                   "pbx_file_reference", "pbx_frameworks_build_phase", "pbx_group", 
                   "pbx_headers_build_phase", "pbx_native_target", "pbx_legacy_target", 
                   "pbx_project", "pbx_reference_proxy", "pbx_resources_build_phase", 
                   "pbx_shell_script_build_phase", "pbx_sources_build_phase", 
                   "pbx_target_dependency", "pbx_variant_group", "xc_build_configuration", 
                   "xc_configuration_list", "xc_remote_swift_package_reference", 
                   "xc_swift_package_product_dependency", "xc_version_group", 
                   "isa_pbx_aggregate_target", "isa_pbx_build_file", "isa_pbx_build_style", 
                   "isa_pbx_container_item_proxy", "isa_pbx_copy_files_build_phase", 
                   "isa_pbx_file_reference", "isa_pbx_frameworks_build_phase", 
                   "isa_pbx_group", "isa_pbx_header_build_phase", "isa_pbx_native_target", 
                   "isa_pbx_legacy_target", "isa_pbx_project", "isa_pbx_reference_proxy", 
                   "isa_pbx_resources_build_phase", "isa_pbx_shell_script_build_phase", 
                   "isa_pbx_sources_build_phase", "isa_pbx_target_dependency", 
                   "isa_pbx_variant_group", "isa_xc_build_configuration", 
                   "isa_xc_configuration_list", "isa_xc_remote_swift_package_reference", 
                   "isa_xc_swift_package_product_dependency", "isa_xc_version_group", 
                   "always_out_of_date", "file_ref", "product_ref", "container_portal", 
                   "proxy_type", "remote_global_id_string", "remote_info", 
                   "file_encoding", "comments", "explicit_file_type", "last_known_file_type", 
                   "include_in_index", "indent_width", "tab_width", "uses_tabs", 
                   "wraps_lines", "platform_filter", "platform_filters", 
                   "children", "product_install_path", "repository_url", 
                   "requirement", "xc_package", "package_product_dependencies", 
                   "name", "path", "source_tree", "build_action_mask", "files", 
                   "run_only_for_deployment_postprocessing", "reference_list", 
                   "any_string_list", "non_quoted_strings_list", "build_configuration_list", 
                   "build_phases", "build_rules", "build_arguments_string", 
                   "build_tool_path", "build_working_directory", "pass_build_settings_in_environment", 
                   "dependencies", "product_name", "product_reference", 
                   "product_type", "line_ending", "xc_language_specification_identifier", 
                   "plist_structure_definition_identifier", "attributes", 
                   "last_swift_migration", "default_build_system_type_for_workspace", 
                   "last_swift_update_check", "build_targets_in_parallel", 
                   "last_testing_upgrade_check", "last_upgrade_check", "organization_name", 
                   "target_attributes", "target_attribute", "created_on_tools_version", 
                   "test_target_id", "development_team", "development_team_name", 
                   "provisioning_style", "compatibility_version", "development_region", 
                   "has_scanned_for_encodings", "known_regions", "main_group", 
                   "product_ref_group", "package_references", "project_dir_path", 
                   "project_references", "project_root", "targets", "input_file_list_paths", 
                   "input_paths", "output_file_list_paths", "output_paths", 
                   "shell_path", "shell_script", "show_env_vars_in_log", 
                   "target", "target_proxy", "file_type", "remote_ref", 
                   "base_configuration_reference", "build_settings", "build_styles", 
                   "dst_path", "dst_subfolder_spec", "project_references_list", 
                   "project_references_list_element", "key_value", "build_configurations", 
                   "default_configuration_is_visible", "default_configuration_name", 
                   "settings", "system_capabilities", "current_version", 
                   "version_group_type", "class_prefix", "any_string", "str_number_variable", 
                   "any_token" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    ARCHIVE_VERSION=8
    CLASSES=9
    DASH=10
    DOT=11
    ISA=12
    NUMBER=13
    OBJECT_VERSION=14
    OBJECTS=15
    ROOT_OBJECT=16
    SLASH=17
    UNDERSCORE=18
    PBX_AGGREGATE_TARGET=19
    PBX_BUILD_FILE=20
    PBX_BUILD_STYLE=21
    PBX_CONTAINER_ITEM_PROXY=22
    PBX_COPY_FILES_BUILD_PHASE=23
    PBX_FILE_REFERENCE=24
    PBX_FRAMEWORKS_BUILD_PHASE=25
    PBX_GROUP=26
    PBX_HEADERS_BUILD_PHASE=27
    PBX_NATIVE_TARGET=28
    PBX_LEGACY_TARGET=29
    PBX_PROJECT=30
    PBX_REFERENCE_PROXY=31
    PBX_RESOURCES_BUILD_PHASE=32
    PBX_SHELL_SCRIPT_BUILD_PHASE=33
    PBX_SOURCES_BUILD_PHASE=34
    PBX_TARGET_DEPENDENCY=35
    PBX_VARIANT_GROUP=36
    XC_BUILD_CONFIGURATION=37
    XC_CONFIGURATION_LIST=38
    XC_REMOTE_SWIFT_PACKAGE_REFERENCE=39
    XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY=40
    XC_VERSION_GROUP=41
    ALWAYS_OUT_OF_DATE=42
    FILE_REF=43
    PRODUCT_REF=44
    CONTAINER_PORTAL=45
    PROXY_TYPE=46
    REMOTE_GLOBAL_ID_STRING=47
    REMOTE_INFO=48
    FILE_ENCODING=49
    COMMENTS=50
    EXPLICIT_FILE_TYPE=51
    LAST_KNOWN_FILE_TYPE=52
    INCLUDE_IN_INDEX=53
    INDENT_WIDTH=54
    TAB_WIDTH=55
    USES_TABS=56
    WRAPS_LINES=57
    PLATFORM_FILTER=58
    PLATFORM_FILTERS=59
    CHILDREN=60
    PRODUCT_INSTALL_PATH=61
    REPOSITORY_URL=62
    REQUIREMENT=63
    PACKAGE=64
    PACKAGE_PRODUCT_DEPENDENCIES=65
    NAME=66
    PATH=67
    SOURCE_TREE=68
    BUILD_ACTION_MASK=69
    FILES=70
    RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING=71
    BUILD_CONFIGURATION_LIST=72
    BUILD_PHASES=73
    BUILD_RULES=74
    BUILD_ARGUMENTS_STRING=75
    BUILD_TOOL_PATH=76
    BUILD_WORKING_DIRECTORY=77
    PASS_BUILD_SETTINGS_IN_ENVIRONMENT=78
    DEPENDENCIES=79
    PRODUCT_NAME=80
    PRODUCT_REFERENCE=81
    PRODUCT_TYPE=82
    LINE_ENDING=83
    XC_LANGUAGE_SPECIFICATION_IDENTIFIER=84
    PLIST_STRUCTURE_DEFINITION_IDENTIFIER=85
    ATTRIBUTES=86
    LAST_SWIFT_MIGRATION=87
    DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE=88
    LAST_SWIFT_UPDATE_CHECK=89
    BUILD_INDEPENDENT_TARGETS_IN_PARALLEL=90
    LAST_TESTING_UPGRADE_CHECK=91
    LAST_UPGRADE_CHECK=92
    ORGANIZATION_NAME=93
    TARGET_ATTRIBUTES=94
    CREATED_ON_TOOLS_VERSION=95
    TEST_TARGET_ID=96
    DEVELOPMENT_TEAM=97
    DEVELOPMENT_TEAM_NAME=98
    PROVISIONING_STYLE=99
    COMPATIBILITY_VERSION=100
    DEVELOPMENT_REGION=101
    HAS_SCANNED_FOR_ENCODINGS=102
    KNOWN_REGIONS=103
    MAIN_GROUP=104
    PRODUCT_REF_GROUP=105
    PACKAGE_REFERENCES=106
    PRODUCT_DIR_PATH=107
    PROJECT_REFERENCES=108
    PROJECT_ROOT=109
    TARGETS=110
    INPUT_FILE_LIST_PATHS=111
    INPUT_PATHS=112
    OUTPUT_FILE_LIST_PATHS=113
    OUTPUT_PATHS=114
    SHELL_PATH=115
    SHELL_SCRIPT=116
    SHOW_ENV_VARS_IN_LOG=117
    TARGET=118
    TARGET_PROXY=119
    FILE_TYPE=120
    REMOTE_REF=121
    BASE_CONFIGURATION_REFERENCE=122
    BUILD_SETTINGS=123
    BUILD_STYLES=124
    DST_PATH=125
    DST_SUBFOLDER_SPEC=126
    PRODUCT_GROUP=127
    PROJECT_REF=128
    BUILD_CONFIGURATIONS=129
    DEFAULT_CONFIGURATION_IS_VISIBLE=130
    DEFAULT_CONFIGURATION_NAME=131
    SETTINGS=132
    SYSTEM_CAPABILITIES=133
    CURRENT_VERSION=134
    VERSION_GROUP_TYPE=135
    CLASSPREFIX=136
    REFERENCE=137
    QUOTED_STRING=138
    NON_QUOTED_STRING=139
    VARIABLE=140
    ALPHA_NUMERIC=141
    ALPHA_NUMERIC_CAP=142
    WS=143
    COMMENT=144
    LINE_COMMENT=145

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def root_element(self):
            return self.getTypedRuleContext(PBXProjParser.Root_elementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = PBXProjParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.root_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def archive_version(self):
            return self.getTypedRuleContext(PBXProjParser.Archive_versionContext,0)


        def classes(self):
            return self.getTypedRuleContext(PBXProjParser.ClassesContext,0)


        def object_version(self):
            return self.getTypedRuleContext(PBXProjParser.Object_versionContext,0)


        def objects(self):
            return self.getTypedRuleContext(PBXProjParser.ObjectsContext,0)


        def root_object(self):
            return self.getTypedRuleContext(PBXProjParser.Root_objectContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_root_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_element" ):
                listener.enterRoot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_element" ):
                listener.exitRoot_element(self)




    def root_element(self):

        localctx = PBXProjParser.Root_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_root_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(PBXProjParser.T__0)
            self.state = 361
            self.archive_version()
            self.state = 362
            self.classes()
            self.state = 363
            self.object_version()
            self.state = 364
            self.objects()
            self.state = 365
            self.root_object()
            self.state = 366
            self.match(PBXProjParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Archive_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE_VERSION(self):
            return self.getToken(PBXProjParser.ARCHIVE_VERSION, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_archive_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchive_version" ):
                listener.enterArchive_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchive_version" ):
                listener.exitArchive_version(self)




    def archive_version(self):

        localctx = PBXProjParser.Archive_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_archive_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(PBXProjParser.ARCHIVE_VERSION)
            self.state = 369
            self.match(PBXProjParser.T__2)
            self.state = 370
            self.match(PBXProjParser.NUMBER)
            self.state = 371
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSES(self):
            return self.getToken(PBXProjParser.CLASSES, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasses" ):
                listener.enterClasses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasses" ):
                listener.exitClasses(self)




    def classes(self):

        localctx = PBXProjParser.ClassesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(PBXProjParser.CLASSES)
            self.state = 374
            self.match(PBXProjParser.T__2)
            self.state = 375
            self.match(PBXProjParser.T__0)
            self.state = 376
            self.match(PBXProjParser.T__1)
            self.state = 377
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_VERSION(self):
            return self.getToken(PBXProjParser.OBJECT_VERSION, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_object_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_version" ):
                listener.enterObject_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_version" ):
                listener.exitObject_version(self)




    def object_version(self):

        localctx = PBXProjParser.Object_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_object_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(PBXProjParser.OBJECT_VERSION)
            self.state = 380
            self.match(PBXProjParser.T__2)
            self.state = 381
            self.match(PBXProjParser.NUMBER)
            self.state = 382
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECTS(self):
            return self.getToken(PBXProjParser.OBJECTS, 0)

        def pbx_file_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_file_reference_sectionContext,0)


        def pbx_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_group_sectionContext,0)


        def pbx_project_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_project_sectionContext,0)


        def xc_build_configuration_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_build_configuration_sectionContext,0)


        def xc_configuration_list_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_configuration_list_sectionContext,0)


        def pbx_aggregate_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_target_sectionContext,0)


        def pbx_build_file_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_file_sectionContext,0)


        def pbx_build_style_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_style_sectionContext,0)


        def pbx_container_item_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxy_sectionContext,0)


        def pbx_copy_files_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phase_sectionContext,0)


        def pbx_frameworks_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phase_sectionContext,0)


        def pbx_headers_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phase_sectionContext,0)


        def pbx_legacy_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_legacy_target_sectionContext,0)


        def pbx_native_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_native_target_sectionContext,0)


        def pbx_reference_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxy_sectionContext,0)


        def pbx_resources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phase_sectionContext,0)


        def pbx_shell_script_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phase_sectionContext,0)


        def pbx_sources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phase_sectionContext,0)


        def pbx_target_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependency_sectionContext,0)


        def pbx_variant_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_variant_group_sectionContext,0)


        def xc_remote_swift_package_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_reference_sectionContext,0)


        def xc_swift_package_product_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependency_sectionContext,0)


        def xc_version_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_version_group_sectionContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_objects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjects" ):
                listener.enterObjects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjects" ):
                listener.exitObjects(self)




    def objects(self):

        localctx = PBXProjParser.ObjectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_objects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(PBXProjParser.OBJECTS)
            self.state = 385
            self.match(PBXProjParser.T__2)
            self.state = 386
            self.match(PBXProjParser.T__0)
            self.state = 388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 387
                self.pbx_aggregate_target_section()


            self.state = 391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 390
                self.pbx_build_file_section()


            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 393
                self.pbx_build_style_section()


            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 396
                self.pbx_container_item_proxy_section()


            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 399
                self.pbx_copy_files_build_phase_section()


            self.state = 402
            self.pbx_file_reference_section()
            self.state = 404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 403
                self.pbx_frameworks_build_phase_section()


            self.state = 406
            self.pbx_group_section()
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 407
                self.pbx_headers_build_phase_section()


            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 410
                self.pbx_legacy_target_section()


            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 413
                self.pbx_native_target_section()


            self.state = 416
            self.pbx_project_section()
            self.state = 418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 417
                self.pbx_reference_proxy_section()


            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 420
                self.pbx_resources_build_phase_section()


            self.state = 424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 423
                self.pbx_shell_script_build_phase_section()


            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 426
                self.pbx_sources_build_phase_section()


            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 429
                self.pbx_target_dependency_section()


            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 432
                self.pbx_variant_group_section()


            self.state = 435
            self.xc_build_configuration_section()
            self.state = 436
            self.xc_configuration_list_section()
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 437
                self.xc_remote_swift_package_reference_section()


            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 440
                self.xc_swift_package_product_dependency_section()


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 443
                self.xc_version_group_section()


            self.state = 446
            self.match(PBXProjParser.T__1)
            self.state = 447
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROOT_OBJECT(self):
            return self.getToken(PBXProjParser.ROOT_OBJECT, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_root_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_object" ):
                listener.enterRoot_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_object" ):
                listener.exitRoot_object(self)




    def root_object(self):

        localctx = PBXProjParser.Root_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_root_object)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(PBXProjParser.ROOT_OBJECT)
            self.state = 450
            self.match(PBXProjParser.T__2)
            self.state = 451
            self.match(PBXProjParser.REFERENCE)
            self.state = 452
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_aggregate_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_aggregate_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target_section" ):
                listener.enterPbx_aggregate_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target_section" ):
                listener.exitPbx_aggregate_target_section(self)




    def pbx_aggregate_target_section(self):

        localctx = PBXProjParser.Pbx_aggregate_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_pbx_aggregate_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 454
                    self.pbx_aggregate_target()

                else:
                    raise NoViableAltException(self)
                self.state = 457 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_file_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_file(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_fileContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_fileContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file_section" ):
                listener.enterPbx_build_file_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file_section" ):
                listener.exitPbx_build_file_section(self)




    def pbx_build_file_section(self):

        localctx = PBXProjParser.Pbx_build_file_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pbx_build_file_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 459
                    self.pbx_build_file()

                else:
                    raise NoViableAltException(self)
                self.state = 462 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_style_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_style(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_styleContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_styleContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_style_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_style_section" ):
                listener.enterPbx_build_style_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_style_section" ):
                listener.exitPbx_build_style_section(self)




    def pbx_build_style_section(self):

        localctx = PBXProjParser.Pbx_build_style_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pbx_build_style_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 464
                    self.pbx_build_style()

                else:
                    raise NoViableAltException(self)
                self.state = 467 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_container_item_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_container_item_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy_section" ):
                listener.enterPbx_container_item_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy_section" ):
                listener.exitPbx_container_item_proxy_section(self)




    def pbx_container_item_proxy_section(self):

        localctx = PBXProjParser.Pbx_container_item_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_pbx_container_item_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 469
                    self.pbx_container_item_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 472 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_copy_files_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_copy_files_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase_section" ):
                listener.enterPbx_copy_files_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase_section" ):
                listener.exitPbx_copy_files_build_phase_section(self)




    def pbx_copy_files_build_phase_section(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_pbx_copy_files_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 474
                    self.pbx_copy_files_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 477 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_file_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_file_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_file_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference_section" ):
                listener.enterPbx_file_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference_section" ):
                listener.exitPbx_file_reference_section(self)




    def pbx_file_reference_section(self):

        localctx = PBXProjParser.Pbx_file_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pbx_file_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 479
                    self.pbx_file_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 482 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_frameworks_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_frameworks_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase_section" ):
                listener.enterPbx_frameworks_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase_section" ):
                listener.exitPbx_frameworks_build_phase_section(self)




    def pbx_frameworks_build_phase_section(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pbx_frameworks_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 484
                    self.pbx_frameworks_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 487 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group_section" ):
                listener.enterPbx_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group_section" ):
                listener.exitPbx_group_section(self)




    def pbx_group_section(self):

        localctx = PBXProjParser.Pbx_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pbx_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 489
                    self.pbx_group()

                else:
                    raise NoViableAltException(self)
                self.state = 492 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_headers_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_headers_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase_section" ):
                listener.enterPbx_headers_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase_section" ):
                listener.exitPbx_headers_build_phase_section(self)




    def pbx_headers_build_phase_section(self):

        localctx = PBXProjParser.Pbx_headers_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pbx_headers_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 494
                    self.pbx_headers_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 497 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_native_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_native_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_native_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target_section" ):
                listener.enterPbx_native_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target_section" ):
                listener.exitPbx_native_target_section(self)




    def pbx_native_target_section(self):

        localctx = PBXProjParser.Pbx_native_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pbx_native_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 499
                    self.pbx_native_target()

                else:
                    raise NoViableAltException(self)
                self.state = 502 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_legacy_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_legacy_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_legacy_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_legacy_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_legacy_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_legacy_target_section" ):
                listener.enterPbx_legacy_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_legacy_target_section" ):
                listener.exitPbx_legacy_target_section(self)




    def pbx_legacy_target_section(self):

        localctx = PBXProjParser.Pbx_legacy_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pbx_legacy_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 504
                    self.pbx_legacy_target()

                else:
                    raise NoViableAltException(self)
                self.state = 507 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_project_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_project(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_projectContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_projectContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project_section" ):
                listener.enterPbx_project_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project_section" ):
                listener.exitPbx_project_section(self)




    def pbx_project_section(self):

        localctx = PBXProjParser.Pbx_project_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pbx_project_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 509
                    self.pbx_project()

                else:
                    raise NoViableAltException(self)
                self.state = 512 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_reference_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_reference_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy_section" ):
                listener.enterPbx_reference_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy_section" ):
                listener.exitPbx_reference_proxy_section(self)




    def pbx_reference_proxy_section(self):

        localctx = PBXProjParser.Pbx_reference_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pbx_reference_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 514
                    self.pbx_reference_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 517 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_resources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_resources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase_section" ):
                listener.enterPbx_resources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase_section" ):
                listener.exitPbx_resources_build_phase_section(self)




    def pbx_resources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_resources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pbx_resources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 519
                    self.pbx_resources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 522 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_shell_script_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_shell_script_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase_section" ):
                listener.enterPbx_shell_script_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase_section" ):
                listener.exitPbx_shell_script_build_phase_section(self)




    def pbx_shell_script_build_phase_section(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pbx_shell_script_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 524
                    self.pbx_shell_script_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 527 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_sources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_sources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase_section" ):
                listener.enterPbx_sources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase_section" ):
                listener.exitPbx_sources_build_phase_section(self)




    def pbx_sources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_sources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pbx_sources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 529
                    self.pbx_sources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 532 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_target_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_target_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency_section" ):
                listener.enterPbx_target_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency_section" ):
                listener.exitPbx_target_dependency_section(self)




    def pbx_target_dependency_section(self):

        localctx = PBXProjParser.Pbx_target_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pbx_target_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 534
                    self.pbx_target_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 537 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_variant_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_variant_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_variant_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group_section" ):
                listener.enterPbx_variant_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group_section" ):
                listener.exitPbx_variant_group_section(self)




    def pbx_variant_group_section(self):

        localctx = PBXProjParser.Pbx_variant_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pbx_variant_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 539
                    self.pbx_variant_group()

                else:
                    raise NoViableAltException(self)
                self.state = 542 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configuration_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_build_configuration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_build_configurationContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_build_configurationContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration_section" ):
                listener.enterXc_build_configuration_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration_section" ):
                listener.exitXc_build_configuration_section(self)




    def xc_build_configuration_section(self):

        localctx = PBXProjParser.Xc_build_configuration_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_xc_build_configuration_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 544
                    self.xc_build_configuration()

                else:
                    raise NoViableAltException(self)
                self.state = 547 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_list_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_configuration_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_configuration_listContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_configuration_listContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list_section" ):
                listener.enterXc_configuration_list_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list_section" ):
                listener.exitXc_configuration_list_section(self)




    def xc_configuration_list_section(self):

        localctx = PBXProjParser.Xc_configuration_list_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_xc_configuration_list_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 549
                    self.xc_configuration_list()

                else:
                    raise NoViableAltException(self)
                self.state = 552 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_remote_swift_package_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_remote_swift_package_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference_section" ):
                listener.enterXc_remote_swift_package_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference_section" ):
                listener.exitXc_remote_swift_package_reference_section(self)




    def xc_remote_swift_package_reference_section(self):

        localctx = PBXProjParser.Xc_remote_swift_package_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_xc_remote_swift_package_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 554
                    self.xc_remote_swift_package_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 557 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_swift_package_product_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_swift_package_product_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency_section" ):
                listener.enterXc_swift_package_product_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency_section" ):
                listener.exitXc_swift_package_product_dependency_section(self)




    def xc_swift_package_product_dependency_section(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_xc_swift_package_product_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 559
                    self.xc_swift_package_product_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 562 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_version_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_version_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_version_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group_section" ):
                listener.enterXc_version_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group_section" ):
                listener.exitXc_version_group_section(self)




    def xc_version_group_section(self):

        localctx = PBXProjParser.Xc_version_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_xc_version_group_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 564
                self.xc_version_group()
                self.state = 567 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==137):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_aggregate_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_aggregate_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target" ):
                listener.enterPbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target" ):
                listener.exitPbx_aggregate_target(self)




    def pbx_aggregate_target(self):

        localctx = PBXProjParser.Pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pbx_aggregate_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(PBXProjParser.REFERENCE)
            self.state = 570
            self.match(PBXProjParser.T__2)
            self.state = 571
            self.match(PBXProjParser.T__0)
            self.state = 572
            self.isa_pbx_aggregate_target()
            self.state = 573
            self.build_configuration_list()
            self.state = 574
            self.build_phases()
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 575
                self.build_settings()


            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 578
                self.comments()


            self.state = 581
            self.dependencies()
            self.state = 582
            self.name()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 583
                self.product_name()


            self.state = 586
            self.match(PBXProjParser.T__1)
            self.state = 587
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_file(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_fileContext,0)


        def file_ref(self):
            return self.getTypedRuleContext(PBXProjParser.File_refContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def platform_filters(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filtersContext,0)


        def product_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Product_refContext,0)


        def settings(self):
            return self.getTypedRuleContext(PBXProjParser.SettingsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file" ):
                listener.enterPbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file" ):
                listener.exitPbx_build_file(self)




    def pbx_build_file(self):

        localctx = PBXProjParser.Pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pbx_build_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(PBXProjParser.REFERENCE)
            self.state = 590
            self.match(PBXProjParser.T__2)
            self.state = 591
            self.match(PBXProjParser.T__0)
            self.state = 592
            self.isa_pbx_build_file()
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 593
                self.file_ref()


            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 596
                self.platform_filter()


            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 599
                self.platform_filters()


            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 602
                self.product_ref()


            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 605
                self.settings()


            self.state = 608
            self.match(PBXProjParser.T__1)
            self.state = 609
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_style(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_styleContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_style" ):
                listener.enterPbx_build_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_style" ):
                listener.exitPbx_build_style(self)




    def pbx_build_style(self):

        localctx = PBXProjParser.Pbx_build_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pbx_build_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(PBXProjParser.REFERENCE)
            self.state = 612
            self.match(PBXProjParser.T__2)
            self.state = 613
            self.match(PBXProjParser.T__0)
            self.state = 614
            self.isa_pbx_build_style()
            self.state = 615
            self.build_settings()
            self.state = 616
            self.name()
            self.state = 617
            self.match(PBXProjParser.T__1)
            self.state = 618
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_container_item_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_container_item_proxyContext,0)


        def container_portal(self):
            return self.getTypedRuleContext(PBXProjParser.Container_portalContext,0)


        def proxy_type(self):
            return self.getTypedRuleContext(PBXProjParser.Proxy_typeContext,0)


        def remote_global_id_string(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_global_id_stringContext,0)


        def remote_info(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_infoContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy" ):
                listener.enterPbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy" ):
                listener.exitPbx_container_item_proxy(self)




    def pbx_container_item_proxy(self):

        localctx = PBXProjParser.Pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(PBXProjParser.REFERENCE)
            self.state = 621
            self.match(PBXProjParser.T__2)
            self.state = 622
            self.match(PBXProjParser.T__0)
            self.state = 623
            self.isa_pbx_container_item_proxy()
            self.state = 624
            self.container_portal()
            self.state = 625
            self.proxy_type()
            self.state = 626
            self.remote_global_id_string()
            self.state = 627
            self.remote_info()
            self.state = 628
            self.match(PBXProjParser.T__1)
            self.state = 629
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_copy_files_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_copy_files_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def dst_path(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_pathContext,0)


        def dst_subfolder_spec(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_subfolder_specContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase" ):
                listener.enterPbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase" ):
                listener.exitPbx_copy_files_build_phase(self)




    def pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_pbx_copy_files_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(PBXProjParser.REFERENCE)
            self.state = 632
            self.match(PBXProjParser.T__2)
            self.state = 633
            self.match(PBXProjParser.T__0)
            self.state = 634
            self.isa_pbx_copy_files_build_phase()
            self.state = 635
            self.build_action_mask()
            self.state = 636
            self.dst_path()
            self.state = 637
            self.dst_subfolder_spec()
            self.state = 638
            self.files()
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 639
                self.name()


            self.state = 642
            self.run_only_for_deployment_postprocessing()
            self.state = 643
            self.match(PBXProjParser.T__1)
            self.state = 644
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_file_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_file_referenceContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def file_encoding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.File_encodingContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.File_encodingContext,i)


        def explicit_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Explicit_file_typeContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def last_known_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Last_known_file_typeContext,0)


        def line_ending(self):
            return self.getTypedRuleContext(PBXProjParser.Line_endingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def plist_structure_definition_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Plist_structure_definition_identifierContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def xc_language_specification_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_language_specification_identifierContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference" ):
                listener.enterPbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference" ):
                listener.exitPbx_file_reference(self)




    def pbx_file_reference(self):

        localctx = PBXProjParser.Pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_pbx_file_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(PBXProjParser.REFERENCE)
            self.state = 647
            self.match(PBXProjParser.T__2)
            self.state = 648
            self.match(PBXProjParser.T__0)
            self.state = 649
            self.isa_pbx_file_reference()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 650
                self.comments()


            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 653
                self.file_encoding()


            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 656
                self.explicit_file_type()


            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 659
                self.file_encoding()


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 662
                self.include_in_index()


            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 665
                self.indent_width()


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 668
                self.last_known_file_type()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 671
                self.line_ending()


            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 674
                self.name()


            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 677
                self.path()


            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 680
                self.plist_structure_definition_identifier()


            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 683
                self.source_tree()


            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 686
                self.tab_width()


            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 689
                self.xc_language_specification_identifier()


            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 692
                self.uses_tabs()


            self.state = 695
            self.match(PBXProjParser.T__1)
            self.state = 696
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_frameworks_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_frameworks_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase" ):
                listener.enterPbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase" ):
                listener.exitPbx_frameworks_build_phase(self)




    def pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(PBXProjParser.REFERENCE)
            self.state = 699
            self.match(PBXProjParser.T__2)
            self.state = 700
            self.match(PBXProjParser.T__0)
            self.state = 701
            self.isa_pbx_frameworks_build_phase()
            self.state = 702
            self.build_action_mask()
            self.state = 703
            self.files()
            self.state = 704
            self.run_only_for_deployment_postprocessing()
            self.state = 705
            self.match(PBXProjParser.T__1)
            self.state = 706
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def wraps_lines(self):
            return self.getTypedRuleContext(PBXProjParser.Wraps_linesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group" ):
                listener.enterPbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group" ):
                listener.exitPbx_group(self)




    def pbx_group(self):

        localctx = PBXProjParser.Pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_pbx_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(PBXProjParser.REFERENCE)
            self.state = 709
            self.match(PBXProjParser.T__2)
            self.state = 710
            self.match(PBXProjParser.T__0)
            self.state = 711
            self.isa_pbx_group()
            self.state = 712
            self.children()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 713
                self.comments()


            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 716
                self.indent_width()


            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 719
                self.include_in_index()


            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 722
                self.name()


            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 725
                self.path()


            self.state = 728
            self.source_tree()
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 729
                self.tab_width()


            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 732
                self.uses_tabs()


            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 735
                self.wraps_lines()


            self.state = 738
            self.match(PBXProjParser.T__1)
            self.state = 739
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_header_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_header_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase" ):
                listener.enterPbx_headers_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase" ):
                listener.exitPbx_headers_build_phase(self)




    def pbx_headers_build_phase(self):

        localctx = PBXProjParser.Pbx_headers_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pbx_headers_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(PBXProjParser.REFERENCE)
            self.state = 742
            self.match(PBXProjParser.T__2)
            self.state = 743
            self.match(PBXProjParser.T__0)
            self.state = 744
            self.isa_pbx_header_build_phase()
            self.state = 745
            self.build_action_mask()
            self.state = 746
            self.files()
            self.state = 747
            self.run_only_for_deployment_postprocessing()
            self.state = 748
            self.match(PBXProjParser.T__1)
            self.state = 749
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_native_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_native_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_rules(self):
            return self.getTypedRuleContext(PBXProjParser.Build_rulesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def product_type(self):
            return self.getTypedRuleContext(PBXProjParser.Product_typeContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def product_install_path(self):
            return self.getTypedRuleContext(PBXProjParser.Product_install_pathContext,0)


        def package_product_dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.Package_product_dependenciesContext,0)


        def product_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Product_referenceContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target" ):
                listener.enterPbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target" ):
                listener.exitPbx_native_target(self)




    def pbx_native_target(self):

        localctx = PBXProjParser.Pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pbx_native_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(PBXProjParser.REFERENCE)
            self.state = 752
            self.match(PBXProjParser.T__2)
            self.state = 753
            self.match(PBXProjParser.T__0)
            self.state = 754
            self.isa_pbx_native_target()
            self.state = 755
            self.build_configuration_list()
            self.state = 756
            self.build_phases()
            self.state = 757
            self.build_rules()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 758
                self.comments()


            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 761
                self.build_settings()


            self.state = 764
            self.dependencies()
            self.state = 765
            self.name()
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 766
                self.product_install_path()


            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 769
                self.package_product_dependencies()


            self.state = 772
            self.product_name()
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 773
                self.product_reference()


            self.state = 776
            self.product_type()
            self.state = 777
            self.match(PBXProjParser.T__1)
            self.state = 778
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_legacy_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_legacy_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_legacy_targetContext,0)


        def build_arguments_string(self):
            return self.getTypedRuleContext(PBXProjParser.Build_arguments_stringContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_tool_path(self):
            return self.getTypedRuleContext(PBXProjParser.Build_tool_pathContext,0)


        def build_working_directory(self):
            return self.getTypedRuleContext(PBXProjParser.Build_working_directoryContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def pass_build_settings_in_environment(self):
            return self.getTypedRuleContext(PBXProjParser.Pass_build_settings_in_environmentContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_legacy_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_legacy_target" ):
                listener.enterPbx_legacy_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_legacy_target" ):
                listener.exitPbx_legacy_target(self)




    def pbx_legacy_target(self):

        localctx = PBXProjParser.Pbx_legacy_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pbx_legacy_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(PBXProjParser.REFERENCE)
            self.state = 781
            self.match(PBXProjParser.T__2)
            self.state = 782
            self.match(PBXProjParser.T__0)
            self.state = 783
            self.isa_pbx_legacy_target()
            self.state = 784
            self.build_arguments_string()
            self.state = 785
            self.build_configuration_list()
            self.state = 786
            self.build_phases()
            self.state = 787
            self.build_tool_path()
            self.state = 788
            self.build_working_directory()
            self.state = 789
            self.dependencies()
            self.state = 790
            self.name()
            self.state = 791
            self.pass_build_settings_in_environment()
            self.state = 792
            self.product_name()
            self.state = 793
            self.match(PBXProjParser.T__1)
            self.state = 794
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_project(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_projectContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def has_scanned_for_encodings(self):
            return self.getTypedRuleContext(PBXProjParser.Has_scanned_for_encodingsContext,0)


        def main_group(self):
            return self.getTypedRuleContext(PBXProjParser.Main_groupContext,0)


        def project_dir_path(self):
            return self.getTypedRuleContext(PBXProjParser.Project_dir_pathContext,0)


        def targets(self):
            return self.getTypedRuleContext(PBXProjParser.TargetsContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PBXProjParser.AttributesContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def compatibility_version(self):
            return self.getTypedRuleContext(PBXProjParser.Compatibility_versionContext,0)


        def build_styles(self):
            return self.getTypedRuleContext(PBXProjParser.Build_stylesContext,0)


        def development_region(self):
            return self.getTypedRuleContext(PBXProjParser.Development_regionContext,0)


        def known_regions(self):
            return self.getTypedRuleContext(PBXProjParser.Known_regionsContext,0)


        def package_references(self):
            return self.getTypedRuleContext(PBXProjParser.Package_referencesContext,0)


        def product_ref_group(self):
            return self.getTypedRuleContext(PBXProjParser.Product_ref_groupContext,0)


        def project_references(self):
            return self.getTypedRuleContext(PBXProjParser.Project_referencesContext,0)


        def project_root(self):
            return self.getTypedRuleContext(PBXProjParser.Project_rootContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project" ):
                listener.enterPbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project" ):
                listener.exitPbx_project(self)




    def pbx_project(self):

        localctx = PBXProjParser.Pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pbx_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(PBXProjParser.REFERENCE)
            self.state = 797
            self.match(PBXProjParser.T__2)
            self.state = 798
            self.match(PBXProjParser.T__0)
            self.state = 799
            self.isa_pbx_project()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 800
                self.attributes()


            self.state = 803
            self.build_configuration_list()
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 804
                self.build_settings()


            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 807
                self.compatibility_version()


            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 810
                self.build_styles()


            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 813
                self.development_region()


            self.state = 816
            self.has_scanned_for_encodings()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 817
                self.known_regions()


            self.state = 820
            self.main_group()
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 821
                self.package_references()


            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 824
                self.product_ref_group()


            self.state = 827
            self.project_dir_path()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 828
                self.project_references()


            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 831
                self.project_root()


            self.state = 834
            self.targets()
            self.state = 835
            self.match(PBXProjParser.T__1)
            self.state = 836
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_reference_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_reference_proxyContext,0)


        def file_type(self):
            return self.getTypedRuleContext(PBXProjParser.File_typeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def remote_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_refContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy" ):
                listener.enterPbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy" ):
                listener.exitPbx_reference_proxy(self)




    def pbx_reference_proxy(self):

        localctx = PBXProjParser.Pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_pbx_reference_proxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(PBXProjParser.REFERENCE)
            self.state = 839
            self.match(PBXProjParser.T__2)
            self.state = 840
            self.match(PBXProjParser.T__0)
            self.state = 841
            self.isa_pbx_reference_proxy()
            self.state = 842
            self.file_type()
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 843
                self.name()


            self.state = 846
            self.path()
            self.state = 847
            self.remote_ref()
            self.state = 848
            self.source_tree()
            self.state = 849
            self.match(PBXProjParser.T__1)
            self.state = 850
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_resources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_resources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase" ):
                listener.enterPbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase" ):
                listener.exitPbx_resources_build_phase(self)




    def pbx_resources_build_phase(self):

        localctx = PBXProjParser.Pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(PBXProjParser.REFERENCE)
            self.state = 853
            self.match(PBXProjParser.T__2)
            self.state = 854
            self.match(PBXProjParser.T__0)
            self.state = 855
            self.isa_pbx_resources_build_phase()
            self.state = 856
            self.build_action_mask()
            self.state = 857
            self.files()
            self.state = 858
            self.run_only_for_deployment_postprocessing()
            self.state = 859
            self.match(PBXProjParser.T__1)
            self.state = 860
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_shell_script_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_shell_script_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def shell_path(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_pathContext,0)


        def shell_script(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_scriptContext,0)


        def always_out_of_date(self):
            return self.getTypedRuleContext(PBXProjParser.Always_out_of_dateContext,0)


        def input_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_file_list_pathsContext,0)


        def input_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_pathsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def output_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_file_list_pathsContext,0)


        def output_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_pathsContext,0)


        def show_env_vars_in_log(self):
            return self.getTypedRuleContext(PBXProjParser.Show_env_vars_in_logContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase" ):
                listener.enterPbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase" ):
                listener.exitPbx_shell_script_build_phase(self)




    def pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_pbx_shell_script_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(PBXProjParser.REFERENCE)
            self.state = 863
            self.match(PBXProjParser.T__2)
            self.state = 864
            self.match(PBXProjParser.T__0)
            self.state = 865
            self.isa_pbx_shell_script_build_phase()
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 866
                self.always_out_of_date()


            self.state = 869
            self.build_action_mask()
            self.state = 870
            self.files()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 871
                self.input_file_list_paths()


            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 874
                self.input_paths()


            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 877
                self.name()


            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 880
                self.output_file_list_paths()


            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 883
                self.output_paths()


            self.state = 886
            self.run_only_for_deployment_postprocessing()
            self.state = 887
            self.shell_path()
            self.state = 888
            self.shell_script()
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 889
                self.show_env_vars_in_log()


            self.state = 892
            self.match(PBXProjParser.T__1)
            self.state = 893
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_sources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_sources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase" ):
                listener.enterPbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase" ):
                listener.exitPbx_sources_build_phase(self)




    def pbx_sources_build_phase(self):

        localctx = PBXProjParser.Pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(PBXProjParser.REFERENCE)
            self.state = 896
            self.match(PBXProjParser.T__2)
            self.state = 897
            self.match(PBXProjParser.T__0)
            self.state = 898
            self.isa_pbx_sources_build_phase()
            self.state = 899
            self.build_action_mask()
            self.state = 900
            self.files()
            self.state = 901
            self.run_only_for_deployment_postprocessing()
            self.state = 902
            self.match(PBXProjParser.T__1)
            self.state = 903
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_target_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_target_dependencyContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def platform_filters(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filtersContext,0)


        def product_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Product_refContext,0)


        def target(self):
            return self.getTypedRuleContext(PBXProjParser.TargetContext,0)


        def target_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Target_proxyContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency" ):
                listener.enterPbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency" ):
                listener.exitPbx_target_dependency(self)




    def pbx_target_dependency(self):

        localctx = PBXProjParser.Pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_pbx_target_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(PBXProjParser.REFERENCE)
            self.state = 906
            self.match(PBXProjParser.T__2)
            self.state = 907
            self.match(PBXProjParser.T__0)
            self.state = 908
            self.isa_pbx_target_dependency()
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 909
                self.name()


            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 912
                self.platform_filter()


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 915
                self.platform_filters()


            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 918
                self.product_ref()


            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 921
                self.target()


            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 924
                self.target_proxy()


            self.state = 927
            self.match(PBXProjParser.T__1)
            self.state = 928
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_variant_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_variant_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group" ):
                listener.enterPbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group" ):
                listener.exitPbx_variant_group(self)




    def pbx_variant_group(self):

        localctx = PBXProjParser.Pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_pbx_variant_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(PBXProjParser.REFERENCE)
            self.state = 931
            self.match(PBXProjParser.T__2)
            self.state = 932
            self.match(PBXProjParser.T__0)
            self.state = 933
            self.isa_pbx_variant_group()
            self.state = 934
            self.children()
            self.state = 935
            self.name()
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 936
                self.path()


            self.state = 939
            self.source_tree()
            self.state = 940
            self.match(PBXProjParser.T__1)
            self.state = 941
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_build_configuration(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_build_configurationContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def base_configuration_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Base_configuration_referenceContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration" ):
                listener.enterXc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration" ):
                listener.exitXc_build_configuration(self)




    def xc_build_configuration(self):

        localctx = PBXProjParser.Xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_xc_build_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(PBXProjParser.REFERENCE)
            self.state = 944
            self.match(PBXProjParser.T__2)
            self.state = 945
            self.match(PBXProjParser.T__0)
            self.state = 946
            self.isa_xc_build_configuration()
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 947
                self.base_configuration_reference()


            self.state = 950
            self.build_settings()
            self.state = 951
            self.name()
            self.state = 952
            self.match(PBXProjParser.T__1)
            self.state = 953
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_configuration_listContext,0)


        def build_configurations(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configurationsContext,0)


        def default_configuration_is_visible(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_is_visibleContext,0)


        def default_configuration_name(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list" ):
                listener.enterXc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list" ):
                listener.exitXc_configuration_list(self)




    def xc_configuration_list(self):

        localctx = PBXProjParser.Xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_xc_configuration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(PBXProjParser.REFERENCE)
            self.state = 956
            self.match(PBXProjParser.T__2)
            self.state = 957
            self.match(PBXProjParser.T__0)
            self.state = 958
            self.isa_xc_configuration_list()
            self.state = 959
            self.build_configurations()
            self.state = 960
            self.default_configuration_is_visible()
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 961
                self.default_configuration_name()


            self.state = 964
            self.match(PBXProjParser.T__1)
            self.state = 965
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_remote_swift_package_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_remote_swift_package_referenceContext,0)


        def repository_url(self):
            return self.getTypedRuleContext(PBXProjParser.Repository_urlContext,0)


        def requirement(self):
            return self.getTypedRuleContext(PBXProjParser.RequirementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference" ):
                listener.enterXc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference" ):
                listener.exitXc_remote_swift_package_reference(self)




    def xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(PBXProjParser.REFERENCE)
            self.state = 968
            self.match(PBXProjParser.T__2)
            self.state = 969
            self.match(PBXProjParser.T__0)
            self.state = 970
            self.isa_xc_remote_swift_package_reference()
            self.state = 971
            self.repository_url()
            self.state = 972
            self.requirement()
            self.state = 973
            self.match(PBXProjParser.T__1)
            self.state = 974
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_swift_package_product_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_swift_package_product_dependencyContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def xc_package(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_packageContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency" ):
                listener.enterXc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency" ):
                listener.exitXc_swift_package_product_dependency(self)




    def xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_xc_swift_package_product_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(PBXProjParser.REFERENCE)
            self.state = 977
            self.match(PBXProjParser.T__2)
            self.state = 978
            self.match(PBXProjParser.T__0)
            self.state = 979
            self.isa_xc_swift_package_product_dependency()
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 980
                self.xc_package()


            self.state = 983
            self.product_name()
            self.state = 984
            self.match(PBXProjParser.T__1)
            self.state = 985
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_version_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_version_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def current_version(self):
            return self.getTypedRuleContext(PBXProjParser.Current_versionContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def version_group_type(self):
            return self.getTypedRuleContext(PBXProjParser.Version_group_typeContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group" ):
                listener.enterXc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group" ):
                listener.exitXc_version_group(self)




    def xc_version_group(self):

        localctx = PBXProjParser.Xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_xc_version_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(PBXProjParser.REFERENCE)
            self.state = 988
            self.match(PBXProjParser.T__2)
            self.state = 989
            self.match(PBXProjParser.T__0)
            self.state = 990
            self.isa_xc_version_group()
            self.state = 991
            self.children()
            self.state = 992
            self.current_version()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 993
                self.name()


            self.state = 996
            self.path()
            self.state = 997
            self.source_tree()
            self.state = 998
            self.version_group_type()
            self.state = 999
            self.match(PBXProjParser.T__1)
            self.state = 1000
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_AGGREGATE_TARGET(self):
            return self.getToken(PBXProjParser.PBX_AGGREGATE_TARGET, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_aggregate_target" ):
                listener.enterIsa_pbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_aggregate_target" ):
                listener.exitIsa_pbx_aggregate_target(self)




    def isa_pbx_aggregate_target(self):

        localctx = PBXProjParser.Isa_pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_isa_pbx_aggregate_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(PBXProjParser.ISA)
            self.state = 1003
            self.match(PBXProjParser.T__2)
            self.state = 1004
            self.match(PBXProjParser.PBX_AGGREGATE_TARGET)
            self.state = 1005
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_BUILD_FILE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_FILE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_build_file" ):
                listener.enterIsa_pbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_build_file" ):
                listener.exitIsa_pbx_build_file(self)




    def isa_pbx_build_file(self):

        localctx = PBXProjParser.Isa_pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_isa_pbx_build_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(PBXProjParser.ISA)
            self.state = 1008
            self.match(PBXProjParser.T__2)
            self.state = 1009
            self.match(PBXProjParser.PBX_BUILD_FILE)
            self.state = 1010
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_build_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_BUILD_STYLE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_STYLE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_build_style" ):
                listener.enterIsa_pbx_build_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_build_style" ):
                listener.exitIsa_pbx_build_style(self)




    def isa_pbx_build_style(self):

        localctx = PBXProjParser.Isa_pbx_build_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_isa_pbx_build_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(PBXProjParser.ISA)
            self.state = 1013
            self.match(PBXProjParser.T__2)
            self.state = 1014
            self.match(PBXProjParser.PBX_BUILD_STYLE)
            self.state = 1015
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_CONTAINER_ITEM_PROXY(self):
            return self.getToken(PBXProjParser.PBX_CONTAINER_ITEM_PROXY, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_container_item_proxy" ):
                listener.enterIsa_pbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_container_item_proxy" ):
                listener.exitIsa_pbx_container_item_proxy(self)




    def isa_pbx_container_item_proxy(self):

        localctx = PBXProjParser.Isa_pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_isa_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(PBXProjParser.ISA)
            self.state = 1018
            self.match(PBXProjParser.T__2)
            self.state = 1019
            self.match(PBXProjParser.PBX_CONTAINER_ITEM_PROXY)
            self.state = 1020
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_COPY_FILES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_COPY_FILES_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_copy_files_build_phase" ):
                listener.enterIsa_pbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_copy_files_build_phase" ):
                listener.exitIsa_pbx_copy_files_build_phase(self)




    def isa_pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_isa_pbx_copy_files_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(PBXProjParser.ISA)
            self.state = 1023
            self.match(PBXProjParser.T__2)
            self.state = 1024
            self.match(PBXProjParser.PBX_COPY_FILES_BUILD_PHASE)
            self.state = 1025
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_FILE_REFERENCE(self):
            return self.getToken(PBXProjParser.PBX_FILE_REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_file_reference" ):
                listener.enterIsa_pbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_file_reference" ):
                listener.exitIsa_pbx_file_reference(self)




    def isa_pbx_file_reference(self):

        localctx = PBXProjParser.Isa_pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_isa_pbx_file_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(PBXProjParser.ISA)
            self.state = 1028
            self.match(PBXProjParser.T__2)
            self.state = 1029
            self.match(PBXProjParser.PBX_FILE_REFERENCE)
            self.state = 1030
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_FRAMEWORKS_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_FRAMEWORKS_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_frameworks_build_phase" ):
                listener.enterIsa_pbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_frameworks_build_phase" ):
                listener.exitIsa_pbx_frameworks_build_phase(self)




    def isa_pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_isa_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(PBXProjParser.ISA)
            self.state = 1033
            self.match(PBXProjParser.T__2)
            self.state = 1034
            self.match(PBXProjParser.PBX_FRAMEWORKS_BUILD_PHASE)
            self.state = 1035
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_GROUP(self):
            return self.getToken(PBXProjParser.PBX_GROUP, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_group" ):
                listener.enterIsa_pbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_group" ):
                listener.exitIsa_pbx_group(self)




    def isa_pbx_group(self):

        localctx = PBXProjParser.Isa_pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_isa_pbx_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(PBXProjParser.ISA)
            self.state = 1038
            self.match(PBXProjParser.T__2)
            self.state = 1039
            self.match(PBXProjParser.PBX_GROUP)
            self.state = 1040
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_header_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_HEADERS_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_HEADERS_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_header_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_header_build_phase" ):
                listener.enterIsa_pbx_header_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_header_build_phase" ):
                listener.exitIsa_pbx_header_build_phase(self)




    def isa_pbx_header_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_header_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_isa_pbx_header_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(PBXProjParser.ISA)
            self.state = 1043
            self.match(PBXProjParser.T__2)
            self.state = 1044
            self.match(PBXProjParser.PBX_HEADERS_BUILD_PHASE)
            self.state = 1045
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_NATIVE_TARGET(self):
            return self.getToken(PBXProjParser.PBX_NATIVE_TARGET, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_native_target" ):
                listener.enterIsa_pbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_native_target" ):
                listener.exitIsa_pbx_native_target(self)




    def isa_pbx_native_target(self):

        localctx = PBXProjParser.Isa_pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_isa_pbx_native_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(PBXProjParser.ISA)
            self.state = 1048
            self.match(PBXProjParser.T__2)
            self.state = 1049
            self.match(PBXProjParser.PBX_NATIVE_TARGET)
            self.state = 1050
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_legacy_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_LEGACY_TARGET(self):
            return self.getToken(PBXProjParser.PBX_LEGACY_TARGET, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_legacy_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_legacy_target" ):
                listener.enterIsa_pbx_legacy_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_legacy_target" ):
                listener.exitIsa_pbx_legacy_target(self)




    def isa_pbx_legacy_target(self):

        localctx = PBXProjParser.Isa_pbx_legacy_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_isa_pbx_legacy_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(PBXProjParser.ISA)
            self.state = 1053
            self.match(PBXProjParser.T__2)
            self.state = 1054
            self.match(PBXProjParser.PBX_LEGACY_TARGET)
            self.state = 1055
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_PROJECT(self):
            return self.getToken(PBXProjParser.PBX_PROJECT, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_project" ):
                listener.enterIsa_pbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_project" ):
                listener.exitIsa_pbx_project(self)




    def isa_pbx_project(self):

        localctx = PBXProjParser.Isa_pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_isa_pbx_project)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(PBXProjParser.ISA)
            self.state = 1058
            self.match(PBXProjParser.T__2)
            self.state = 1059
            self.match(PBXProjParser.PBX_PROJECT)
            self.state = 1060
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_REFERENCE_PROXY(self):
            return self.getToken(PBXProjParser.PBX_REFERENCE_PROXY, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_reference_proxy" ):
                listener.enterIsa_pbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_reference_proxy" ):
                listener.exitIsa_pbx_reference_proxy(self)




    def isa_pbx_reference_proxy(self):

        localctx = PBXProjParser.Isa_pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_isa_pbx_reference_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(PBXProjParser.ISA)
            self.state = 1063
            self.match(PBXProjParser.T__2)
            self.state = 1064
            self.match(PBXProjParser.PBX_REFERENCE_PROXY)
            self.state = 1065
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_RESOURCES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_RESOURCES_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_resources_build_phase" ):
                listener.enterIsa_pbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_resources_build_phase" ):
                listener.exitIsa_pbx_resources_build_phase(self)




    def isa_pbx_resources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_isa_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(PBXProjParser.ISA)
            self.state = 1068
            self.match(PBXProjParser.T__2)
            self.state = 1069
            self.match(PBXProjParser.PBX_RESOURCES_BUILD_PHASE)
            self.state = 1070
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_SHELL_SCRIPT_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SHELL_SCRIPT_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_shell_script_build_phase" ):
                listener.enterIsa_pbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_shell_script_build_phase" ):
                listener.exitIsa_pbx_shell_script_build_phase(self)




    def isa_pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_isa_pbx_shell_script_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(PBXProjParser.ISA)
            self.state = 1073
            self.match(PBXProjParser.T__2)
            self.state = 1074
            self.match(PBXProjParser.PBX_SHELL_SCRIPT_BUILD_PHASE)
            self.state = 1075
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_SOURCES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SOURCES_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_sources_build_phase" ):
                listener.enterIsa_pbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_sources_build_phase" ):
                listener.exitIsa_pbx_sources_build_phase(self)




    def isa_pbx_sources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_isa_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(PBXProjParser.ISA)
            self.state = 1078
            self.match(PBXProjParser.T__2)
            self.state = 1079
            self.match(PBXProjParser.PBX_SOURCES_BUILD_PHASE)
            self.state = 1080
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_TARGET_DEPENDENCY(self):
            return self.getToken(PBXProjParser.PBX_TARGET_DEPENDENCY, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_target_dependency" ):
                listener.enterIsa_pbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_target_dependency" ):
                listener.exitIsa_pbx_target_dependency(self)




    def isa_pbx_target_dependency(self):

        localctx = PBXProjParser.Isa_pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_isa_pbx_target_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(PBXProjParser.ISA)
            self.state = 1083
            self.match(PBXProjParser.T__2)
            self.state = 1084
            self.match(PBXProjParser.PBX_TARGET_DEPENDENCY)
            self.state = 1085
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_VARIANT_GROUP(self):
            return self.getToken(PBXProjParser.PBX_VARIANT_GROUP, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_variant_group" ):
                listener.enterIsa_pbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_variant_group" ):
                listener.exitIsa_pbx_variant_group(self)




    def isa_pbx_variant_group(self):

        localctx = PBXProjParser.Isa_pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_isa_pbx_variant_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(PBXProjParser.ISA)
            self.state = 1088
            self.match(PBXProjParser.T__2)
            self.state = 1089
            self.match(PBXProjParser.PBX_VARIANT_GROUP)
            self.state = 1090
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_BUILD_CONFIGURATION(self):
            return self.getToken(PBXProjParser.XC_BUILD_CONFIGURATION, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_build_configuration" ):
                listener.enterIsa_xc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_build_configuration" ):
                listener.exitIsa_xc_build_configuration(self)




    def isa_xc_build_configuration(self):

        localctx = PBXProjParser.Isa_xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_isa_xc_build_configuration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(PBXProjParser.ISA)
            self.state = 1093
            self.match(PBXProjParser.T__2)
            self.state = 1094
            self.match(PBXProjParser.XC_BUILD_CONFIGURATION)
            self.state = 1095
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_CONFIGURATION_LIST(self):
            return self.getToken(PBXProjParser.XC_CONFIGURATION_LIST, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_configuration_list" ):
                listener.enterIsa_xc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_configuration_list" ):
                listener.exitIsa_xc_configuration_list(self)




    def isa_xc_configuration_list(self):

        localctx = PBXProjParser.Isa_xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_isa_xc_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(PBXProjParser.ISA)
            self.state = 1098
            self.match(PBXProjParser.T__2)
            self.state = 1099
            self.match(PBXProjParser.XC_CONFIGURATION_LIST)
            self.state = 1100
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_REMOTE_SWIFT_PACKAGE_REFERENCE(self):
            return self.getToken(PBXProjParser.XC_REMOTE_SWIFT_PACKAGE_REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_remote_swift_package_reference" ):
                listener.enterIsa_xc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_remote_swift_package_reference" ):
                listener.exitIsa_xc_remote_swift_package_reference(self)




    def isa_xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Isa_xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_isa_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(PBXProjParser.ISA)
            self.state = 1103
            self.match(PBXProjParser.T__2)
            self.state = 1104
            self.match(PBXProjParser.XC_REMOTE_SWIFT_PACKAGE_REFERENCE)
            self.state = 1105
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY(self):
            return self.getToken(PBXProjParser.XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_swift_package_product_dependency" ):
                listener.enterIsa_xc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_swift_package_product_dependency" ):
                listener.exitIsa_xc_swift_package_product_dependency(self)




    def isa_xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Isa_xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_isa_xc_swift_package_product_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.match(PBXProjParser.ISA)
            self.state = 1108
            self.match(PBXProjParser.T__2)
            self.state = 1109
            self.match(PBXProjParser.XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY)
            self.state = 1110
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_VERSION_GROUP(self):
            return self.getToken(PBXProjParser.XC_VERSION_GROUP, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_version_group" ):
                listener.enterIsa_xc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_version_group" ):
                listener.exitIsa_xc_version_group(self)




    def isa_xc_version_group(self):

        localctx = PBXProjParser.Isa_xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_isa_xc_version_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(PBXProjParser.ISA)
            self.state = 1113
            self.match(PBXProjParser.T__2)
            self.state = 1114
            self.match(PBXProjParser.XC_VERSION_GROUP)
            self.state = 1115
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Always_out_of_dateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALWAYS_OUT_OF_DATE(self):
            return self.getToken(PBXProjParser.ALWAYS_OUT_OF_DATE, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_always_out_of_date

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlways_out_of_date" ):
                listener.enterAlways_out_of_date(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlways_out_of_date" ):
                listener.exitAlways_out_of_date(self)




    def always_out_of_date(self):

        localctx = PBXProjParser.Always_out_of_dateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_always_out_of_date)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(PBXProjParser.ALWAYS_OUT_OF_DATE)
            self.state = 1118
            self.match(PBXProjParser.T__2)
            self.state = 1119
            self.match(PBXProjParser.NUMBER)
            self.state = 1120
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_REF(self):
            return self.getToken(PBXProjParser.FILE_REF, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_ref" ):
                listener.enterFile_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_ref" ):
                listener.exitFile_ref(self)




    def file_ref(self):

        localctx = PBXProjParser.File_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_file_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(PBXProjParser.FILE_REF)
            self.state = 1123
            self.match(PBXProjParser.T__2)
            self.state = 1124
            self.match(PBXProjParser.REFERENCE)
            self.state = 1125
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_REF(self):
            return self.getToken(PBXProjParser.PRODUCT_REF, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref" ):
                listener.enterProduct_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref" ):
                listener.exitProduct_ref(self)




    def product_ref(self):

        localctx = PBXProjParser.Product_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_product_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.match(PBXProjParser.PRODUCT_REF)
            self.state = 1128
            self.match(PBXProjParser.T__2)
            self.state = 1129
            self.match(PBXProjParser.REFERENCE)
            self.state = 1130
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Container_portalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER_PORTAL(self):
            return self.getToken(PBXProjParser.CONTAINER_PORTAL, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_container_portal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_portal" ):
                listener.enterContainer_portal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_portal" ):
                listener.exitContainer_portal(self)




    def container_portal(self):

        localctx = PBXProjParser.Container_portalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_container_portal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(PBXProjParser.CONTAINER_PORTAL)
            self.state = 1133
            self.match(PBXProjParser.T__2)
            self.state = 1134
            self.match(PBXProjParser.REFERENCE)
            self.state = 1135
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROXY_TYPE(self):
            return self.getToken(PBXProjParser.PROXY_TYPE, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_proxy_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_type" ):
                listener.enterProxy_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_type" ):
                listener.exitProxy_type(self)




    def proxy_type(self):

        localctx = PBXProjParser.Proxy_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_proxy_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(PBXProjParser.PROXY_TYPE)
            self.state = 1138
            self.match(PBXProjParser.T__2)
            self.state = 1139
            self.match(PBXProjParser.NUMBER)
            self.state = 1140
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_global_id_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOTE_GLOBAL_ID_STRING(self):
            return self.getToken(PBXProjParser.REMOTE_GLOBAL_ID_STRING, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_global_id_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_global_id_string" ):
                listener.enterRemote_global_id_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_global_id_string" ):
                listener.exitRemote_global_id_string(self)




    def remote_global_id_string(self):

        localctx = PBXProjParser.Remote_global_id_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_remote_global_id_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(PBXProjParser.REMOTE_GLOBAL_ID_STRING)
            self.state = 1143
            self.match(PBXProjParser.T__2)
            self.state = 1144
            self.match(PBXProjParser.REFERENCE)
            self.state = 1145
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOTE_INFO(self):
            return self.getToken(PBXProjParser.REMOTE_INFO, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_info" ):
                listener.enterRemote_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_info" ):
                listener.exitRemote_info(self)




    def remote_info(self):

        localctx = PBXProjParser.Remote_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_remote_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.match(PBXProjParser.REMOTE_INFO)
            self.state = 1148
            self.match(PBXProjParser.T__2)
            self.state = 1149
            self.str_number_variable()
            self.state = 1150
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_ENCODING(self):
            return self.getToken(PBXProjParser.FILE_ENCODING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_encoding" ):
                listener.enterFile_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_encoding" ):
                listener.exitFile_encoding(self)




    def file_encoding(self):

        localctx = PBXProjParser.File_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_file_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(PBXProjParser.FILE_ENCODING)
            self.state = 1153
            self.match(PBXProjParser.T__2)
            self.state = 1154
            self.match(PBXProjParser.NUMBER)
            self.state = 1155
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS(self):
            return self.getToken(PBXProjParser.COMMENTS, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = PBXProjParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(PBXProjParser.COMMENTS)
            self.state = 1158
            self.match(PBXProjParser.T__2)
            self.state = 1159
            self.str_number_variable()
            self.state = 1160
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLICIT_FILE_TYPE(self):
            return self.getToken(PBXProjParser.EXPLICIT_FILE_TYPE, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_explicit_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_file_type" ):
                listener.enterExplicit_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_file_type" ):
                listener.exitExplicit_file_type(self)




    def explicit_file_type(self):

        localctx = PBXProjParser.Explicit_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_explicit_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(PBXProjParser.EXPLICIT_FILE_TYPE)
            self.state = 1163
            self.match(PBXProjParser.T__2)
            self.state = 1164
            self.str_number_variable()
            self.state = 1165
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_known_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_KNOWN_FILE_TYPE(self):
            return self.getToken(PBXProjParser.LAST_KNOWN_FILE_TYPE, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_last_known_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_known_file_type" ):
                listener.enterLast_known_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_known_file_type" ):
                listener.exitLast_known_file_type(self)




    def last_known_file_type(self):

        localctx = PBXProjParser.Last_known_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_last_known_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(PBXProjParser.LAST_KNOWN_FILE_TYPE)
            self.state = 1168
            self.match(PBXProjParser.T__2)
            self.state = 1169
            self.str_number_variable()
            self.state = 1170
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_in_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE_IN_INDEX(self):
            return self.getToken(PBXProjParser.INCLUDE_IN_INDEX, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_include_in_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_in_index" ):
                listener.enterInclude_in_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_in_index" ):
                listener.exitInclude_in_index(self)




    def include_in_index(self):

        localctx = PBXProjParser.Include_in_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_include_in_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(PBXProjParser.INCLUDE_IN_INDEX)
            self.state = 1173
            self.match(PBXProjParser.T__2)
            self.state = 1174
            self.match(PBXProjParser.NUMBER)
            self.state = 1175
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indent_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT_WIDTH(self):
            return self.getToken(PBXProjParser.INDENT_WIDTH, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_indent_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndent_width" ):
                listener.enterIndent_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndent_width" ):
                listener.exitIndent_width(self)




    def indent_width(self):

        localctx = PBXProjParser.Indent_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_indent_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(PBXProjParser.INDENT_WIDTH)
            self.state = 1178
            self.match(PBXProjParser.T__2)
            self.state = 1179
            self.match(PBXProjParser.NUMBER)
            self.state = 1180
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tab_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB_WIDTH(self):
            return self.getToken(PBXProjParser.TAB_WIDTH, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_tab_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_width" ):
                listener.enterTab_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_width" ):
                listener.exitTab_width(self)




    def tab_width(self):

        localctx = PBXProjParser.Tab_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_tab_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(PBXProjParser.TAB_WIDTH)
            self.state = 1183
            self.match(PBXProjParser.T__2)
            self.state = 1184
            self.match(PBXProjParser.NUMBER)
            self.state = 1185
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uses_tabsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USES_TABS(self):
            return self.getToken(PBXProjParser.USES_TABS, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_uses_tabs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUses_tabs" ):
                listener.enterUses_tabs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUses_tabs" ):
                listener.exitUses_tabs(self)




    def uses_tabs(self):

        localctx = PBXProjParser.Uses_tabsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_uses_tabs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(PBXProjParser.USES_TABS)
            self.state = 1188
            self.match(PBXProjParser.T__2)
            self.state = 1189
            self.match(PBXProjParser.NUMBER)
            self.state = 1190
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wraps_linesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRAPS_LINES(self):
            return self.getToken(PBXProjParser.WRAPS_LINES, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_wraps_lines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWraps_lines" ):
                listener.enterWraps_lines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWraps_lines" ):
                listener.exitWraps_lines(self)




    def wraps_lines(self):

        localctx = PBXProjParser.Wraps_linesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_wraps_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(PBXProjParser.WRAPS_LINES)
            self.state = 1193
            self.match(PBXProjParser.T__2)
            self.state = 1194
            self.match(PBXProjParser.NUMBER)
            self.state = 1195
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLATFORM_FILTER(self):
            return self.getToken(PBXProjParser.PLATFORM_FILTER, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_platform_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_filter" ):
                listener.enterPlatform_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_filter" ):
                listener.exitPlatform_filter(self)




    def platform_filter(self):

        localctx = PBXProjParser.Platform_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_platform_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(PBXProjParser.PLATFORM_FILTER)
            self.state = 1198
            self.match(PBXProjParser.T__2)
            self.state = 1199
            self.any_string()
            self.state = 1200
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_filtersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLATFORM_FILTERS(self):
            return self.getToken(PBXProjParser.PLATFORM_FILTERS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_platform_filters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_filters" ):
                listener.enterPlatform_filters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_filters" ):
                listener.exitPlatform_filters(self)




    def platform_filters(self):

        localctx = PBXProjParser.Platform_filtersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_platform_filters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.match(PBXProjParser.PLATFORM_FILTERS)
            self.state = 1203
            self.match(PBXProjParser.T__2)
            self.state = 1204
            self.any_string_list()
            self.state = 1205
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChildrenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHILDREN(self):
            return self.getToken(PBXProjParser.CHILDREN, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_children

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChildren" ):
                listener.enterChildren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChildren" ):
                listener.exitChildren(self)




    def children(self):

        localctx = PBXProjParser.ChildrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(PBXProjParser.CHILDREN)
            self.state = 1208
            self.match(PBXProjParser.T__2)
            self.state = 1209
            self.reference_list()
            self.state = 1210
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_install_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_INSTALL_PATH(self):
            return self.getToken(PBXProjParser.PRODUCT_INSTALL_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_product_install_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_install_path" ):
                listener.enterProduct_install_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_install_path" ):
                listener.exitProduct_install_path(self)




    def product_install_path(self):

        localctx = PBXProjParser.Product_install_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_product_install_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(PBXProjParser.PRODUCT_INSTALL_PATH)
            self.state = 1213
            self.match(PBXProjParser.T__2)
            self.state = 1214
            self.any_string()
            self.state = 1215
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repository_urlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPOSITORY_URL(self):
            return self.getToken(PBXProjParser.REPOSITORY_URL, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_repository_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepository_url" ):
                listener.enterRepository_url(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepository_url" ):
                listener.exitRepository_url(self)




    def repository_url(self):

        localctx = PBXProjParser.Repository_urlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_repository_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(PBXProjParser.REPOSITORY_URL)
            self.state = 1218
            self.match(PBXProjParser.T__2)
            self.state = 1219
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1220
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIREMENT(self):
            return self.getToken(PBXProjParser.REQUIREMENT, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = PBXProjParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(PBXProjParser.REQUIREMENT)
            self.state = 1223
            self.match(PBXProjParser.T__2)
            self.state = 1224
            self.match(PBXProjParser.T__0)
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4398248234240) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 7679) != 0):
                self.state = 1225
                self.key_value()
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1231
            self.match(PBXProjParser.T__1)
            self.state = 1232
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_packageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(PBXProjParser.PACKAGE, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_package" ):
                listener.enterXc_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_package" ):
                listener.exitXc_package(self)




    def xc_package(self):

        localctx = PBXProjParser.Xc_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_xc_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(PBXProjParser.PACKAGE)
            self.state = 1235
            self.match(PBXProjParser.T__2)
            self.state = 1236
            self.match(PBXProjParser.REFERENCE)
            self.state = 1237
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_product_dependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE_PRODUCT_DEPENDENCIES(self):
            return self.getToken(PBXProjParser.PACKAGE_PRODUCT_DEPENDENCIES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_product_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_product_dependencies" ):
                listener.enterPackage_product_dependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_product_dependencies" ):
                listener.exitPackage_product_dependencies(self)




    def package_product_dependencies(self):

        localctx = PBXProjParser.Package_product_dependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_package_product_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(PBXProjParser.PACKAGE_PRODUCT_DEPENDENCIES)
            self.state = 1240
            self.match(PBXProjParser.T__2)
            self.state = 1241
            self.reference_list()
            self.state = 1242
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PBXProjParser.NAME, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = PBXProjParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(PBXProjParser.NAME)
            self.state = 1245
            self.match(PBXProjParser.T__2)
            self.state = 1246
            self.any_string()
            self.state = 1247
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(PBXProjParser.PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)




    def path(self):

        localctx = PBXProjParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.match(PBXProjParser.PATH)
            self.state = 1250
            self.match(PBXProjParser.T__2)
            self.state = 1251
            self.any_string()
            self.state = 1252
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_treeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE_TREE(self):
            return self.getToken(PBXProjParser.SOURCE_TREE, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_source_tree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_tree" ):
                listener.enterSource_tree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_tree" ):
                listener.exitSource_tree(self)




    def source_tree(self):

        localctx = PBXProjParser.Source_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_source_tree)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(PBXProjParser.SOURCE_TREE)
            self.state = 1255
            self.match(PBXProjParser.T__2)
            self.state = 1256
            self.any_string()
            self.state = 1257
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_action_maskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_ACTION_MASK(self):
            return self.getToken(PBXProjParser.BUILD_ACTION_MASK, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_action_mask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_action_mask" ):
                listener.enterBuild_action_mask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_action_mask" ):
                listener.exitBuild_action_mask(self)




    def build_action_mask(self):

        localctx = PBXProjParser.Build_action_maskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_build_action_mask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(PBXProjParser.BUILD_ACTION_MASK)
            self.state = 1260
            self.match(PBXProjParser.T__2)
            self.state = 1261
            self.match(PBXProjParser.NUMBER)
            self.state = 1262
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILES(self):
            return self.getToken(PBXProjParser.FILES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiles" ):
                listener.enterFiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiles" ):
                listener.exitFiles(self)




    def files(self):

        localctx = PBXProjParser.FilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_files)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(PBXProjParser.FILES)
            self.state = 1265
            self.match(PBXProjParser.T__2)
            self.state = 1266
            self.reference_list()
            self.state = 1267
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Run_only_for_deployment_postprocessingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING(self):
            return self.getToken(PBXProjParser.RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_run_only_for_deployment_postprocessing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRun_only_for_deployment_postprocessing" ):
                listener.enterRun_only_for_deployment_postprocessing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRun_only_for_deployment_postprocessing" ):
                listener.exitRun_only_for_deployment_postprocessing(self)




    def run_only_for_deployment_postprocessing(self):

        localctx = PBXProjParser.Run_only_for_deployment_postprocessingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_run_only_for_deployment_postprocessing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(PBXProjParser.RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING)
            self.state = 1270
            self.match(PBXProjParser.T__2)
            self.state = 1271
            self.match(PBXProjParser.NUMBER)
            self.state = 1272
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_reference_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_list" ):
                listener.enterReference_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_list" ):
                listener.exitReference_list(self)




    def reference_list(self):

        localctx = PBXProjParser.Reference_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_reference_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(PBXProjParser.T__4)
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1275
                self.match(PBXProjParser.REFERENCE)
                self.state = 1276
                self.match(PBXProjParser.T__5)
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1282
            self.match(PBXProjParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_string_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def str_number_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Str_number_variableContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string_list" ):
                listener.enterAny_string_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string_list" ):
                listener.exitAny_string_list(self)




    def any_string_list(self):

        localctx = PBXProjParser.Any_string_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_any_string_list)
        self._la = 0 # Token type
        try:
            self.state = 1300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1284
                self.match(PBXProjParser.T__4)
                self.state = 1285
                self.match(PBXProjParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1286
                self.match(PBXProjParser.T__4)
                self.state = 1287
                self.str_number_variable()
                self.state = 1292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1288
                        self.match(PBXProjParser.T__5)
                        self.state = 1289
                        self.str_number_variable() 
                    self.state = 1294
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 1295
                    self.match(PBXProjParser.T__5)


                self.state = 1298
                self.match(PBXProjParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_quoted_strings_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.NON_QUOTED_STRING)
            else:
                return self.getToken(PBXProjParser.NON_QUOTED_STRING, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_non_quoted_strings_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_quoted_strings_list" ):
                listener.enterNon_quoted_strings_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_quoted_strings_list" ):
                listener.exitNon_quoted_strings_list(self)




    def non_quoted_strings_list(self):

        localctx = PBXProjParser.Non_quoted_strings_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_non_quoted_strings_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(PBXProjParser.T__4)
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==139:
                self.state = 1303
                self.match(PBXProjParser.NON_QUOTED_STRING)
                self.state = 1304
                self.match(PBXProjParser.T__5)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1310
            self.match(PBXProjParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_CONFIGURATION_LIST(self):
            return self.getToken(PBXProjParser.BUILD_CONFIGURATION_LIST, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configuration_list" ):
                listener.enterBuild_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configuration_list" ):
                listener.exitBuild_configuration_list(self)




    def build_configuration_list(self):

        localctx = PBXProjParser.Build_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_build_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(PBXProjParser.BUILD_CONFIGURATION_LIST)
            self.state = 1313
            self.match(PBXProjParser.T__2)
            self.state = 1314
            self.match(PBXProjParser.REFERENCE)
            self.state = 1315
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_phasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_PHASES(self):
            return self.getToken(PBXProjParser.BUILD_PHASES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_phases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_phases" ):
                listener.enterBuild_phases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_phases" ):
                listener.exitBuild_phases(self)




    def build_phases(self):

        localctx = PBXProjParser.Build_phasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_build_phases)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            self.match(PBXProjParser.BUILD_PHASES)
            self.state = 1318
            self.match(PBXProjParser.T__2)
            self.state = 1319
            self.reference_list()
            self.state = 1320
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_RULES(self):
            return self.getToken(PBXProjParser.BUILD_RULES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_rules" ):
                listener.enterBuild_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_rules" ):
                listener.exitBuild_rules(self)




    def build_rules(self):

        localctx = PBXProjParser.Build_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_build_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(PBXProjParser.BUILD_RULES)
            self.state = 1323
            self.match(PBXProjParser.T__2)
            self.state = 1324
            self.reference_list()
            self.state = 1325
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_arguments_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_ARGUMENTS_STRING(self):
            return self.getToken(PBXProjParser.BUILD_ARGUMENTS_STRING, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_arguments_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_arguments_string" ):
                listener.enterBuild_arguments_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_arguments_string" ):
                listener.exitBuild_arguments_string(self)




    def build_arguments_string(self):

        localctx = PBXProjParser.Build_arguments_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_build_arguments_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.match(PBXProjParser.BUILD_ARGUMENTS_STRING)
            self.state = 1328
            self.match(PBXProjParser.T__2)
            self.state = 1329
            self.any_string()
            self.state = 1330
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_tool_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_TOOL_PATH(self):
            return self.getToken(PBXProjParser.BUILD_TOOL_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_tool_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_tool_path" ):
                listener.enterBuild_tool_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_tool_path" ):
                listener.exitBuild_tool_path(self)




    def build_tool_path(self):

        localctx = PBXProjParser.Build_tool_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_build_tool_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(PBXProjParser.BUILD_TOOL_PATH)
            self.state = 1333
            self.match(PBXProjParser.T__2)
            self.state = 1334
            self.any_string()
            self.state = 1335
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_working_directoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_WORKING_DIRECTORY(self):
            return self.getToken(PBXProjParser.BUILD_WORKING_DIRECTORY, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_working_directory

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_working_directory" ):
                listener.enterBuild_working_directory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_working_directory" ):
                listener.exitBuild_working_directory(self)




    def build_working_directory(self):

        localctx = PBXProjParser.Build_working_directoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_build_working_directory)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(PBXProjParser.BUILD_WORKING_DIRECTORY)
            self.state = 1338
            self.match(PBXProjParser.T__2)
            self.state = 1339
            self.any_string()
            self.state = 1340
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_build_settings_in_environmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS_BUILD_SETTINGS_IN_ENVIRONMENT(self):
            return self.getToken(PBXProjParser.PASS_BUILD_SETTINGS_IN_ENVIRONMENT, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_pass_build_settings_in_environment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_build_settings_in_environment" ):
                listener.enterPass_build_settings_in_environment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_build_settings_in_environment" ):
                listener.exitPass_build_settings_in_environment(self)




    def pass_build_settings_in_environment(self):

        localctx = PBXProjParser.Pass_build_settings_in_environmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_pass_build_settings_in_environment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(PBXProjParser.PASS_BUILD_SETTINGS_IN_ENVIRONMENT)
            self.state = 1343
            self.match(PBXProjParser.T__2)
            self.state = 1344
            self.match(PBXProjParser.NUMBER)
            self.state = 1345
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEPENDENCIES(self):
            return self.getToken(PBXProjParser.DEPENDENCIES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependencies" ):
                listener.enterDependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependencies" ):
                listener.exitDependencies(self)




    def dependencies(self):

        localctx = PBXProjParser.DependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.match(PBXProjParser.DEPENDENCIES)
            self.state = 1348
            self.match(PBXProjParser.T__2)
            self.state = 1349
            self.reference_list()
            self.state = 1350
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_NAME(self):
            return self.getToken(PBXProjParser.PRODUCT_NAME, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_product_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_name" ):
                listener.enterProduct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_name" ):
                listener.exitProduct_name(self)




    def product_name(self):

        localctx = PBXProjParser.Product_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_product_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(PBXProjParser.PRODUCT_NAME)
            self.state = 1353
            self.match(PBXProjParser.T__2)
            self.state = 1354
            self.str_number_variable()
            self.state = 1355
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_REFERENCE(self):
            return self.getToken(PBXProjParser.PRODUCT_REFERENCE, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_reference" ):
                listener.enterProduct_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_reference" ):
                listener.exitProduct_reference(self)




    def product_reference(self):

        localctx = PBXProjParser.Product_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_product_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(PBXProjParser.PRODUCT_REFERENCE)
            self.state = 1358
            self.match(PBXProjParser.T__2)
            self.state = 1359
            self.match(PBXProjParser.REFERENCE)
            self.state = 1360
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_TYPE(self):
            return self.getToken(PBXProjParser.PRODUCT_TYPE, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_type" ):
                listener.enterProduct_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_type" ):
                listener.exitProduct_type(self)




    def product_type(self):

        localctx = PBXProjParser.Product_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_product_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.match(PBXProjParser.PRODUCT_TYPE)
            self.state = 1363
            self.match(PBXProjParser.T__2)
            self.state = 1364
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1365
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_endingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_ENDING(self):
            return self.getToken(PBXProjParser.LINE_ENDING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_line_ending

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_ending" ):
                listener.enterLine_ending(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_ending" ):
                listener.exitLine_ending(self)




    def line_ending(self):

        localctx = PBXProjParser.Line_endingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_line_ending)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.match(PBXProjParser.LINE_ENDING)
            self.state = 1368
            self.match(PBXProjParser.T__2)
            self.state = 1369
            self.match(PBXProjParser.NUMBER)
            self.state = 1370
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_language_specification_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XC_LANGUAGE_SPECIFICATION_IDENTIFIER(self):
            return self.getToken(PBXProjParser.XC_LANGUAGE_SPECIFICATION_IDENTIFIER, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_language_specification_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_language_specification_identifier" ):
                listener.enterXc_language_specification_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_language_specification_identifier" ):
                listener.exitXc_language_specification_identifier(self)




    def xc_language_specification_identifier(self):

        localctx = PBXProjParser.Xc_language_specification_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_xc_language_specification_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(PBXProjParser.XC_LANGUAGE_SPECIFICATION_IDENTIFIER)
            self.state = 1373
            self.match(PBXProjParser.T__2)
            self.state = 1374
            self.str_number_variable()
            self.state = 1375
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plist_structure_definition_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLIST_STRUCTURE_DEFINITION_IDENTIFIER(self):
            return self.getToken(PBXProjParser.PLIST_STRUCTURE_DEFINITION_IDENTIFIER, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_plist_structure_definition_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlist_structure_definition_identifier" ):
                listener.enterPlist_structure_definition_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlist_structure_definition_identifier" ):
                listener.exitPlist_structure_definition_identifier(self)




    def plist_structure_definition_identifier(self):

        localctx = PBXProjParser.Plist_structure_definition_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_plist_structure_definition_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(PBXProjParser.PLIST_STRUCTURE_DEFINITION_IDENTIFIER)
            self.state = 1378
            self.match(PBXProjParser.T__2)
            self.state = 1379
            self.str_number_variable()
            self.state = 1380
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTES(self):
            return self.getToken(PBXProjParser.ATTRIBUTES, 0)

        def build_targets_in_parallel(self):
            return self.getTypedRuleContext(PBXProjParser.Build_targets_in_parallelContext,0)


        def class_prefix(self):
            return self.getTypedRuleContext(PBXProjParser.Class_prefixContext,0)


        def default_build_system_type_for_workspace(self):
            return self.getTypedRuleContext(PBXProjParser.Default_build_system_type_for_workspaceContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def last_swift_update_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_update_checkContext,0)


        def last_testing_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_testing_upgrade_checkContext,0)


        def last_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_upgrade_checkContext,0)


        def organization_name(self):
            return self.getTypedRuleContext(PBXProjParser.Organization_nameContext,0)


        def target_attributes(self):
            return self.getTypedRuleContext(PBXProjParser.Target_attributesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PBXProjParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self.match(PBXProjParser.ATTRIBUTES)
            self.state = 1383
            self.match(PBXProjParser.T__2)
            self.state = 1384
            self.match(PBXProjParser.T__0)
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1385
                self.build_targets_in_parallel()


            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1388
                self.class_prefix()


            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1391
                self.default_build_system_type_for_workspace()


            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 1394
                self.last_swift_migration()


            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1397
                self.last_swift_update_check()


            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1400
                self.last_testing_upgrade_check()


            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 1403
                self.last_upgrade_check()


            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1406
                self.organization_name()


            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 1409
                self.target_attributes()


            self.state = 1412
            self.match(PBXProjParser.T__1)
            self.state = 1413
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_migrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_SWIFT_MIGRATION(self):
            return self.getToken(PBXProjParser.LAST_SWIFT_MIGRATION, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_migration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_migration" ):
                listener.enterLast_swift_migration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_migration" ):
                listener.exitLast_swift_migration(self)




    def last_swift_migration(self):

        localctx = PBXProjParser.Last_swift_migrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_last_swift_migration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.match(PBXProjParser.LAST_SWIFT_MIGRATION)
            self.state = 1416
            self.match(PBXProjParser.T__2)
            self.state = 1417
            self.match(PBXProjParser.NUMBER)
            self.state = 1418
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_build_system_type_for_workspaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE(self):
            return self.getToken(PBXProjParser.DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_build_system_type_for_workspace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_build_system_type_for_workspace" ):
                listener.enterDefault_build_system_type_for_workspace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_build_system_type_for_workspace" ):
                listener.exitDefault_build_system_type_for_workspace(self)




    def default_build_system_type_for_workspace(self):

        localctx = PBXProjParser.Default_build_system_type_for_workspaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_default_build_system_type_for_workspace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(PBXProjParser.DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE)
            self.state = 1421
            self.match(PBXProjParser.T__2)
            self.state = 1422
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1423
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_update_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_SWIFT_UPDATE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_SWIFT_UPDATE_CHECK, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_update_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_update_check" ):
                listener.enterLast_swift_update_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_update_check" ):
                listener.exitLast_swift_update_check(self)




    def last_swift_update_check(self):

        localctx = PBXProjParser.Last_swift_update_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_last_swift_update_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(PBXProjParser.LAST_SWIFT_UPDATE_CHECK)
            self.state = 1426
            self.match(PBXProjParser.T__2)
            self.state = 1427
            self.match(PBXProjParser.NUMBER)
            self.state = 1428
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_targets_in_parallelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_INDEPENDENT_TARGETS_IN_PARALLEL(self):
            return self.getToken(PBXProjParser.BUILD_INDEPENDENT_TARGETS_IN_PARALLEL, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_targets_in_parallel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_targets_in_parallel" ):
                listener.enterBuild_targets_in_parallel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_targets_in_parallel" ):
                listener.exitBuild_targets_in_parallel(self)




    def build_targets_in_parallel(self):

        localctx = PBXProjParser.Build_targets_in_parallelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_build_targets_in_parallel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.match(PBXProjParser.BUILD_INDEPENDENT_TARGETS_IN_PARALLEL)
            self.state = 1431
            self.match(PBXProjParser.T__2)
            self.state = 1432
            _la = self._input.LA(1)
            if not(_la==13 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1433
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_testing_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_TESTING_UPGRADE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_TESTING_UPGRADE_CHECK, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_testing_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_testing_upgrade_check" ):
                listener.enterLast_testing_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_testing_upgrade_check" ):
                listener.exitLast_testing_upgrade_check(self)




    def last_testing_upgrade_check(self):

        localctx = PBXProjParser.Last_testing_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_last_testing_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self.match(PBXProjParser.LAST_TESTING_UPGRADE_CHECK)
            self.state = 1436
            self.match(PBXProjParser.T__2)
            self.state = 1437
            self.match(PBXProjParser.NUMBER)
            self.state = 1438
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_UPGRADE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_UPGRADE_CHECK, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_upgrade_check" ):
                listener.enterLast_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_upgrade_check" ):
                listener.exitLast_upgrade_check(self)




    def last_upgrade_check(self):

        localctx = PBXProjParser.Last_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_last_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(PBXProjParser.LAST_UPGRADE_CHECK)
            self.state = 1441
            self.match(PBXProjParser.T__2)
            self.state = 1442
            self.match(PBXProjParser.NUMBER)
            self.state = 1443
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Organization_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORGANIZATION_NAME(self):
            return self.getToken(PBXProjParser.ORGANIZATION_NAME, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_organization_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrganization_name" ):
                listener.enterOrganization_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrganization_name" ):
                listener.exitOrganization_name(self)




    def organization_name(self):

        localctx = PBXProjParser.Organization_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_organization_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(PBXProjParser.ORGANIZATION_NAME)
            self.state = 1446
            self.match(PBXProjParser.T__2)
            self.state = 1447
            self.str_number_variable()
            self.state = 1448
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_ATTRIBUTES(self):
            return self.getToken(PBXProjParser.TARGET_ATTRIBUTES, 0)

        def target_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Target_attributeContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Target_attributeContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attributes" ):
                listener.enterTarget_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attributes" ):
                listener.exitTarget_attributes(self)




    def target_attributes(self):

        localctx = PBXProjParser.Target_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_target_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(PBXProjParser.TARGET_ATTRIBUTES)
            self.state = 1451
            self.match(PBXProjParser.T__2)
            self.state = 1452
            self.match(PBXProjParser.T__0)
            self.state = 1456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 1453
                self.target_attribute()
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1459
            self.match(PBXProjParser.T__1)
            self.state = 1460
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def created_on_tools_version(self):
            return self.getTypedRuleContext(PBXProjParser.Created_on_tools_versionContext,0)


        def test_target_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Test_target_idContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Test_target_idContext,i)


        def development_team(self):
            return self.getTypedRuleContext(PBXProjParser.Development_teamContext,0)


        def development_team_name(self):
            return self.getTypedRuleContext(PBXProjParser.Development_team_nameContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def provisioning_style(self):
            return self.getTypedRuleContext(PBXProjParser.Provisioning_styleContext,0)


        def system_capabilities(self):
            return self.getTypedRuleContext(PBXProjParser.System_capabilitiesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attribute" ):
                listener.enterTarget_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attribute" ):
                listener.exitTarget_attribute(self)




    def target_attribute(self):

        localctx = PBXProjParser.Target_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_target_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(PBXProjParser.REFERENCE)
            self.state = 1463
            self.match(PBXProjParser.T__2)
            self.state = 1464
            self.match(PBXProjParser.T__0)
            self.state = 1466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 1465
                self.created_on_tools_version()


            self.state = 1469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1468
                self.test_target_id()


            self.state = 1472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 1471
                self.development_team()


            self.state = 1475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1474
                self.development_team_name()


            self.state = 1478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 1477
                self.last_swift_migration()


            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 1480
                self.provisioning_style()


            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1483
                self.system_capabilities()


            self.state = 1487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 1486
                self.test_target_id()


            self.state = 1489
            self.match(PBXProjParser.T__1)
            self.state = 1490
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Created_on_tools_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATED_ON_TOOLS_VERSION(self):
            return self.getToken(PBXProjParser.CREATED_ON_TOOLS_VERSION, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_created_on_tools_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreated_on_tools_version" ):
                listener.enterCreated_on_tools_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreated_on_tools_version" ):
                listener.exitCreated_on_tools_version(self)




    def created_on_tools_version(self):

        localctx = PBXProjParser.Created_on_tools_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_created_on_tools_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1492
            self.match(PBXProjParser.CREATED_ON_TOOLS_VERSION)
            self.state = 1493
            self.match(PBXProjParser.T__2)
            self.state = 1494
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1495
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_target_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEST_TARGET_ID(self):
            return self.getToken(PBXProjParser.TEST_TARGET_ID, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_test_target_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_target_id" ):
                listener.enterTest_target_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_target_id" ):
                listener.exitTest_target_id(self)




    def test_target_id(self):

        localctx = PBXProjParser.Test_target_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_test_target_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(PBXProjParser.TEST_TARGET_ID)
            self.state = 1498
            self.match(PBXProjParser.T__2)
            self.state = 1499
            self.match(PBXProjParser.REFERENCE)
            self.state = 1500
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_teamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEVELOPMENT_TEAM(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_TEAM, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team" ):
                listener.enterDevelopment_team(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team" ):
                listener.exitDevelopment_team(self)




    def development_team(self):

        localctx = PBXProjParser.Development_teamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_development_team)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.match(PBXProjParser.DEVELOPMENT_TEAM)
            self.state = 1503
            self.match(PBXProjParser.T__2)
            self.state = 1504
            self.any_string()
            self.state = 1505
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_team_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEVELOPMENT_TEAM_NAME(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_TEAM_NAME, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team_name" ):
                listener.enterDevelopment_team_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team_name" ):
                listener.exitDevelopment_team_name(self)




    def development_team_name(self):

        localctx = PBXProjParser.Development_team_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_development_team_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(PBXProjParser.DEVELOPMENT_TEAM_NAME)
            self.state = 1508
            self.match(PBXProjParser.T__2)
            self.state = 1509
            self.any_string()
            self.state = 1510
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provisioning_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROVISIONING_STYLE(self):
            return self.getToken(PBXProjParser.PROVISIONING_STYLE, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_provisioning_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvisioning_style" ):
                listener.enterProvisioning_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvisioning_style" ):
                listener.exitProvisioning_style(self)




    def provisioning_style(self):

        localctx = PBXProjParser.Provisioning_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_provisioning_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(PBXProjParser.PROVISIONING_STYLE)
            self.state = 1513
            self.match(PBXProjParser.T__2)
            self.state = 1514
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1515
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compatibility_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPATIBILITY_VERSION(self):
            return self.getToken(PBXProjParser.COMPATIBILITY_VERSION, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_compatibility_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompatibility_version" ):
                listener.enterCompatibility_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompatibility_version" ):
                listener.exitCompatibility_version(self)




    def compatibility_version(self):

        localctx = PBXProjParser.Compatibility_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_compatibility_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(PBXProjParser.COMPATIBILITY_VERSION)
            self.state = 1518
            self.match(PBXProjParser.T__2)
            self.state = 1519
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1520
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_regionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEVELOPMENT_REGION(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_REGION, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_region

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_region" ):
                listener.enterDevelopment_region(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_region" ):
                listener.exitDevelopment_region(self)




    def development_region(self):

        localctx = PBXProjParser.Development_regionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_development_region)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(PBXProjParser.DEVELOPMENT_REGION)
            self.state = 1523
            self.match(PBXProjParser.T__2)
            self.state = 1524
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1525
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_scanned_for_encodingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAS_SCANNED_FOR_ENCODINGS(self):
            return self.getToken(PBXProjParser.HAS_SCANNED_FOR_ENCODINGS, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_has_scanned_for_encodings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_scanned_for_encodings" ):
                listener.enterHas_scanned_for_encodings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_scanned_for_encodings" ):
                listener.exitHas_scanned_for_encodings(self)




    def has_scanned_for_encodings(self):

        localctx = PBXProjParser.Has_scanned_for_encodingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_has_scanned_for_encodings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(PBXProjParser.HAS_SCANNED_FOR_ENCODINGS)
            self.state = 1528
            self.match(PBXProjParser.T__2)
            self.state = 1529
            self.match(PBXProjParser.NUMBER)
            self.state = 1530
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Known_regionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KNOWN_REGIONS(self):
            return self.getToken(PBXProjParser.KNOWN_REGIONS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_known_regions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKnown_regions" ):
                listener.enterKnown_regions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKnown_regions" ):
                listener.exitKnown_regions(self)




    def known_regions(self):

        localctx = PBXProjParser.Known_regionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_known_regions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.match(PBXProjParser.KNOWN_REGIONS)
            self.state = 1533
            self.match(PBXProjParser.T__2)
            self.state = 1534
            self.any_string_list()
            self.state = 1535
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAIN_GROUP(self):
            return self.getToken(PBXProjParser.MAIN_GROUP, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_main_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_group" ):
                listener.enterMain_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_group" ):
                listener.exitMain_group(self)




    def main_group(self):

        localctx = PBXProjParser.Main_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_main_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.match(PBXProjParser.MAIN_GROUP)
            self.state = 1538
            self.match(PBXProjParser.T__2)
            self.state = 1539
            self.match(PBXProjParser.REFERENCE)
            self.state = 1540
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_ref_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_REF_GROUP(self):
            return self.getToken(PBXProjParser.PRODUCT_REF_GROUP, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref_group" ):
                listener.enterProduct_ref_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref_group" ):
                listener.exitProduct_ref_group(self)




    def product_ref_group(self):

        localctx = PBXProjParser.Product_ref_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_product_ref_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.match(PBXProjParser.PRODUCT_REF_GROUP)
            self.state = 1543
            self.match(PBXProjParser.T__2)
            self.state = 1544
            self.match(PBXProjParser.REFERENCE)
            self.state = 1545
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE_REFERENCES(self):
            return self.getToken(PBXProjParser.PACKAGE_REFERENCES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_references" ):
                listener.enterPackage_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_references" ):
                listener.exitPackage_references(self)




    def package_references(self):

        localctx = PBXProjParser.Package_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_package_references)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            self.match(PBXProjParser.PACKAGE_REFERENCES)
            self.state = 1548
            self.match(PBXProjParser.T__2)
            self.state = 1549
            self.reference_list()
            self.state = 1550
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_dir_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_DIR_PATH(self):
            return self.getToken(PBXProjParser.PRODUCT_DIR_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_dir_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_dir_path" ):
                listener.enterProject_dir_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_dir_path" ):
                listener.exitProject_dir_path(self)




    def project_dir_path(self):

        localctx = PBXProjParser.Project_dir_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_project_dir_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(PBXProjParser.PRODUCT_DIR_PATH)
            self.state = 1553
            self.match(PBXProjParser.T__2)
            self.state = 1554
            self.any_string()
            self.state = 1555
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROJECT_REFERENCES(self):
            return self.getToken(PBXProjParser.PROJECT_REFERENCES, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def project_references_list(self):
            return self.getTypedRuleContext(PBXProjParser.Project_references_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references" ):
                listener.enterProject_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references" ):
                listener.exitProject_references(self)




    def project_references(self):

        localctx = PBXProjParser.Project_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_project_references)
        try:
            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self.match(PBXProjParser.PROJECT_REFERENCES)
                self.state = 1558
                self.match(PBXProjParser.T__2)
                self.state = 1559
                self.str_number_variable()
                self.state = 1560
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.match(PBXProjParser.PROJECT_REFERENCES)
                self.state = 1563
                self.match(PBXProjParser.T__2)
                self.state = 1564
                self.match(PBXProjParser.T__4)
                self.state = 1565
                self.project_references_list()
                self.state = 1566
                self.match(PBXProjParser.T__6)
                self.state = 1567
                self.match(PBXProjParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_rootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROJECT_ROOT(self):
            return self.getToken(PBXProjParser.PROJECT_ROOT, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_root" ):
                listener.enterProject_root(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_root" ):
                listener.exitProject_root(self)




    def project_root(self):

        localctx = PBXProjParser.Project_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_project_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.match(PBXProjParser.PROJECT_ROOT)
            self.state = 1572
            self.match(PBXProjParser.T__2)
            self.state = 1573
            self.any_string()
            self.state = 1574
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGETS(self):
            return self.getToken(PBXProjParser.TARGETS, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_targets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargets" ):
                listener.enterTargets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargets" ):
                listener.exitTargets(self)




    def targets(self):

        localctx = PBXProjParser.TargetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_targets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.match(PBXProjParser.TARGETS)
            self.state = 1577
            self.match(PBXProjParser.T__2)
            self.state = 1578
            self.reference_list()
            self.state = 1579
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT_FILE_LIST_PATHS(self):
            return self.getToken(PBXProjParser.INPUT_FILE_LIST_PATHS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_file_list_paths" ):
                listener.enterInput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_file_list_paths" ):
                listener.exitInput_file_list_paths(self)




    def input_file_list_paths(self):

        localctx = PBXProjParser.Input_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_input_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.match(PBXProjParser.INPUT_FILE_LIST_PATHS)
            self.state = 1582
            self.match(PBXProjParser.T__2)
            self.state = 1583
            self.any_string_list()
            self.state = 1584
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT_PATHS(self):
            return self.getToken(PBXProjParser.INPUT_PATHS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_paths" ):
                listener.enterInput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_paths" ):
                listener.exitInput_paths(self)




    def input_paths(self):

        localctx = PBXProjParser.Input_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_input_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            self.match(PBXProjParser.INPUT_PATHS)
            self.state = 1587
            self.match(PBXProjParser.T__2)
            self.state = 1588
            self.any_string_list()
            self.state = 1589
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT_FILE_LIST_PATHS(self):
            return self.getToken(PBXProjParser.OUTPUT_FILE_LIST_PATHS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_file_list_paths" ):
                listener.enterOutput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_file_list_paths" ):
                listener.exitOutput_file_list_paths(self)




    def output_file_list_paths(self):

        localctx = PBXProjParser.Output_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_output_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(PBXProjParser.OUTPUT_FILE_LIST_PATHS)
            self.state = 1592
            self.match(PBXProjParser.T__2)
            self.state = 1593
            self.any_string_list()
            self.state = 1594
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT_PATHS(self):
            return self.getToken(PBXProjParser.OUTPUT_PATHS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_paths" ):
                listener.enterOutput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_paths" ):
                listener.exitOutput_paths(self)




    def output_paths(self):

        localctx = PBXProjParser.Output_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_output_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self.match(PBXProjParser.OUTPUT_PATHS)
            self.state = 1597
            self.match(PBXProjParser.T__2)
            self.state = 1598
            self.any_string_list()
            self.state = 1599
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHELL_PATH(self):
            return self.getToken(PBXProjParser.SHELL_PATH, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_path" ):
                listener.enterShell_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_path" ):
                listener.exitShell_path(self)




    def shell_path(self):

        localctx = PBXProjParser.Shell_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_shell_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.match(PBXProjParser.SHELL_PATH)
            self.state = 1602
            self.match(PBXProjParser.T__2)
            self.state = 1603
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1604
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_scriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHELL_SCRIPT(self):
            return self.getToken(PBXProjParser.SHELL_SCRIPT, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_script" ):
                listener.enterShell_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_script" ):
                listener.exitShell_script(self)




    def shell_script(self):

        localctx = PBXProjParser.Shell_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_shell_script)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self.match(PBXProjParser.SHELL_SCRIPT)
            self.state = 1607
            self.match(PBXProjParser.T__2)
            self.state = 1608
            self.any_string()
            self.state = 1609
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_env_vars_in_logContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_ENV_VARS_IN_LOG(self):
            return self.getToken(PBXProjParser.SHOW_ENV_VARS_IN_LOG, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_show_env_vars_in_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_env_vars_in_log" ):
                listener.enterShow_env_vars_in_log(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_env_vars_in_log" ):
                listener.exitShow_env_vars_in_log(self)




    def show_env_vars_in_log(self):

        localctx = PBXProjParser.Show_env_vars_in_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_show_env_vars_in_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.match(PBXProjParser.SHOW_ENV_VARS_IN_LOG)
            self.state = 1612
            self.match(PBXProjParser.T__2)
            self.state = 1613
            self.match(PBXProjParser.NUMBER)
            self.state = 1614
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET(self):
            return self.getToken(PBXProjParser.TARGET, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget" ):
                listener.enterTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget" ):
                listener.exitTarget(self)




    def target(self):

        localctx = PBXProjParser.TargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.match(PBXProjParser.TARGET)
            self.state = 1617
            self.match(PBXProjParser.T__2)
            self.state = 1618
            self.match(PBXProjParser.REFERENCE)
            self.state = 1619
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_PROXY(self):
            return self.getToken(PBXProjParser.TARGET_PROXY, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_proxy" ):
                listener.enterTarget_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_proxy" ):
                listener.exitTarget_proxy(self)




    def target_proxy(self):

        localctx = PBXProjParser.Target_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_target_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(PBXProjParser.TARGET_PROXY)
            self.state = 1622
            self.match(PBXProjParser.T__2)
            self.state = 1623
            self.match(PBXProjParser.REFERENCE)
            self.state = 1624
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_TYPE(self):
            return self.getToken(PBXProjParser.FILE_TYPE, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_type" ):
                listener.enterFile_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_type" ):
                listener.exitFile_type(self)




    def file_type(self):

        localctx = PBXProjParser.File_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.match(PBXProjParser.FILE_TYPE)
            self.state = 1627
            self.match(PBXProjParser.T__2)
            self.state = 1628
            self.str_number_variable()
            self.state = 1629
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOTE_REF(self):
            return self.getToken(PBXProjParser.REMOTE_REF, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_ref" ):
                listener.enterRemote_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_ref" ):
                listener.exitRemote_ref(self)




    def remote_ref(self):

        localctx = PBXProjParser.Remote_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_remote_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(PBXProjParser.REMOTE_REF)
            self.state = 1632
            self.match(PBXProjParser.T__2)
            self.state = 1633
            self.match(PBXProjParser.REFERENCE)
            self.state = 1634
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_configuration_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASE_CONFIGURATION_REFERENCE(self):
            return self.getToken(PBXProjParser.BASE_CONFIGURATION_REFERENCE, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_base_configuration_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_configuration_reference" ):
                listener.enterBase_configuration_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_configuration_reference" ):
                listener.exitBase_configuration_reference(self)




    def base_configuration_reference(self):

        localctx = PBXProjParser.Base_configuration_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_base_configuration_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(PBXProjParser.BASE_CONFIGURATION_REFERENCE)
            self.state = 1637
            self.match(PBXProjParser.T__2)
            self.state = 1638
            self.match(PBXProjParser.REFERENCE)
            self.state = 1639
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_SETTINGS(self):
            return self.getToken(PBXProjParser.BUILD_SETTINGS, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_settings" ):
                listener.enterBuild_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_settings" ):
                listener.exitBuild_settings(self)




    def build_settings(self):

        localctx = PBXProjParser.Build_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_build_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(PBXProjParser.BUILD_SETTINGS)
            self.state = 1642
            self.match(PBXProjParser.T__2)
            self.state = 1643
            self.match(PBXProjParser.T__0)
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4398248234240) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 7679) != 0):
                self.state = 1644
                self.key_value()
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1650
            self.match(PBXProjParser.T__1)
            self.state = 1651
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_stylesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_STYLES(self):
            return self.getToken(PBXProjParser.BUILD_STYLES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_styles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_styles" ):
                listener.enterBuild_styles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_styles" ):
                listener.exitBuild_styles(self)




    def build_styles(self):

        localctx = PBXProjParser.Build_stylesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_build_styles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.match(PBXProjParser.BUILD_STYLES)
            self.state = 1654
            self.match(PBXProjParser.T__2)
            self.state = 1655
            self.reference_list()
            self.state = 1656
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DST_PATH(self):
            return self.getToken(PBXProjParser.DST_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_path" ):
                listener.enterDst_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_path" ):
                listener.exitDst_path(self)




    def dst_path(self):

        localctx = PBXProjParser.Dst_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_dst_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.match(PBXProjParser.DST_PATH)
            self.state = 1659
            self.match(PBXProjParser.T__2)
            self.state = 1660
            self.any_string()
            self.state = 1661
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_subfolder_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DST_SUBFOLDER_SPEC(self):
            return self.getToken(PBXProjParser.DST_SUBFOLDER_SPEC, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_subfolder_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_subfolder_spec" ):
                listener.enterDst_subfolder_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_subfolder_spec" ):
                listener.exitDst_subfolder_spec(self)




    def dst_subfolder_spec(self):

        localctx = PBXProjParser.Dst_subfolder_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_dst_subfolder_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.match(PBXProjParser.DST_SUBFOLDER_SPEC)
            self.state = 1664
            self.match(PBXProjParser.T__2)
            self.state = 1665
            self.match(PBXProjParser.NUMBER)
            self.state = 1666
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def project_references_list_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Project_references_list_elementContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Project_references_list_elementContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list" ):
                listener.enterProject_references_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list" ):
                listener.exitProject_references_list(self)




    def project_references_list(self):

        localctx = PBXProjParser.Project_references_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_project_references_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1668
                self.project_references_list_element()
                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_list_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_GROUP(self):
            return self.getToken(PBXProjParser.PRODUCT_GROUP, 0)

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def PROJECT_REF(self):
            return self.getToken(PBXProjParser.PROJECT_REF, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list_element" ):
                listener.enterProject_references_list_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list_element" ):
                listener.exitProject_references_list_element(self)




    def project_references_list_element(self):

        localctx = PBXProjParser.Project_references_list_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_project_references_list_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.match(PBXProjParser.T__0)
            self.state = 1675
            self.match(PBXProjParser.PRODUCT_GROUP)
            self.state = 1676
            self.match(PBXProjParser.T__2)
            self.state = 1677
            self.match(PBXProjParser.REFERENCE)
            self.state = 1678
            self.match(PBXProjParser.T__3)
            self.state = 1679
            self.match(PBXProjParser.PROJECT_REF)
            self.state = 1680
            self.match(PBXProjParser.T__2)
            self.state = 1681
            self.match(PBXProjParser.REFERENCE)
            self.state = 1682
            self.match(PBXProjParser.T__3)
            self.state = 1683
            self.match(PBXProjParser.T__1)
            self.state = 1684
            self.match(PBXProjParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def str_number_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Str_number_variableContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,i)


        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def ALPHA_NUMERIC(self):
            return self.getToken(PBXProjParser.ALPHA_NUMERIC, 0)

        def key_value(self):
            return self.getTypedRuleContext(PBXProjParser.Key_valueContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_key_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value" ):
                listener.enterKey_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value" ):
                listener.exitKey_value(self)




    def key_value(self):

        localctx = PBXProjParser.Key_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_key_value)
        self._la = 0 # Token type
        try:
            self.state = 1727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1686
                self.str_number_variable()
                self.state = 1687
                self.match(PBXProjParser.T__2)
                self.state = 1688
                self.str_number_variable()
                self.state = 1689
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1691
                self.str_number_variable()
                self.state = 1692
                self.match(PBXProjParser.T__2)
                self.state = 1693
                self.match(PBXProjParser.NUMBER)
                self.state = 1694
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1696
                self.str_number_variable()
                self.state = 1697
                self.match(PBXProjParser.T__2)
                self.state = 1698
                self.match(PBXProjParser.ALPHA_NUMERIC)
                self.state = 1699
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1701
                self.str_number_variable()
                self.state = 1702
                self.match(PBXProjParser.T__2)
                self.state = 1703
                self.match(PBXProjParser.T__0)
                self.state = 1704
                self.key_value()
                self.state = 1705
                self.match(PBXProjParser.T__1)
                self.state = 1706
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1708
                self.str_number_variable()
                self.state = 1709
                self.match(PBXProjParser.T__2)
                self.state = 1710
                self.match(PBXProjParser.T__4)
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4398248234240) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 7679) != 0):
                    self.state = 1711
                    self.str_number_variable()


                self.state = 1718
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1714
                        self.match(PBXProjParser.T__5)
                        self.state = 1715
                        self.str_number_variable() 
                    self.state = 1720
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 1721
                    self.match(PBXProjParser.T__5)


                self.state = 1724
                self.match(PBXProjParser.T__6)
                self.state = 1725
                self.match(PBXProjParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configurationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_CONFIGURATIONS(self):
            return self.getToken(PBXProjParser.BUILD_CONFIGURATIONS, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configurations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configurations" ):
                listener.enterBuild_configurations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configurations" ):
                listener.exitBuild_configurations(self)




    def build_configurations(self):

        localctx = PBXProjParser.Build_configurationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_build_configurations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self.match(PBXProjParser.BUILD_CONFIGURATIONS)
            self.state = 1730
            self.match(PBXProjParser.T__2)
            self.state = 1731
            self.reference_list()
            self.state = 1732
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_is_visibleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_CONFIGURATION_IS_VISIBLE(self):
            return self.getToken(PBXProjParser.DEFAULT_CONFIGURATION_IS_VISIBLE, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_is_visible

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_is_visible" ):
                listener.enterDefault_configuration_is_visible(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_is_visible" ):
                listener.exitDefault_configuration_is_visible(self)




    def default_configuration_is_visible(self):

        localctx = PBXProjParser.Default_configuration_is_visibleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_default_configuration_is_visible)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.match(PBXProjParser.DEFAULT_CONFIGURATION_IS_VISIBLE)
            self.state = 1735
            self.match(PBXProjParser.T__2)
            self.state = 1736
            self.match(PBXProjParser.NUMBER)
            self.state = 1737
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_CONFIGURATION_NAME(self):
            return self.getToken(PBXProjParser.DEFAULT_CONFIGURATION_NAME, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_name" ):
                listener.enterDefault_configuration_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_name" ):
                listener.exitDefault_configuration_name(self)




    def default_configuration_name(self):

        localctx = PBXProjParser.Default_configuration_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_default_configuration_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self.match(PBXProjParser.DEFAULT_CONFIGURATION_NAME)
            self.state = 1740
            self.match(PBXProjParser.T__2)
            self.state = 1741
            self.any_string()
            self.state = 1742
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(PBXProjParser.SETTINGS, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettings" ):
                listener.enterSettings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettings" ):
                listener.exitSettings(self)




    def settings(self):

        localctx = PBXProjParser.SettingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self.match(PBXProjParser.SETTINGS)
            self.state = 1745
            self.match(PBXProjParser.T__2)
            self.state = 1746
            self.match(PBXProjParser.T__0)
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4398248234240) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 7679) != 0):
                self.state = 1747
                self.key_value()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1753
            self.match(PBXProjParser.T__1)
            self.state = 1754
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_capabilitiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEM_CAPABILITIES(self):
            return self.getToken(PBXProjParser.SYSTEM_CAPABILITIES, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_system_capabilities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_capabilities" ):
                listener.enterSystem_capabilities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_capabilities" ):
                listener.exitSystem_capabilities(self)




    def system_capabilities(self):

        localctx = PBXProjParser.System_capabilitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_system_capabilities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(PBXProjParser.SYSTEM_CAPABILITIES)
            self.state = 1757
            self.match(PBXProjParser.T__2)
            self.state = 1758
            self.match(PBXProjParser.T__0)
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4398248234240) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 7679) != 0):
                self.state = 1759
                self.key_value()
                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1765
            self.match(PBXProjParser.T__1)
            self.state = 1766
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Current_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_VERSION(self):
            return self.getToken(PBXProjParser.CURRENT_VERSION, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_current_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_version" ):
                listener.enterCurrent_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_version" ):
                listener.exitCurrent_version(self)




    def current_version(self):

        localctx = PBXProjParser.Current_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_current_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.match(PBXProjParser.CURRENT_VERSION)
            self.state = 1769
            self.match(PBXProjParser.T__2)
            self.state = 1770
            self.match(PBXProjParser.REFERENCE)
            self.state = 1771
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Version_group_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION_GROUP_TYPE(self):
            return self.getToken(PBXProjParser.VERSION_GROUP_TYPE, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_version_group_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion_group_type" ):
                listener.enterVersion_group_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion_group_type" ):
                listener.exitVersion_group_type(self)




    def version_group_type(self):

        localctx = PBXProjParser.Version_group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_version_group_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.match(PBXProjParser.VERSION_GROUP_TYPE)
            self.state = 1774
            self.match(PBXProjParser.T__2)
            self.state = 1775
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1776
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSPREFIX(self):
            return self.getToken(PBXProjParser.CLASSPREFIX, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_class_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefix" ):
                listener.enterClass_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefix" ):
                listener.exitClass_prefix(self)




    def class_prefix(self):

        localctx = PBXProjParser.Class_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_class_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.match(PBXProjParser.CLASSPREFIX)
            self.state = 1779
            self.match(PBXProjParser.T__2)
            self.state = 1780
            self.str_number_variable()
            self.state = 1781
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def any_token(self):
            return self.getTypedRuleContext(PBXProjParser.Any_tokenContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string" ):
                listener.enterAny_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string" ):
                listener.exitAny_string(self)




    def any_string(self):

        localctx = PBXProjParser.Any_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_any_string)
        try:
            self.state = 1786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1783
                self.match(PBXProjParser.NON_QUOTED_STRING)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.match(PBXProjParser.QUOTED_STRING)
                pass
            elif token in [8, 9, 12, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                self.any_token()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Str_number_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def VARIABLE(self):
            return self.getToken(PBXProjParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_str_number_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStr_number_variable" ):
                listener.enterStr_number_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStr_number_variable" ):
                listener.exitStr_number_variable(self)




    def str_number_variable(self):

        localctx = PBXProjParser.Str_number_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_str_number_variable)
        try:
            self.state = 1791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 12, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1788
                self.any_string()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1789
                self.match(PBXProjParser.NUMBER)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1790
                self.match(PBXProjParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_tokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE_VERSION(self):
            return self.getToken(PBXProjParser.ARCHIVE_VERSION, 0)

        def CLASSES(self):
            return self.getToken(PBXProjParser.CLASSES, 0)

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def OBJECT_VERSION(self):
            return self.getToken(PBXProjParser.OBJECT_VERSION, 0)

        def OBJECTS(self):
            return self.getToken(PBXProjParser.OBJECTS, 0)

        def ROOT_OBJECT(self):
            return self.getToken(PBXProjParser.ROOT_OBJECT, 0)

        def PBX_AGGREGATE_TARGET(self):
            return self.getToken(PBXProjParser.PBX_AGGREGATE_TARGET, 0)

        def PBX_BUILD_FILE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_FILE, 0)

        def PBX_BUILD_STYLE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_STYLE, 0)

        def PBX_CONTAINER_ITEM_PROXY(self):
            return self.getToken(PBXProjParser.PBX_CONTAINER_ITEM_PROXY, 0)

        def PBX_COPY_FILES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_COPY_FILES_BUILD_PHASE, 0)

        def PBX_FILE_REFERENCE(self):
            return self.getToken(PBXProjParser.PBX_FILE_REFERENCE, 0)

        def PBX_FRAMEWORKS_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_FRAMEWORKS_BUILD_PHASE, 0)

        def PBX_NATIVE_TARGET(self):
            return self.getToken(PBXProjParser.PBX_NATIVE_TARGET, 0)

        def PBX_LEGACY_TARGET(self):
            return self.getToken(PBXProjParser.PBX_LEGACY_TARGET, 0)

        def PBX_PROJECT(self):
            return self.getToken(PBXProjParser.PBX_PROJECT, 0)

        def PBX_REFERENCE_PROXY(self):
            return self.getToken(PBXProjParser.PBX_REFERENCE_PROXY, 0)

        def PBX_RESOURCES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_RESOURCES_BUILD_PHASE, 0)

        def PBX_SHELL_SCRIPT_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SHELL_SCRIPT_BUILD_PHASE, 0)

        def PBX_SOURCES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SOURCES_BUILD_PHASE, 0)

        def PBX_TARGET_DEPENDENCY(self):
            return self.getToken(PBXProjParser.PBX_TARGET_DEPENDENCY, 0)

        def PBX_VARIANT_GROUP(self):
            return self.getToken(PBXProjParser.PBX_VARIANT_GROUP, 0)

        def XC_BUILD_CONFIGURATION(self):
            return self.getToken(PBXProjParser.XC_BUILD_CONFIGURATION, 0)

        def XC_CONFIGURATION_LIST(self):
            return self.getToken(PBXProjParser.XC_CONFIGURATION_LIST, 0)

        def XC_REMOTE_SWIFT_PACKAGE_REFERENCE(self):
            return self.getToken(PBXProjParser.XC_REMOTE_SWIFT_PACKAGE_REFERENCE, 0)

        def XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY(self):
            return self.getToken(PBXProjParser.XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY, 0)

        def XC_VERSION_GROUP(self):
            return self.getToken(PBXProjParser.XC_VERSION_GROUP, 0)

        def FILE_REF(self):
            return self.getToken(PBXProjParser.FILE_REF, 0)

        def PRODUCT_REF(self):
            return self.getToken(PBXProjParser.PRODUCT_REF, 0)

        def CONTAINER_PORTAL(self):
            return self.getToken(PBXProjParser.CONTAINER_PORTAL, 0)

        def PROXY_TYPE(self):
            return self.getToken(PBXProjParser.PROXY_TYPE, 0)

        def REMOTE_GLOBAL_ID_STRING(self):
            return self.getToken(PBXProjParser.REMOTE_GLOBAL_ID_STRING, 0)

        def REMOTE_INFO(self):
            return self.getToken(PBXProjParser.REMOTE_INFO, 0)

        def FILE_ENCODING(self):
            return self.getToken(PBXProjParser.FILE_ENCODING, 0)

        def COMMENTS(self):
            return self.getToken(PBXProjParser.COMMENTS, 0)

        def EXPLICIT_FILE_TYPE(self):
            return self.getToken(PBXProjParser.EXPLICIT_FILE_TYPE, 0)

        def LAST_KNOWN_FILE_TYPE(self):
            return self.getToken(PBXProjParser.LAST_KNOWN_FILE_TYPE, 0)

        def INCLUDE_IN_INDEX(self):
            return self.getToken(PBXProjParser.INCLUDE_IN_INDEX, 0)

        def INDENT_WIDTH(self):
            return self.getToken(PBXProjParser.INDENT_WIDTH, 0)

        def TAB_WIDTH(self):
            return self.getToken(PBXProjParser.TAB_WIDTH, 0)

        def USES_TABS(self):
            return self.getToken(PBXProjParser.USES_TABS, 0)

        def WRAPS_LINES(self):
            return self.getToken(PBXProjParser.WRAPS_LINES, 0)

        def PLATFORM_FILTER(self):
            return self.getToken(PBXProjParser.PLATFORM_FILTER, 0)

        def PLATFORM_FILTERS(self):
            return self.getToken(PBXProjParser.PLATFORM_FILTERS, 0)

        def CHILDREN(self):
            return self.getToken(PBXProjParser.CHILDREN, 0)

        def PRODUCT_INSTALL_PATH(self):
            return self.getToken(PBXProjParser.PRODUCT_INSTALL_PATH, 0)

        def REPOSITORY_URL(self):
            return self.getToken(PBXProjParser.REPOSITORY_URL, 0)

        def REQUIREMENT(self):
            return self.getToken(PBXProjParser.REQUIREMENT, 0)

        def PACKAGE(self):
            return self.getToken(PBXProjParser.PACKAGE, 0)

        def PACKAGE_PRODUCT_DEPENDENCIES(self):
            return self.getToken(PBXProjParser.PACKAGE_PRODUCT_DEPENDENCIES, 0)

        def NAME(self):
            return self.getToken(PBXProjParser.NAME, 0)

        def PATH(self):
            return self.getToken(PBXProjParser.PATH, 0)

        def SOURCE_TREE(self):
            return self.getToken(PBXProjParser.SOURCE_TREE, 0)

        def BUILD_ACTION_MASK(self):
            return self.getToken(PBXProjParser.BUILD_ACTION_MASK, 0)

        def FILES(self):
            return self.getToken(PBXProjParser.FILES, 0)

        def RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING(self):
            return self.getToken(PBXProjParser.RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING, 0)

        def BUILD_CONFIGURATION_LIST(self):
            return self.getToken(PBXProjParser.BUILD_CONFIGURATION_LIST, 0)

        def BUILD_PHASES(self):
            return self.getToken(PBXProjParser.BUILD_PHASES, 0)

        def BUILD_RULES(self):
            return self.getToken(PBXProjParser.BUILD_RULES, 0)

        def BUILD_ARGUMENTS_STRING(self):
            return self.getToken(PBXProjParser.BUILD_ARGUMENTS_STRING, 0)

        def BUILD_TOOL_PATH(self):
            return self.getToken(PBXProjParser.BUILD_TOOL_PATH, 0)

        def BUILD_WORKING_DIRECTORY(self):
            return self.getToken(PBXProjParser.BUILD_WORKING_DIRECTORY, 0)

        def PASS_BUILD_SETTINGS_IN_ENVIRONMENT(self):
            return self.getToken(PBXProjParser.PASS_BUILD_SETTINGS_IN_ENVIRONMENT, 0)

        def DEPENDENCIES(self):
            return self.getToken(PBXProjParser.DEPENDENCIES, 0)

        def PRODUCT_NAME(self):
            return self.getToken(PBXProjParser.PRODUCT_NAME, 0)

        def PRODUCT_REFERENCE(self):
            return self.getToken(PBXProjParser.PRODUCT_REFERENCE, 0)

        def PRODUCT_TYPE(self):
            return self.getToken(PBXProjParser.PRODUCT_TYPE, 0)

        def LINE_ENDING(self):
            return self.getToken(PBXProjParser.LINE_ENDING, 0)

        def XC_LANGUAGE_SPECIFICATION_IDENTIFIER(self):
            return self.getToken(PBXProjParser.XC_LANGUAGE_SPECIFICATION_IDENTIFIER, 0)

        def PLIST_STRUCTURE_DEFINITION_IDENTIFIER(self):
            return self.getToken(PBXProjParser.PLIST_STRUCTURE_DEFINITION_IDENTIFIER, 0)

        def ATTRIBUTES(self):
            return self.getToken(PBXProjParser.ATTRIBUTES, 0)

        def LAST_SWIFT_MIGRATION(self):
            return self.getToken(PBXProjParser.LAST_SWIFT_MIGRATION, 0)

        def DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE(self):
            return self.getToken(PBXProjParser.DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE, 0)

        def LAST_SWIFT_UPDATE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_SWIFT_UPDATE_CHECK, 0)

        def BUILD_INDEPENDENT_TARGETS_IN_PARALLEL(self):
            return self.getToken(PBXProjParser.BUILD_INDEPENDENT_TARGETS_IN_PARALLEL, 0)

        def LAST_TESTING_UPGRADE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_TESTING_UPGRADE_CHECK, 0)

        def LAST_UPGRADE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_UPGRADE_CHECK, 0)

        def ORGANIZATION_NAME(self):
            return self.getToken(PBXProjParser.ORGANIZATION_NAME, 0)

        def TARGET_ATTRIBUTES(self):
            return self.getToken(PBXProjParser.TARGET_ATTRIBUTES, 0)

        def CREATED_ON_TOOLS_VERSION(self):
            return self.getToken(PBXProjParser.CREATED_ON_TOOLS_VERSION, 0)

        def TEST_TARGET_ID(self):
            return self.getToken(PBXProjParser.TEST_TARGET_ID, 0)

        def DEVELOPMENT_TEAM(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_TEAM, 0)

        def DEVELOPMENT_TEAM_NAME(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_TEAM_NAME, 0)

        def PROVISIONING_STYLE(self):
            return self.getToken(PBXProjParser.PROVISIONING_STYLE, 0)

        def COMPATIBILITY_VERSION(self):
            return self.getToken(PBXProjParser.COMPATIBILITY_VERSION, 0)

        def DEVELOPMENT_REGION(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_REGION, 0)

        def HAS_SCANNED_FOR_ENCODINGS(self):
            return self.getToken(PBXProjParser.HAS_SCANNED_FOR_ENCODINGS, 0)

        def KNOWN_REGIONS(self):
            return self.getToken(PBXProjParser.KNOWN_REGIONS, 0)

        def MAIN_GROUP(self):
            return self.getToken(PBXProjParser.MAIN_GROUP, 0)

        def PRODUCT_REF_GROUP(self):
            return self.getToken(PBXProjParser.PRODUCT_REF_GROUP, 0)

        def PACKAGE_REFERENCES(self):
            return self.getToken(PBXProjParser.PACKAGE_REFERENCES, 0)

        def PRODUCT_DIR_PATH(self):
            return self.getToken(PBXProjParser.PRODUCT_DIR_PATH, 0)

        def PROJECT_REFERENCES(self):
            return self.getToken(PBXProjParser.PROJECT_REFERENCES, 0)

        def PROJECT_ROOT(self):
            return self.getToken(PBXProjParser.PROJECT_ROOT, 0)

        def TARGETS(self):
            return self.getToken(PBXProjParser.TARGETS, 0)

        def INPUT_FILE_LIST_PATHS(self):
            return self.getToken(PBXProjParser.INPUT_FILE_LIST_PATHS, 0)

        def INPUT_PATHS(self):
            return self.getToken(PBXProjParser.INPUT_PATHS, 0)

        def OUTPUT_FILE_LIST_PATHS(self):
            return self.getToken(PBXProjParser.OUTPUT_FILE_LIST_PATHS, 0)

        def OUTPUT_PATHS(self):
            return self.getToken(PBXProjParser.OUTPUT_PATHS, 0)

        def SHELL_PATH(self):
            return self.getToken(PBXProjParser.SHELL_PATH, 0)

        def SHELL_SCRIPT(self):
            return self.getToken(PBXProjParser.SHELL_SCRIPT, 0)

        def SHOW_ENV_VARS_IN_LOG(self):
            return self.getToken(PBXProjParser.SHOW_ENV_VARS_IN_LOG, 0)

        def TARGET(self):
            return self.getToken(PBXProjParser.TARGET, 0)

        def TARGET_PROXY(self):
            return self.getToken(PBXProjParser.TARGET_PROXY, 0)

        def FILE_TYPE(self):
            return self.getToken(PBXProjParser.FILE_TYPE, 0)

        def REMOTE_REF(self):
            return self.getToken(PBXProjParser.REMOTE_REF, 0)

        def BASE_CONFIGURATION_REFERENCE(self):
            return self.getToken(PBXProjParser.BASE_CONFIGURATION_REFERENCE, 0)

        def BUILD_SETTINGS(self):
            return self.getToken(PBXProjParser.BUILD_SETTINGS, 0)

        def DST_PATH(self):
            return self.getToken(PBXProjParser.DST_PATH, 0)

        def DST_SUBFOLDER_SPEC(self):
            return self.getToken(PBXProjParser.DST_SUBFOLDER_SPEC, 0)

        def PRODUCT_GROUP(self):
            return self.getToken(PBXProjParser.PRODUCT_GROUP, 0)

        def PROJECT_REF(self):
            return self.getToken(PBXProjParser.PROJECT_REF, 0)

        def BUILD_CONFIGURATIONS(self):
            return self.getToken(PBXProjParser.BUILD_CONFIGURATIONS, 0)

        def DEFAULT_CONFIGURATION_IS_VISIBLE(self):
            return self.getToken(PBXProjParser.DEFAULT_CONFIGURATION_IS_VISIBLE, 0)

        def DEFAULT_CONFIGURATION_NAME(self):
            return self.getToken(PBXProjParser.DEFAULT_CONFIGURATION_NAME, 0)

        def SETTINGS(self):
            return self.getToken(PBXProjParser.SETTINGS, 0)

        def SYSTEM_CAPABILITIES(self):
            return self.getToken(PBXProjParser.SYSTEM_CAPABILITIES, 0)

        def CURRENT_VERSION(self):
            return self.getToken(PBXProjParser.CURRENT_VERSION, 0)

        def VERSION_GROUP_TYPE(self):
            return self.getToken(PBXProjParser.VERSION_GROUP_TYPE, 0)

        def CLASSPREFIX(self):
            return self.getToken(PBXProjParser.CLASSPREFIX, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_any_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_token" ):
                listener.enterAny_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_token" ):
                listener.exitAny_token(self)




    def any_token(self):

        localctx = PBXProjParser.Any_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_any_token)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4398248242432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 511) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





