# Generated from PBXProj.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,166,2092,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,
        5,449,8,5,1,5,3,5,452,8,5,1,5,3,5,455,8,5,1,5,3,5,458,8,5,1,5,3,
        5,461,8,5,1,5,3,5,464,8,5,1,5,3,5,467,8,5,1,5,3,5,470,8,5,1,5,3,
        5,473,8,5,1,5,3,5,476,8,5,1,5,1,5,3,5,480,8,5,1,5,3,5,483,8,5,1,
        5,3,5,486,8,5,1,5,1,5,3,5,490,8,5,1,5,3,5,493,8,5,1,5,3,5,496,8,
        5,1,5,3,5,499,8,5,1,5,3,5,502,8,5,1,5,3,5,505,8,5,1,5,3,5,508,8,
        5,1,5,1,5,1,5,3,5,513,8,5,1,5,3,5,516,8,5,1,5,3,5,519,8,5,1,5,3,
        5,522,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,4,7,533,8,7,11,7,12,
        7,534,1,8,4,8,538,8,8,11,8,12,8,539,1,9,4,9,543,8,9,11,9,12,9,544,
        1,10,4,10,548,8,10,11,10,12,10,549,1,11,4,11,553,8,11,11,11,12,11,
        554,1,12,4,12,558,8,12,11,12,12,12,559,1,13,4,13,563,8,13,11,13,
        12,13,564,1,14,4,14,568,8,14,11,14,12,14,569,1,15,4,15,573,8,15,
        11,15,12,15,574,1,16,4,16,578,8,16,11,16,12,16,579,1,17,4,17,583,
        8,17,11,17,12,17,584,1,18,4,18,588,8,18,11,18,12,18,589,1,19,4,19,
        593,8,19,11,19,12,19,594,1,20,4,20,598,8,20,11,20,12,20,599,1,21,
        4,21,603,8,21,11,21,12,21,604,1,22,4,22,608,8,22,11,22,12,22,609,
        1,23,4,23,613,8,23,11,23,12,23,614,1,24,4,24,618,8,24,11,24,12,24,
        619,1,25,4,25,623,8,25,11,25,12,25,624,1,26,4,26,628,8,26,11,26,
        12,26,629,1,27,4,27,633,8,27,11,27,12,27,634,1,28,4,28,638,8,28,
        11,28,12,28,639,1,29,4,29,643,8,29,11,29,12,29,644,1,30,4,30,648,
        8,30,11,30,12,30,649,1,31,4,31,653,8,31,11,31,12,31,654,1,32,4,32,
        658,8,32,11,32,12,32,659,1,33,4,33,663,8,33,11,33,12,33,664,1,34,
        4,34,668,8,34,11,34,12,34,669,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        3,35,679,8,35,1,35,3,35,682,8,35,1,35,1,35,1,35,3,35,687,8,35,1,
        35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,3,36,697,8,36,1,36,3,36,700,
        8,36,1,36,3,36,703,8,36,1,36,3,36,706,8,36,1,36,3,36,709,8,36,1,
        36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,720,8,37,1,37,1,
        37,1,37,1,37,1,37,3,37,727,8,37,1,37,3,37,730,8,37,1,37,1,37,1,37,
        1,38,1,38,1,38,1,38,1,38,3,38,740,8,38,1,38,3,38,743,8,38,1,38,1,
        38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        40,1,40,1,40,1,40,1,40,1,40,3,40,765,8,40,1,40,1,40,3,40,769,8,40,
        1,40,3,40,772,8,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
        3,41,783,8,41,1,41,3,41,786,8,41,1,41,3,41,789,8,41,1,41,3,41,792,
        8,41,1,41,3,41,795,8,41,1,41,3,41,798,8,41,1,41,3,41,801,8,41,1,
        41,3,41,804,8,41,1,41,3,41,807,8,41,1,41,3,41,810,8,41,1,41,3,41,
        813,8,41,1,41,3,41,816,8,41,1,41,3,41,819,8,41,1,41,3,41,822,8,41,
        1,41,3,41,825,8,41,1,41,3,41,828,8,41,1,41,3,41,831,8,41,1,41,1,
        41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,3,
        45,873,8,45,1,45,3,45,876,8,45,1,45,3,45,879,8,45,1,45,3,45,882,
        8,45,1,45,3,45,885,8,45,1,45,1,45,3,45,889,8,45,1,45,3,45,892,8,
        45,1,45,3,45,895,8,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,
        47,918,8,47,1,47,3,47,921,8,47,1,47,1,47,1,47,3,47,926,8,47,1,47,
        3,47,929,8,47,1,47,1,47,3,47,933,8,47,1,47,1,47,1,47,1,47,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,49,1,49,1,49,1,49,1,49,3,49,960,8,49,1,49,1,49,3,49,964,
        8,49,1,49,3,49,967,8,49,1,49,3,49,970,8,49,1,49,3,49,973,8,49,1,
        49,1,49,3,49,977,8,49,1,49,1,49,3,49,981,8,49,1,49,3,49,984,8,49,
        1,49,3,49,987,8,49,1,49,1,49,3,49,991,8,49,1,49,3,49,994,8,49,1,
        49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1006,8,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,52,1029,8,52,1,52,1,52,1,
        52,3,52,1034,8,52,1,52,3,52,1037,8,52,1,52,3,52,1040,8,52,1,52,3,
        52,1043,8,52,1,52,3,52,1046,8,52,1,52,1,52,1,52,1,52,3,52,1052,8,
        52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,3,55,1089,8,55,1,
        55,3,55,1092,8,55,1,55,3,55,1095,8,55,1,55,3,55,1098,8,55,1,55,3,
        55,1101,8,55,1,55,3,55,1104,8,55,1,55,1,55,1,55,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,3,56,1116,8,56,1,56,1,56,1,56,1,56,1,57,1,57,1,
        57,1,57,1,57,3,57,1127,8,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,
        58,1,58,1,58,1,58,1,58,3,58,1141,8,58,1,58,1,58,1,58,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,1,60,1,61,1,61,1,61,1,61,1,61,3,61,1168,8,61,1,61,1,61,1,61,1,
        61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1181,8,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,
        64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,
        67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,
        70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,
        72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,75,1,
        75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,
        77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,
        80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,
        83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,
        85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,
        88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,
        90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,
        93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,
        96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,
        98,1,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,
        101,1,101,1,101,1,101,5,101,1383,8,101,10,101,12,101,1386,9,101,
        1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,
        1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,
        1,105,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,107,
        1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,110,
        1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,112,1,112,
        1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,
        1,114,1,114,1,115,1,115,1,115,1,115,5,115,1460,8,115,10,115,12,115,
        1463,9,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,117,
        1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,119,1,119,
        1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,121,1,121,1,121,
        1,121,1,121,1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,123,
        1,123,1,124,1,124,1,124,5,124,1511,8,124,10,124,12,124,1514,9,124,
        1,124,1,124,1,125,1,125,1,125,1,125,1,125,1,125,5,125,1524,8,125,
        10,125,12,125,1527,9,125,1,125,3,125,1530,8,125,1,125,1,125,3,125,
        1534,8,125,1,126,1,126,1,126,5,126,1539,8,126,10,126,12,126,1542,
        9,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,128,1,128,1,128,
        1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,
        1,130,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,
        1,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,1,134,1,135,
        1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,1,137,1,137,
        1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,139,1,139,1,139,
        1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,141,1,141,1,141,1,141,
        1,141,1,142,1,142,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,
        1,144,1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,146,
        1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,148,1,148,
        1,148,1,148,1,148,1,149,1,149,1,149,1,149,3,149,1660,8,149,1,149,
        3,149,1663,8,149,1,149,3,149,1666,8,149,1,149,3,149,1669,8,149,1,
        149,3,149,1672,8,149,1,149,3,149,1675,8,149,1,149,3,149,1678,8,149,
        1,149,3,149,1681,8,149,1,149,3,149,1684,8,149,1,149,1,149,1,149,
        1,150,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,1,152,
        1,152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,154,1,154,
        1,154,1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,
        1,156,1,156,1,157,1,157,1,157,1,157,5,157,1728,8,157,10,157,12,157,
        1731,9,157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,3,158,1740,
        8,158,1,158,3,158,1743,8,158,1,158,3,158,1746,8,158,1,158,3,158,
        1749,8,158,1,158,3,158,1752,8,158,1,158,3,158,1755,8,158,1,158,3,
        158,1758,8,158,1,158,3,158,1761,8,158,1,158,1,158,1,158,1,159,1,
        159,1,159,1,159,1,159,1,160,1,160,1,160,1,160,1,160,1,161,1,161,
        1,161,1,161,1,161,1,162,1,162,1,162,1,162,1,162,1,163,1,163,1,163,
        1,163,1,163,1,164,1,164,1,164,1,164,1,164,1,165,1,165,1,165,1,165,
        1,165,1,166,1,166,1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,167,
        1,168,1,168,1,168,1,168,1,168,1,169,1,169,1,169,1,169,1,169,1,170,
        1,170,1,170,1,170,1,170,1,171,1,171,1,171,1,171,1,171,1,172,1,172,
        1,172,1,172,1,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,3,173,1848,8,173,1,174,1,174,1,174,1,174,
        1,174,1,175,1,175,1,175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,
        1,177,1,177,1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,179,
        1,179,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,181,1,181,
        1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,1,183,1,183,1,183,
        1,183,1,183,1,184,1,184,1,184,1,184,1,184,1,185,1,185,1,185,1,185,
        1,185,1,186,1,186,1,186,1,186,1,186,1,187,1,187,1,187,1,187,1,187,
        1,188,1,188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,5,189,1929,
        8,189,10,189,12,189,1932,9,189,1,189,1,189,1,189,1,190,1,190,1,190,
        1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,192,1,192,1,192,1,192,
        1,192,1,193,5,193,1953,8,193,10,193,12,193,1956,9,193,1,194,1,194,
        1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,195,
        1,195,1,195,1,195,1,195,1,196,1,196,1,196,1,196,1,196,1,197,1,197,
        1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
        1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
        1,197,1,197,3,197,2006,8,197,1,197,1,197,5,197,2010,8,197,10,197,
        12,197,2013,9,197,1,197,3,197,2016,8,197,1,197,1,197,1,197,3,197,
        2021,8,197,1,198,1,198,1,198,1,198,1,198,1,199,1,199,1,199,1,199,
        1,199,1,200,1,200,1,200,1,200,1,200,1,201,1,201,1,201,1,201,5,201,
        2042,8,201,10,201,12,201,2045,9,201,1,201,1,201,1,201,1,202,1,202,
        1,202,1,202,5,202,2054,8,202,10,202,12,202,2057,9,202,1,202,1,202,
        1,202,1,203,1,203,1,203,1,203,1,203,1,204,1,204,1,204,1,204,1,204,
        1,205,1,205,1,205,1,205,1,205,1,206,1,206,1,206,1,206,1,206,1,206,
        3,206,2083,8,206,1,207,1,207,1,207,3,207,2088,8,207,1,208,1,208,
        1,208,0,0,209,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
        344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
        376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
        408,410,412,414,416,0,2,2,0,13,13,160,160,8,0,8,9,12,12,14,16,20,
        29,32,37,39,47,49,142,144,157,2054,0,418,1,0,0,0,2,420,1,0,0,0,4,
        428,1,0,0,0,6,433,1,0,0,0,8,439,1,0,0,0,10,444,1,0,0,0,12,526,1,
        0,0,0,14,532,1,0,0,0,16,537,1,0,0,0,18,542,1,0,0,0,20,547,1,0,0,
        0,22,552,1,0,0,0,24,557,1,0,0,0,26,562,1,0,0,0,28,567,1,0,0,0,30,
        572,1,0,0,0,32,577,1,0,0,0,34,582,1,0,0,0,36,587,1,0,0,0,38,592,
        1,0,0,0,40,597,1,0,0,0,42,602,1,0,0,0,44,607,1,0,0,0,46,612,1,0,
        0,0,48,617,1,0,0,0,50,622,1,0,0,0,52,627,1,0,0,0,54,632,1,0,0,0,
        56,637,1,0,0,0,58,642,1,0,0,0,60,647,1,0,0,0,62,652,1,0,0,0,64,657,
        1,0,0,0,66,662,1,0,0,0,68,667,1,0,0,0,70,671,1,0,0,0,72,691,1,0,
        0,0,74,713,1,0,0,0,76,734,1,0,0,0,78,747,1,0,0,0,80,758,1,0,0,0,
        82,777,1,0,0,0,84,835,1,0,0,0,86,844,1,0,0,0,88,856,1,0,0,0,90,866,
        1,0,0,0,92,899,1,0,0,0,94,909,1,0,0,0,96,938,1,0,0,0,98,954,1,0,
        0,0,100,999,1,0,0,0,102,1013,1,0,0,0,104,1023,1,0,0,0,106,1056,1,
        0,0,0,108,1073,1,0,0,0,110,1083,1,0,0,0,112,1108,1,0,0,0,114,1121,
        1,0,0,0,116,1133,1,0,0,0,118,1145,1,0,0,0,120,1154,1,0,0,0,122,1162,
        1,0,0,0,124,1173,1,0,0,0,126,1188,1,0,0,0,128,1193,1,0,0,0,130,1198,
        1,0,0,0,132,1203,1,0,0,0,134,1208,1,0,0,0,136,1213,1,0,0,0,138,1218,
        1,0,0,0,140,1223,1,0,0,0,142,1228,1,0,0,0,144,1233,1,0,0,0,146,1238,
        1,0,0,0,148,1243,1,0,0,0,150,1248,1,0,0,0,152,1253,1,0,0,0,154,1258,
        1,0,0,0,156,1263,1,0,0,0,158,1268,1,0,0,0,160,1273,1,0,0,0,162,1278,
        1,0,0,0,164,1283,1,0,0,0,166,1288,1,0,0,0,168,1293,1,0,0,0,170,1298,
        1,0,0,0,172,1303,1,0,0,0,174,1308,1,0,0,0,176,1313,1,0,0,0,178,1318,
        1,0,0,0,180,1323,1,0,0,0,182,1328,1,0,0,0,184,1333,1,0,0,0,186,1338,
        1,0,0,0,188,1343,1,0,0,0,190,1348,1,0,0,0,192,1353,1,0,0,0,194,1358,
        1,0,0,0,196,1363,1,0,0,0,198,1368,1,0,0,0,200,1373,1,0,0,0,202,1378,
        1,0,0,0,204,1390,1,0,0,0,206,1395,1,0,0,0,208,1400,1,0,0,0,210,1405,
        1,0,0,0,212,1410,1,0,0,0,214,1415,1,0,0,0,216,1420,1,0,0,0,218,1425,
        1,0,0,0,220,1430,1,0,0,0,222,1435,1,0,0,0,224,1440,1,0,0,0,226,1445,
        1,0,0,0,228,1450,1,0,0,0,230,1455,1,0,0,0,232,1467,1,0,0,0,234,1472,
        1,0,0,0,236,1477,1,0,0,0,238,1482,1,0,0,0,240,1487,1,0,0,0,242,1492,
        1,0,0,0,244,1497,1,0,0,0,246,1502,1,0,0,0,248,1507,1,0,0,0,250,1533,
        1,0,0,0,252,1535,1,0,0,0,254,1545,1,0,0,0,256,1550,1,0,0,0,258,1555,
        1,0,0,0,260,1560,1,0,0,0,262,1565,1,0,0,0,264,1570,1,0,0,0,266,1575,
        1,0,0,0,268,1580,1,0,0,0,270,1585,1,0,0,0,272,1590,1,0,0,0,274,1595,
        1,0,0,0,276,1600,1,0,0,0,278,1605,1,0,0,0,280,1610,1,0,0,0,282,1615,
        1,0,0,0,284,1620,1,0,0,0,286,1625,1,0,0,0,288,1630,1,0,0,0,290,1635,
        1,0,0,0,292,1640,1,0,0,0,294,1645,1,0,0,0,296,1650,1,0,0,0,298,1655,
        1,0,0,0,300,1688,1,0,0,0,302,1693,1,0,0,0,304,1698,1,0,0,0,306,1703,
        1,0,0,0,308,1708,1,0,0,0,310,1713,1,0,0,0,312,1718,1,0,0,0,314,1723,
        1,0,0,0,316,1735,1,0,0,0,318,1765,1,0,0,0,320,1770,1,0,0,0,322,1775,
        1,0,0,0,324,1780,1,0,0,0,326,1785,1,0,0,0,328,1790,1,0,0,0,330,1795,
        1,0,0,0,332,1800,1,0,0,0,334,1805,1,0,0,0,336,1810,1,0,0,0,338,1815,
        1,0,0,0,340,1820,1,0,0,0,342,1825,1,0,0,0,344,1830,1,0,0,0,346,1847,
        1,0,0,0,348,1849,1,0,0,0,350,1854,1,0,0,0,352,1859,1,0,0,0,354,1864,
        1,0,0,0,356,1869,1,0,0,0,358,1874,1,0,0,0,360,1879,1,0,0,0,362,1884,
        1,0,0,0,364,1889,1,0,0,0,366,1894,1,0,0,0,368,1899,1,0,0,0,370,1904,
        1,0,0,0,372,1909,1,0,0,0,374,1914,1,0,0,0,376,1919,1,0,0,0,378,1924,
        1,0,0,0,380,1936,1,0,0,0,382,1941,1,0,0,0,384,1946,1,0,0,0,386,1954,
        1,0,0,0,388,1957,1,0,0,0,390,1969,1,0,0,0,392,1974,1,0,0,0,394,2020,
        1,0,0,0,396,2022,1,0,0,0,398,2027,1,0,0,0,400,2032,1,0,0,0,402,2037,
        1,0,0,0,404,2049,1,0,0,0,406,2061,1,0,0,0,408,2066,1,0,0,0,410,2071,
        1,0,0,0,412,2082,1,0,0,0,414,2087,1,0,0,0,416,2089,1,0,0,0,418,419,
        3,2,1,0,419,1,1,0,0,0,420,421,5,1,0,0,421,422,3,4,2,0,422,423,3,
        6,3,0,423,424,3,8,4,0,424,425,3,10,5,0,425,426,3,12,6,0,426,427,
        5,2,0,0,427,3,1,0,0,0,428,429,5,8,0,0,429,430,5,3,0,0,430,431,5,
        13,0,0,431,432,5,4,0,0,432,5,1,0,0,0,433,434,5,9,0,0,434,435,5,3,
        0,0,435,436,5,1,0,0,436,437,5,2,0,0,437,438,5,4,0,0,438,7,1,0,0,
        0,439,440,5,14,0,0,440,441,5,3,0,0,441,442,5,13,0,0,442,443,5,4,
        0,0,443,9,1,0,0,0,444,445,5,15,0,0,445,446,5,3,0,0,446,448,5,1,0,
        0,447,449,3,14,7,0,448,447,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,
        0,450,452,3,16,8,0,451,450,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,
        0,453,455,3,18,9,0,454,453,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,
        0,456,458,3,20,10,0,457,456,1,0,0,0,457,458,1,0,0,0,458,460,1,0,
        0,0,459,461,3,22,11,0,460,459,1,0,0,0,460,461,1,0,0,0,461,463,1,
        0,0,0,462,464,3,24,12,0,463,462,1,0,0,0,463,464,1,0,0,0,464,466,
        1,0,0,0,465,467,3,26,13,0,466,465,1,0,0,0,466,467,1,0,0,0,467,469,
        1,0,0,0,468,470,3,28,14,0,469,468,1,0,0,0,469,470,1,0,0,0,470,472,
        1,0,0,0,471,473,3,30,15,0,472,471,1,0,0,0,472,473,1,0,0,0,473,475,
        1,0,0,0,474,476,3,32,16,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,
        1,0,0,0,477,479,3,34,17,0,478,480,3,36,18,0,479,478,1,0,0,0,479,
        480,1,0,0,0,480,482,1,0,0,0,481,483,3,40,20,0,482,481,1,0,0,0,482,
        483,1,0,0,0,483,485,1,0,0,0,484,486,3,38,19,0,485,484,1,0,0,0,485,
        486,1,0,0,0,486,487,1,0,0,0,487,489,3,42,21,0,488,490,3,44,22,0,
        489,488,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,493,3,46,23,
        0,492,491,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,496,3,48,24,
        0,495,494,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,499,3,50,25,
        0,498,497,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,502,3,52,26,
        0,501,500,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,505,3,54,27,
        0,504,503,1,0,0,0,504,505,1,0,0,0,505,507,1,0,0,0,506,508,3,56,28,
        0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,510,3,58,29,
        0,510,512,3,60,30,0,511,513,3,64,32,0,512,511,1,0,0,0,512,513,1,
        0,0,0,513,515,1,0,0,0,514,516,3,62,31,0,515,514,1,0,0,0,515,516,
        1,0,0,0,516,518,1,0,0,0,517,519,3,66,33,0,518,517,1,0,0,0,518,519,
        1,0,0,0,519,521,1,0,0,0,520,522,3,68,34,0,521,520,1,0,0,0,521,522,
        1,0,0,0,522,523,1,0,0,0,523,524,5,2,0,0,524,525,5,4,0,0,525,11,1,
        0,0,0,526,527,5,16,0,0,527,528,5,3,0,0,528,529,5,158,0,0,529,530,
        5,4,0,0,530,13,1,0,0,0,531,533,3,70,35,0,532,531,1,0,0,0,533,534,
        1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,15,1,0,0,0,536,538,3,
        72,36,0,537,536,1,0,0,0,538,539,1,0,0,0,539,537,1,0,0,0,539,540,
        1,0,0,0,540,17,1,0,0,0,541,543,3,74,37,0,542,541,1,0,0,0,543,544,
        1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,19,1,0,0,0,546,548,3,
        76,38,0,547,546,1,0,0,0,548,549,1,0,0,0,549,547,1,0,0,0,549,550,
        1,0,0,0,550,21,1,0,0,0,551,553,3,78,39,0,552,551,1,0,0,0,553,554,
        1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,23,1,0,0,0,556,558,3,
        80,40,0,557,556,1,0,0,0,558,559,1,0,0,0,559,557,1,0,0,0,559,560,
        1,0,0,0,560,25,1,0,0,0,561,563,3,82,41,0,562,561,1,0,0,0,563,564,
        1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,27,1,0,0,0,566,568,3,
        84,42,0,567,566,1,0,0,0,568,569,1,0,0,0,569,567,1,0,0,0,569,570,
        1,0,0,0,570,29,1,0,0,0,571,573,3,86,43,0,572,571,1,0,0,0,573,574,
        1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,31,1,0,0,0,576,578,3,
        88,44,0,577,576,1,0,0,0,578,579,1,0,0,0,579,577,1,0,0,0,579,580,
        1,0,0,0,580,33,1,0,0,0,581,583,3,90,45,0,582,581,1,0,0,0,583,584,
        1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,35,1,0,0,0,586,588,3,
        92,46,0,587,586,1,0,0,0,588,589,1,0,0,0,589,587,1,0,0,0,589,590,
        1,0,0,0,590,37,1,0,0,0,591,593,3,94,47,0,592,591,1,0,0,0,593,594,
        1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,39,1,0,0,0,596,598,3,
        96,48,0,597,596,1,0,0,0,598,599,1,0,0,0,599,597,1,0,0,0,599,600,
        1,0,0,0,600,41,1,0,0,0,601,603,3,98,49,0,602,601,1,0,0,0,603,604,
        1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,43,1,0,0,0,606,608,3,
        100,50,0,607,606,1,0,0,0,608,609,1,0,0,0,609,607,1,0,0,0,609,610,
        1,0,0,0,610,45,1,0,0,0,611,613,3,102,51,0,612,611,1,0,0,0,613,614,
        1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,47,1,0,0,0,616,618,3,
        104,52,0,617,616,1,0,0,0,618,619,1,0,0,0,619,617,1,0,0,0,619,620,
        1,0,0,0,620,49,1,0,0,0,621,623,3,106,53,0,622,621,1,0,0,0,623,624,
        1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,51,1,0,0,0,626,628,3,
        108,54,0,627,626,1,0,0,0,628,629,1,0,0,0,629,627,1,0,0,0,629,630,
        1,0,0,0,630,53,1,0,0,0,631,633,3,110,55,0,632,631,1,0,0,0,633,634,
        1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,55,1,0,0,0,636,638,3,
        112,56,0,637,636,1,0,0,0,638,639,1,0,0,0,639,637,1,0,0,0,639,640,
        1,0,0,0,640,57,1,0,0,0,641,643,3,114,57,0,642,641,1,0,0,0,643,644,
        1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,59,1,0,0,0,646,648,3,
        116,58,0,647,646,1,0,0,0,648,649,1,0,0,0,649,647,1,0,0,0,649,650,
        1,0,0,0,650,61,1,0,0,0,651,653,3,118,59,0,652,651,1,0,0,0,653,654,
        1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,63,1,0,0,0,656,658,3,
        120,60,0,657,656,1,0,0,0,658,659,1,0,0,0,659,657,1,0,0,0,659,660,
        1,0,0,0,660,65,1,0,0,0,661,663,3,122,61,0,662,661,1,0,0,0,663,664,
        1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,67,1,0,0,0,666,668,3,
        124,62,0,667,666,1,0,0,0,668,669,1,0,0,0,669,667,1,0,0,0,669,670,
        1,0,0,0,670,69,1,0,0,0,671,672,5,158,0,0,672,673,5,3,0,0,673,674,
        5,1,0,0,674,675,3,126,63,0,675,676,3,254,127,0,676,678,3,256,128,
        0,677,679,3,378,189,0,678,677,1,0,0,0,678,679,1,0,0,0,679,681,1,
        0,0,0,680,682,3,198,99,0,681,680,1,0,0,0,681,682,1,0,0,0,682,683,
        1,0,0,0,683,684,3,268,134,0,684,686,3,236,118,0,685,687,3,270,135,
        0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,689,5,2,0,
        0,689,690,5,4,0,0,690,71,1,0,0,0,691,692,5,158,0,0,692,693,5,3,0,
        0,693,694,5,1,0,0,694,696,3,128,64,0,695,697,3,184,92,0,696,695,
        1,0,0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,700,3,218,109,0,699,
        698,1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,703,3,220,110,0,
        702,701,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,706,3,186,93,
        0,705,704,1,0,0,0,705,706,1,0,0,0,706,708,1,0,0,0,707,709,3,402,
        201,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,711,5,
        2,0,0,711,712,5,4,0,0,712,73,1,0,0,0,713,714,5,158,0,0,714,715,5,
        3,0,0,715,716,5,1,0,0,716,717,3,130,65,0,717,719,3,284,142,0,718,
        720,3,286,143,0,719,718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,
        721,722,3,372,186,0,722,723,3,288,144,0,723,724,3,290,145,0,724,
        726,3,292,146,0,725,727,3,294,147,0,726,725,1,0,0,0,726,727,1,0,
        0,0,727,729,1,0,0,0,728,730,3,296,148,0,729,728,1,0,0,0,729,730,
        1,0,0,0,730,731,1,0,0,0,731,732,5,2,0,0,732,733,5,4,0,0,733,75,1,
        0,0,0,734,735,5,158,0,0,735,736,5,3,0,0,736,737,5,1,0,0,737,739,
        3,132,66,0,738,740,3,378,189,0,739,738,1,0,0,0,739,740,1,0,0,0,740,
        742,1,0,0,0,741,743,3,236,118,0,742,741,1,0,0,0,742,743,1,0,0,0,
        743,744,1,0,0,0,744,745,5,2,0,0,745,746,5,4,0,0,746,77,1,0,0,0,747,
        748,5,158,0,0,748,749,5,3,0,0,749,750,5,1,0,0,750,751,3,134,67,0,
        751,752,3,188,94,0,752,753,3,190,95,0,753,754,3,192,96,0,754,755,
        3,194,97,0,755,756,5,2,0,0,756,757,5,4,0,0,757,79,1,0,0,0,758,759,
        5,158,0,0,759,760,5,3,0,0,760,761,5,1,0,0,761,762,3,136,68,0,762,
        764,3,242,121,0,763,765,3,382,191,0,764,763,1,0,0,0,764,765,1,0,
        0,0,765,766,1,0,0,0,766,768,3,384,192,0,767,769,3,244,122,0,768,
        767,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,772,3,236,118,0,
        771,770,1,0,0,0,771,772,1,0,0,0,772,773,1,0,0,0,773,774,3,246,123,
        0,774,775,5,2,0,0,775,776,5,4,0,0,776,81,1,0,0,0,777,778,5,158,0,
        0,778,779,5,3,0,0,779,780,5,1,0,0,780,782,3,138,69,0,781,783,3,198,
        99,0,782,781,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,786,3,196,
        98,0,785,784,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,789,3,200,
        100,0,788,787,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,792,3,
        196,98,0,791,790,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,795,
        3,208,104,0,794,793,1,0,0,0,794,795,1,0,0,0,795,797,1,0,0,0,796,
        798,3,210,105,0,797,796,1,0,0,0,797,798,1,0,0,0,798,800,1,0,0,0,
        799,801,3,206,103,0,800,799,1,0,0,0,800,801,1,0,0,0,801,803,1,0,
        0,0,802,804,3,276,138,0,803,802,1,0,0,0,803,804,1,0,0,0,804,806,
        1,0,0,0,805,807,3,236,118,0,806,805,1,0,0,0,806,807,1,0,0,0,807,
        809,1,0,0,0,808,810,3,238,119,0,809,808,1,0,0,0,809,810,1,0,0,0,
        810,812,1,0,0,0,811,813,3,282,141,0,812,811,1,0,0,0,812,813,1,0,
        0,0,813,815,1,0,0,0,814,816,3,280,140,0,815,814,1,0,0,0,815,816,
        1,0,0,0,816,818,1,0,0,0,817,819,3,240,120,0,818,817,1,0,0,0,818,
        819,1,0,0,0,819,821,1,0,0,0,820,822,3,212,106,0,821,820,1,0,0,0,
        821,822,1,0,0,0,822,824,1,0,0,0,823,825,3,278,139,0,824,823,1,0,
        0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,828,3,214,107,0,827,826,
        1,0,0,0,827,828,1,0,0,0,828,830,1,0,0,0,829,831,3,216,108,0,830,
        829,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,833,5,2,0,0,833,
        834,5,4,0,0,834,83,1,0,0,0,835,836,5,158,0,0,836,837,5,3,0,0,837,
        838,5,1,0,0,838,839,3,140,70,0,839,840,3,390,195,0,840,841,3,368,
        184,0,841,842,5,2,0,0,842,843,5,4,0,0,843,85,1,0,0,0,844,845,5,158,
        0,0,845,846,5,3,0,0,846,847,5,1,0,0,847,848,3,142,71,0,848,849,3,
        392,196,0,849,850,3,202,101,0,850,851,3,204,102,0,851,852,3,238,
        119,0,852,853,3,240,120,0,853,854,5,2,0,0,854,855,5,4,0,0,855,87,
        1,0,0,0,856,857,5,158,0,0,857,858,5,3,0,0,858,859,5,1,0,0,859,860,
        3,144,72,0,860,861,3,242,121,0,861,862,3,244,122,0,862,863,3,246,
        123,0,863,864,5,2,0,0,864,865,5,4,0,0,865,89,1,0,0,0,866,867,5,158,
        0,0,867,868,5,3,0,0,868,869,5,1,0,0,869,870,3,146,73,0,870,872,3,
        222,111,0,871,873,3,198,99,0,872,871,1,0,0,0,872,873,1,0,0,0,873,
        875,1,0,0,0,874,876,3,210,105,0,875,874,1,0,0,0,875,876,1,0,0,0,
        876,878,1,0,0,0,877,879,3,208,104,0,878,877,1,0,0,0,878,879,1,0,
        0,0,879,881,1,0,0,0,880,882,3,236,118,0,881,880,1,0,0,0,881,882,
        1,0,0,0,882,884,1,0,0,0,883,885,3,238,119,0,884,883,1,0,0,0,884,
        885,1,0,0,0,885,886,1,0,0,0,886,888,3,240,120,0,887,889,3,212,106,
        0,888,887,1,0,0,0,888,889,1,0,0,0,889,891,1,0,0,0,890,892,3,214,
        107,0,891,890,1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,895,3,
        216,108,0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,897,
        5,2,0,0,897,898,5,4,0,0,898,91,1,0,0,0,899,900,5,158,0,0,900,901,
        5,3,0,0,901,902,5,1,0,0,902,903,3,148,74,0,903,904,3,242,121,0,904,
        905,3,244,122,0,905,906,3,246,123,0,906,907,5,2,0,0,907,908,5,4,
        0,0,908,93,1,0,0,0,909,910,5,158,0,0,910,911,5,3,0,0,911,912,5,1,
        0,0,912,913,3,150,75,0,913,914,3,254,127,0,914,915,3,256,128,0,915,
        917,3,258,129,0,916,918,3,198,99,0,917,916,1,0,0,0,917,918,1,0,0,
        0,918,920,1,0,0,0,919,921,3,378,189,0,920,919,1,0,0,0,920,921,1,
        0,0,0,921,922,1,0,0,0,922,923,3,268,134,0,923,925,3,236,118,0,924,
        926,3,224,112,0,925,924,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,
        927,929,3,234,117,0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,
        0,0,930,932,3,270,135,0,931,933,3,272,136,0,932,931,1,0,0,0,932,
        933,1,0,0,0,933,934,1,0,0,0,934,935,3,274,137,0,935,936,5,2,0,0,
        936,937,5,4,0,0,937,95,1,0,0,0,938,939,5,158,0,0,939,940,5,3,0,0,
        940,941,5,1,0,0,941,942,3,152,76,0,942,943,3,260,130,0,943,944,3,
        254,127,0,944,945,3,256,128,0,945,946,3,262,131,0,946,947,3,264,
        132,0,947,948,3,268,134,0,948,949,3,236,118,0,949,950,3,266,133,
        0,950,951,3,270,135,0,951,952,5,2,0,0,952,953,5,4,0,0,953,97,1,0,
        0,0,954,955,5,158,0,0,955,956,5,3,0,0,956,957,5,1,0,0,957,959,3,
        154,77,0,958,960,3,298,149,0,959,958,1,0,0,0,959,960,1,0,0,0,960,
        961,1,0,0,0,961,963,3,254,127,0,962,964,3,378,189,0,963,962,1,0,
        0,0,963,964,1,0,0,0,964,966,1,0,0,0,965,967,3,380,190,0,966,965,
        1,0,0,0,966,967,1,0,0,0,967,969,1,0,0,0,968,970,3,328,164,0,969,
        968,1,0,0,0,969,970,1,0,0,0,970,972,1,0,0,0,971,973,3,330,165,0,
        972,971,1,0,0,0,972,973,1,0,0,0,973,974,1,0,0,0,974,976,3,332,166,
        0,975,977,3,334,167,0,976,975,1,0,0,0,976,977,1,0,0,0,977,978,1,
        0,0,0,978,980,3,336,168,0,979,981,3,340,170,0,980,979,1,0,0,0,980,
        981,1,0,0,0,981,983,1,0,0,0,982,984,3,342,171,0,983,982,1,0,0,0,
        983,984,1,0,0,0,984,986,1,0,0,0,985,987,3,338,169,0,986,985,1,0,
        0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,990,3,344,172,0,989,991,
        3,346,173,0,990,989,1,0,0,0,990,991,1,0,0,0,991,993,1,0,0,0,992,
        994,3,348,174,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,
        995,996,3,350,175,0,996,997,5,2,0,0,997,998,5,4,0,0,998,99,1,0,0,
        0,999,1000,5,158,0,0,1000,1001,5,3,0,0,1001,1002,5,1,0,0,1002,1003,
        3,156,78,0,1003,1005,3,372,186,0,1004,1006,3,236,118,0,1005,1004,
        1,0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,1007,1008,3,238,119,
        0,1008,1009,3,374,187,0,1009,1010,3,240,120,0,1010,1011,5,2,0,0,
        1011,1012,5,4,0,0,1012,101,1,0,0,0,1013,1014,5,158,0,0,1014,1015,
        5,3,0,0,1015,1016,5,1,0,0,1016,1017,3,158,79,0,1017,1018,3,242,121,
        0,1018,1019,3,244,122,0,1019,1020,3,246,123,0,1020,1021,5,2,0,0,
        1021,1022,5,4,0,0,1022,103,1,0,0,0,1023,1024,5,158,0,0,1024,1025,
        5,3,0,0,1025,1026,5,1,0,0,1026,1028,3,160,80,0,1027,1029,3,182,91,
        0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,0,0,1030,1031,
        3,242,121,0,1031,1033,3,244,122,0,1032,1034,3,352,176,0,1033,1032,
        1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,1035,1037,3,354,177,
        0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1039,1,0,0,0,1038,1040,
        3,236,118,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1042,1,0,0,
        0,1041,1043,3,356,178,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,
        1045,1,0,0,0,1044,1046,3,358,179,0,1045,1044,1,0,0,0,1045,1046,1,
        0,0,0,1046,1047,1,0,0,0,1047,1048,3,246,123,0,1048,1049,3,360,180,
        0,1049,1051,3,364,182,0,1050,1052,3,366,183,0,1051,1050,1,0,0,0,
        1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1054,5,2,0,0,1054,1055,
        5,4,0,0,1055,105,1,0,0,0,1056,1057,5,158,0,0,1057,1058,5,3,0,0,1058,
        1059,5,1,0,0,1059,1060,3,162,81,0,1060,1061,3,242,121,0,1061,1062,
        3,244,122,0,1062,1063,3,352,176,0,1063,1064,3,354,177,0,1064,1065,
        3,236,118,0,1065,1066,3,356,178,0,1066,1067,3,358,179,0,1067,1068,
        3,246,123,0,1068,1069,3,360,180,0,1069,1070,3,362,181,0,1070,1071,
        5,2,0,0,1071,1072,5,4,0,0,1072,107,1,0,0,0,1073,1074,5,158,0,0,1074,
        1075,5,3,0,0,1075,1076,5,1,0,0,1076,1077,3,164,82,0,1077,1078,3,
        242,121,0,1078,1079,3,244,122,0,1079,1080,3,246,123,0,1080,1081,
        5,2,0,0,1081,1082,5,4,0,0,1082,109,1,0,0,0,1083,1084,5,158,0,0,1084,
        1085,5,3,0,0,1085,1086,5,1,0,0,1086,1088,3,166,83,0,1087,1089,3,
        236,118,0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1091,1,0,0,0,
        1090,1092,3,218,109,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,1094,
        1,0,0,0,1093,1095,3,220,110,0,1094,1093,1,0,0,0,1094,1095,1,0,0,
        0,1095,1097,1,0,0,0,1096,1098,3,186,93,0,1097,1096,1,0,0,0,1097,
        1098,1,0,0,0,1098,1100,1,0,0,0,1099,1101,3,368,184,0,1100,1099,1,
        0,0,0,1100,1101,1,0,0,0,1101,1103,1,0,0,0,1102,1104,3,370,185,0,
        1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1105,1,0,0,0,1105,1106,
        5,2,0,0,1106,1107,5,4,0,0,1107,111,1,0,0,0,1108,1109,5,158,0,0,1109,
        1110,5,3,0,0,1110,1111,5,1,0,0,1111,1112,3,168,84,0,1112,1113,3,
        222,111,0,1113,1115,3,236,118,0,1114,1116,3,238,119,0,1115,1114,
        1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,1118,3,240,120,
        0,1118,1119,5,2,0,0,1119,1120,5,4,0,0,1120,113,1,0,0,0,1121,1122,
        5,158,0,0,1122,1123,5,3,0,0,1123,1124,5,1,0,0,1124,1126,3,170,85,
        0,1125,1127,3,376,188,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,1127,
        1128,1,0,0,0,1128,1129,3,378,189,0,1129,1130,3,236,118,0,1130,1131,
        5,2,0,0,1131,1132,5,4,0,0,1132,115,1,0,0,0,1133,1134,5,158,0,0,1134,
        1135,5,3,0,0,1135,1136,5,1,0,0,1136,1137,3,172,86,0,1137,1138,3,
        396,198,0,1138,1140,3,398,199,0,1139,1141,3,400,200,0,1140,1139,
        1,0,0,0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,1143,5,2,0,0,1143,
        1144,5,4,0,0,1144,117,1,0,0,0,1145,1146,5,158,0,0,1146,1147,5,3,
        0,0,1147,1148,5,1,0,0,1148,1149,3,174,87,0,1149,1150,3,226,113,0,
        1150,1151,3,230,115,0,1151,1152,5,2,0,0,1152,1153,5,4,0,0,1153,119,
        1,0,0,0,1154,1155,5,158,0,0,1155,1156,5,3,0,0,1156,1157,5,1,0,0,
        1157,1158,3,176,88,0,1158,1159,3,228,114,0,1159,1160,5,2,0,0,1160,
        1161,5,4,0,0,1161,121,1,0,0,0,1162,1163,5,158,0,0,1163,1164,5,3,
        0,0,1164,1165,5,1,0,0,1165,1167,3,178,89,0,1166,1168,3,232,116,0,
        1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1169,1,0,0,0,1169,1170,
        3,270,135,0,1170,1171,5,2,0,0,1171,1172,5,4,0,0,1172,123,1,0,0,0,
        1173,1174,5,158,0,0,1174,1175,5,3,0,0,1175,1176,5,1,0,0,1176,1177,
        3,180,90,0,1177,1178,3,222,111,0,1178,1180,3,406,203,0,1179,1181,
        3,236,118,0,1180,1179,1,0,0,0,1180,1181,1,0,0,0,1181,1182,1,0,0,
        0,1182,1183,3,238,119,0,1183,1184,3,240,120,0,1184,1185,3,408,204,
        0,1185,1186,5,2,0,0,1186,1187,5,4,0,0,1187,125,1,0,0,0,1188,1189,
        5,12,0,0,1189,1190,5,3,0,0,1190,1191,5,20,0,0,1191,1192,5,4,0,0,
        1192,127,1,0,0,0,1193,1194,5,12,0,0,1194,1195,5,3,0,0,1195,1196,
        5,21,0,0,1196,1197,5,4,0,0,1197,129,1,0,0,0,1198,1199,5,12,0,0,1199,
        1200,5,3,0,0,1200,1201,5,22,0,0,1201,1202,5,4,0,0,1202,131,1,0,0,
        0,1203,1204,5,12,0,0,1204,1205,5,3,0,0,1205,1206,5,23,0,0,1206,1207,
        5,4,0,0,1207,133,1,0,0,0,1208,1209,5,12,0,0,1209,1210,5,3,0,0,1210,
        1211,5,24,0,0,1211,1212,5,4,0,0,1212,135,1,0,0,0,1213,1214,5,12,
        0,0,1214,1215,5,3,0,0,1215,1216,5,25,0,0,1216,1217,5,4,0,0,1217,
        137,1,0,0,0,1218,1219,5,12,0,0,1219,1220,5,3,0,0,1220,1221,5,26,
        0,0,1221,1222,5,4,0,0,1222,139,1,0,0,0,1223,1224,5,12,0,0,1224,1225,
        5,3,0,0,1225,1226,5,27,0,0,1226,1227,5,4,0,0,1227,141,1,0,0,0,1228,
        1229,5,12,0,0,1229,1230,5,3,0,0,1230,1231,5,28,0,0,1231,1232,5,4,
        0,0,1232,143,1,0,0,0,1233,1234,5,12,0,0,1234,1235,5,3,0,0,1235,1236,
        5,29,0,0,1236,1237,5,4,0,0,1237,145,1,0,0,0,1238,1239,5,12,0,0,1239,
        1240,5,3,0,0,1240,1241,5,30,0,0,1241,1242,5,4,0,0,1242,147,1,0,0,
        0,1243,1244,5,12,0,0,1244,1245,5,3,0,0,1245,1246,5,31,0,0,1246,1247,
        5,4,0,0,1247,149,1,0,0,0,1248,1249,5,12,0,0,1249,1250,5,3,0,0,1250,
        1251,5,32,0,0,1251,1252,5,4,0,0,1252,151,1,0,0,0,1253,1254,5,12,
        0,0,1254,1255,5,3,0,0,1255,1256,5,33,0,0,1256,1257,5,4,0,0,1257,
        153,1,0,0,0,1258,1259,5,12,0,0,1259,1260,5,3,0,0,1260,1261,5,34,
        0,0,1261,1262,5,4,0,0,1262,155,1,0,0,0,1263,1264,5,12,0,0,1264,1265,
        5,3,0,0,1265,1266,5,35,0,0,1266,1267,5,4,0,0,1267,157,1,0,0,0,1268,
        1269,5,12,0,0,1269,1270,5,3,0,0,1270,1271,5,36,0,0,1271,1272,5,4,
        0,0,1272,159,1,0,0,0,1273,1274,5,12,0,0,1274,1275,5,3,0,0,1275,1276,
        5,37,0,0,1276,1277,5,4,0,0,1277,161,1,0,0,0,1278,1279,5,12,0,0,1279,
        1280,5,3,0,0,1280,1281,5,38,0,0,1281,1282,5,4,0,0,1282,163,1,0,0,
        0,1283,1284,5,12,0,0,1284,1285,5,3,0,0,1285,1286,5,39,0,0,1286,1287,
        5,4,0,0,1287,165,1,0,0,0,1288,1289,5,12,0,0,1289,1290,5,3,0,0,1290,
        1291,5,40,0,0,1291,1292,5,4,0,0,1292,167,1,0,0,0,1293,1294,5,12,
        0,0,1294,1295,5,3,0,0,1295,1296,5,41,0,0,1296,1297,5,4,0,0,1297,
        169,1,0,0,0,1298,1299,5,12,0,0,1299,1300,5,3,0,0,1300,1301,5,42,
        0,0,1301,1302,5,4,0,0,1302,171,1,0,0,0,1303,1304,5,12,0,0,1304,1305,
        5,3,0,0,1305,1306,5,43,0,0,1306,1307,5,4,0,0,1307,173,1,0,0,0,1308,
        1309,5,12,0,0,1309,1310,5,3,0,0,1310,1311,5,44,0,0,1311,1312,5,4,
        0,0,1312,175,1,0,0,0,1313,1314,5,12,0,0,1314,1315,5,3,0,0,1315,1316,
        5,45,0,0,1316,1317,5,4,0,0,1317,177,1,0,0,0,1318,1319,5,12,0,0,1319,
        1320,5,3,0,0,1320,1321,5,46,0,0,1321,1322,5,4,0,0,1322,179,1,0,0,
        0,1323,1324,5,12,0,0,1324,1325,5,3,0,0,1325,1326,5,47,0,0,1326,1327,
        5,4,0,0,1327,181,1,0,0,0,1328,1329,5,48,0,0,1329,1330,5,3,0,0,1330,
        1331,5,13,0,0,1331,1332,5,4,0,0,1332,183,1,0,0,0,1333,1334,5,49,
        0,0,1334,1335,5,3,0,0,1335,1336,5,158,0,0,1336,1337,5,4,0,0,1337,
        185,1,0,0,0,1338,1339,5,50,0,0,1339,1340,5,3,0,0,1340,1341,5,158,
        0,0,1341,1342,5,4,0,0,1342,187,1,0,0,0,1343,1344,5,51,0,0,1344,1345,
        5,3,0,0,1345,1346,5,158,0,0,1346,1347,5,4,0,0,1347,189,1,0,0,0,1348,
        1349,5,52,0,0,1349,1350,5,3,0,0,1350,1351,5,13,0,0,1351,1352,5,4,
        0,0,1352,191,1,0,0,0,1353,1354,5,53,0,0,1354,1355,5,3,0,0,1355,1356,
        5,158,0,0,1356,1357,5,4,0,0,1357,193,1,0,0,0,1358,1359,5,54,0,0,
        1359,1360,5,3,0,0,1360,1361,3,414,207,0,1361,1362,5,4,0,0,1362,195,
        1,0,0,0,1363,1364,5,55,0,0,1364,1365,5,3,0,0,1365,1366,5,13,0,0,
        1366,1367,5,4,0,0,1367,197,1,0,0,0,1368,1369,5,56,0,0,1369,1370,
        5,3,0,0,1370,1371,3,414,207,0,1371,1372,5,4,0,0,1372,199,1,0,0,0,
        1373,1374,5,57,0,0,1374,1375,5,3,0,0,1375,1376,3,414,207,0,1376,
        1377,5,4,0,0,1377,201,1,0,0,0,1378,1379,5,58,0,0,1379,1380,5,3,0,
        0,1380,1384,5,1,0,0,1381,1383,3,394,197,0,1382,1381,1,0,0,0,1383,
        1386,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,0,1385,1387,1,0,0,
        0,1386,1384,1,0,0,0,1387,1388,5,2,0,0,1388,1389,5,4,0,0,1389,203,
        1,0,0,0,1390,1391,5,59,0,0,1391,1392,5,3,0,0,1392,1393,3,250,125,
        0,1393,1394,5,4,0,0,1394,205,1,0,0,0,1395,1396,5,60,0,0,1396,1397,
        5,3,0,0,1397,1398,3,414,207,0,1398,1399,5,4,0,0,1399,207,1,0,0,0,
        1400,1401,5,61,0,0,1401,1402,5,3,0,0,1402,1403,5,13,0,0,1403,1404,
        5,4,0,0,1404,209,1,0,0,0,1405,1406,5,62,0,0,1406,1407,5,3,0,0,1407,
        1408,5,13,0,0,1408,1409,5,4,0,0,1409,211,1,0,0,0,1410,1411,5,63,
        0,0,1411,1412,5,3,0,0,1412,1413,5,13,0,0,1413,1414,5,4,0,0,1414,
        213,1,0,0,0,1415,1416,5,64,0,0,1416,1417,5,3,0,0,1417,1418,5,13,
        0,0,1418,1419,5,4,0,0,1419,215,1,0,0,0,1420,1421,5,65,0,0,1421,1422,
        5,3,0,0,1422,1423,5,13,0,0,1423,1424,5,4,0,0,1424,217,1,0,0,0,1425,
        1426,5,66,0,0,1426,1427,5,3,0,0,1427,1428,3,412,206,0,1428,1429,
        5,4,0,0,1429,219,1,0,0,0,1430,1431,5,67,0,0,1431,1432,5,3,0,0,1432,
        1433,3,250,125,0,1433,1434,5,4,0,0,1434,221,1,0,0,0,1435,1436,5,
        68,0,0,1436,1437,5,3,0,0,1437,1438,3,248,124,0,1438,1439,5,4,0,0,
        1439,223,1,0,0,0,1440,1441,5,69,0,0,1441,1442,5,3,0,0,1442,1443,
        3,412,206,0,1443,1444,5,4,0,0,1444,225,1,0,0,0,1445,1446,5,70,0,
        0,1446,1447,5,3,0,0,1447,1448,5,159,0,0,1448,1449,5,4,0,0,1449,227,
        1,0,0,0,1450,1451,5,71,0,0,1451,1452,5,3,0,0,1452,1453,3,412,206,
        0,1453,1454,5,4,0,0,1454,229,1,0,0,0,1455,1456,5,72,0,0,1456,1457,
        5,3,0,0,1457,1461,5,1,0,0,1458,1460,3,394,197,0,1459,1458,1,0,0,
        0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,1464,
        1,0,0,0,1463,1461,1,0,0,0,1464,1465,5,2,0,0,1465,1466,5,4,0,0,1466,
        231,1,0,0,0,1467,1468,5,73,0,0,1468,1469,5,3,0,0,1469,1470,5,158,
        0,0,1470,1471,5,4,0,0,1471,233,1,0,0,0,1472,1473,5,74,0,0,1473,1474,
        5,3,0,0,1474,1475,3,248,124,0,1475,1476,5,4,0,0,1476,235,1,0,0,0,
        1477,1478,5,75,0,0,1478,1479,5,3,0,0,1479,1480,3,412,206,0,1480,
        1481,5,4,0,0,1481,237,1,0,0,0,1482,1483,5,76,0,0,1483,1484,5,3,0,
        0,1484,1485,3,414,207,0,1485,1486,5,4,0,0,1486,239,1,0,0,0,1487,
        1488,5,77,0,0,1488,1489,5,3,0,0,1489,1490,3,412,206,0,1490,1491,
        5,4,0,0,1491,241,1,0,0,0,1492,1493,5,78,0,0,1493,1494,5,3,0,0,1494,
        1495,5,13,0,0,1495,1496,5,4,0,0,1496,243,1,0,0,0,1497,1498,5,79,
        0,0,1498,1499,5,3,0,0,1499,1500,3,248,124,0,1500,1501,5,4,0,0,1501,
        245,1,0,0,0,1502,1503,5,80,0,0,1503,1504,5,3,0,0,1504,1505,5,13,
        0,0,1505,1506,5,4,0,0,1506,247,1,0,0,0,1507,1512,5,5,0,0,1508,1509,
        5,158,0,0,1509,1511,5,6,0,0,1510,1508,1,0,0,0,1511,1514,1,0,0,0,
        1512,1510,1,0,0,0,1512,1513,1,0,0,0,1513,1515,1,0,0,0,1514,1512,
        1,0,0,0,1515,1516,5,7,0,0,1516,249,1,0,0,0,1517,1518,5,5,0,0,1518,
        1534,5,7,0,0,1519,1520,5,5,0,0,1520,1525,3,414,207,0,1521,1522,5,
        6,0,0,1522,1524,3,414,207,0,1523,1521,1,0,0,0,1524,1527,1,0,0,0,
        1525,1523,1,0,0,0,1525,1526,1,0,0,0,1526,1529,1,0,0,0,1527,1525,
        1,0,0,0,1528,1530,5,6,0,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,1530,
        1531,1,0,0,0,1531,1532,5,7,0,0,1532,1534,1,0,0,0,1533,1517,1,0,0,
        0,1533,1519,1,0,0,0,1534,251,1,0,0,0,1535,1540,5,5,0,0,1536,1537,
        5,160,0,0,1537,1539,5,6,0,0,1538,1536,1,0,0,0,1539,1542,1,0,0,0,
        1540,1538,1,0,0,0,1540,1541,1,0,0,0,1541,1543,1,0,0,0,1542,1540,
        1,0,0,0,1543,1544,5,7,0,0,1544,253,1,0,0,0,1545,1546,5,81,0,0,1546,
        1547,5,3,0,0,1547,1548,5,158,0,0,1548,1549,5,4,0,0,1549,255,1,0,
        0,0,1550,1551,5,82,0,0,1551,1552,5,3,0,0,1552,1553,3,248,124,0,1553,
        1554,5,4,0,0,1554,257,1,0,0,0,1555,1556,5,83,0,0,1556,1557,5,3,0,
        0,1557,1558,3,248,124,0,1558,1559,5,4,0,0,1559,259,1,0,0,0,1560,
        1561,5,84,0,0,1561,1562,5,3,0,0,1562,1563,3,412,206,0,1563,1564,
        5,4,0,0,1564,261,1,0,0,0,1565,1566,5,85,0,0,1566,1567,5,3,0,0,1567,
        1568,3,412,206,0,1568,1569,5,4,0,0,1569,263,1,0,0,0,1570,1571,5,
        86,0,0,1571,1572,5,3,0,0,1572,1573,3,412,206,0,1573,1574,5,4,0,0,
        1574,265,1,0,0,0,1575,1576,5,87,0,0,1576,1577,5,3,0,0,1577,1578,
        5,13,0,0,1578,1579,5,4,0,0,1579,267,1,0,0,0,1580,1581,5,88,0,0,1581,
        1582,5,3,0,0,1582,1583,3,248,124,0,1583,1584,5,4,0,0,1584,269,1,
        0,0,0,1585,1586,5,89,0,0,1586,1587,5,3,0,0,1587,1588,3,414,207,0,
        1588,1589,5,4,0,0,1589,271,1,0,0,0,1590,1591,5,90,0,0,1591,1592,
        5,3,0,0,1592,1593,5,158,0,0,1593,1594,5,4,0,0,1594,273,1,0,0,0,1595,
        1596,5,91,0,0,1596,1597,5,3,0,0,1597,1598,5,159,0,0,1598,1599,5,
        4,0,0,1599,275,1,0,0,0,1600,1601,5,92,0,0,1601,1602,5,3,0,0,1602,
        1603,5,13,0,0,1603,1604,5,4,0,0,1604,277,1,0,0,0,1605,1606,5,93,
        0,0,1606,1607,5,3,0,0,1607,1608,3,414,207,0,1608,1609,5,4,0,0,1609,
        279,1,0,0,0,1610,1611,5,94,0,0,1611,1612,5,3,0,0,1612,1613,3,414,
        207,0,1613,1614,5,4,0,0,1614,281,1,0,0,0,1615,1616,5,95,0,0,1616,
        1617,5,3,0,0,1617,1618,5,13,0,0,1618,1619,5,4,0,0,1619,283,1,0,0,
        0,1620,1621,5,96,0,0,1621,1622,5,3,0,0,1622,1623,3,412,206,0,1623,
        1624,5,4,0,0,1624,285,1,0,0,0,1625,1626,5,97,0,0,1626,1627,5,3,0,
        0,1627,1628,3,412,206,0,1628,1629,5,4,0,0,1629,287,1,0,0,0,1630,
        1631,5,98,0,0,1631,1632,5,3,0,0,1632,1633,3,250,125,0,1633,1634,
        5,4,0,0,1634,289,1,0,0,0,1635,1636,5,99,0,0,1636,1637,5,3,0,0,1637,
        1638,5,13,0,0,1638,1639,5,4,0,0,1639,291,1,0,0,0,1640,1641,5,100,
        0,0,1641,1642,5,3,0,0,1642,1643,3,250,125,0,1643,1644,5,4,0,0,1644,
        293,1,0,0,0,1645,1646,5,101,0,0,1646,1647,5,3,0,0,1647,1648,5,13,
        0,0,1648,1649,5,4,0,0,1649,295,1,0,0,0,1650,1651,5,102,0,0,1651,
        1652,5,3,0,0,1652,1653,3,412,206,0,1653,1654,5,4,0,0,1654,297,1,
        0,0,0,1655,1656,5,103,0,0,1656,1657,5,3,0,0,1657,1659,5,1,0,0,1658,
        1660,3,306,153,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1662,1,
        0,0,0,1661,1663,3,410,205,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,
        1663,1665,1,0,0,0,1664,1666,3,302,151,0,1665,1664,1,0,0,0,1665,1666,
        1,0,0,0,1666,1668,1,0,0,0,1667,1669,3,300,150,0,1668,1667,1,0,0,
        0,1668,1669,1,0,0,0,1669,1671,1,0,0,0,1670,1672,3,304,152,0,1671,
        1670,1,0,0,0,1671,1672,1,0,0,0,1672,1674,1,0,0,0,1673,1675,3,308,
        154,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,1677,1,0,0,0,1676,
        1678,3,310,155,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1680,1,
        0,0,0,1679,1681,3,312,156,0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,
        1681,1683,1,0,0,0,1682,1684,3,314,157,0,1683,1682,1,0,0,0,1683,1684,
        1,0,0,0,1684,1685,1,0,0,0,1685,1686,5,2,0,0,1686,1687,5,4,0,0,1687,
        299,1,0,0,0,1688,1689,5,104,0,0,1689,1690,5,3,0,0,1690,1691,5,13,
        0,0,1691,1692,5,4,0,0,1692,301,1,0,0,0,1693,1694,5,105,0,0,1694,
        1695,5,3,0,0,1695,1696,5,160,0,0,1696,1697,5,4,0,0,1697,303,1,0,
        0,0,1698,1699,5,106,0,0,1699,1700,5,3,0,0,1700,1701,5,13,0,0,1701,
        1702,5,4,0,0,1702,305,1,0,0,0,1703,1704,5,107,0,0,1704,1705,5,3,
        0,0,1705,1706,7,0,0,0,1706,1707,5,4,0,0,1707,307,1,0,0,0,1708,1709,
        5,108,0,0,1709,1710,5,3,0,0,1710,1711,5,13,0,0,1711,1712,5,4,0,0,
        1712,309,1,0,0,0,1713,1714,5,109,0,0,1714,1715,5,3,0,0,1715,1716,
        5,13,0,0,1716,1717,5,4,0,0,1717,311,1,0,0,0,1718,1719,5,110,0,0,
        1719,1720,5,3,0,0,1720,1721,3,414,207,0,1721,1722,5,4,0,0,1722,313,
        1,0,0,0,1723,1724,5,111,0,0,1724,1725,5,3,0,0,1725,1729,5,1,0,0,
        1726,1728,3,316,158,0,1727,1726,1,0,0,0,1728,1731,1,0,0,0,1729,1727,
        1,0,0,0,1729,1730,1,0,0,0,1730,1732,1,0,0,0,1731,1729,1,0,0,0,1732,
        1733,5,2,0,0,1733,1734,5,4,0,0,1734,315,1,0,0,0,1735,1736,5,158,
        0,0,1736,1737,5,3,0,0,1737,1739,5,1,0,0,1738,1740,3,318,159,0,1739,
        1738,1,0,0,0,1739,1740,1,0,0,0,1740,1742,1,0,0,0,1741,1743,3,320,
        160,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1745,1,0,0,0,1744,
        1746,3,322,161,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1748,1,
        0,0,0,1747,1749,3,324,162,0,1748,1747,1,0,0,0,1748,1749,1,0,0,0,
        1749,1751,1,0,0,0,1750,1752,3,300,150,0,1751,1750,1,0,0,0,1751,1752,
        1,0,0,0,1752,1754,1,0,0,0,1753,1755,3,326,163,0,1754,1753,1,0,0,
        0,1754,1755,1,0,0,0,1755,1757,1,0,0,0,1756,1758,3,404,202,0,1757,
        1756,1,0,0,0,1757,1758,1,0,0,0,1758,1760,1,0,0,0,1759,1761,3,320,
        160,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,1762,1,0,0,0,1762,
        1763,5,2,0,0,1763,1764,5,4,0,0,1764,317,1,0,0,0,1765,1766,5,112,
        0,0,1766,1767,5,3,0,0,1767,1768,5,160,0,0,1768,1769,5,4,0,0,1769,
        319,1,0,0,0,1770,1771,5,113,0,0,1771,1772,5,3,0,0,1772,1773,5,158,
        0,0,1773,1774,5,4,0,0,1774,321,1,0,0,0,1775,1776,5,114,0,0,1776,
        1777,5,3,0,0,1777,1778,3,412,206,0,1778,1779,5,4,0,0,1779,323,1,
        0,0,0,1780,1781,5,115,0,0,1781,1782,5,3,0,0,1782,1783,3,412,206,
        0,1783,1784,5,4,0,0,1784,325,1,0,0,0,1785,1786,5,116,0,0,1786,1787,
        5,3,0,0,1787,1788,5,160,0,0,1788,1789,5,4,0,0,1789,327,1,0,0,0,1790,
        1791,5,117,0,0,1791,1792,5,3,0,0,1792,1793,5,159,0,0,1793,1794,5,
        4,0,0,1794,329,1,0,0,0,1795,1796,5,118,0,0,1796,1797,5,3,0,0,1797,
        1798,5,160,0,0,1798,1799,5,4,0,0,1799,331,1,0,0,0,1800,1801,5,119,
        0,0,1801,1802,5,3,0,0,1802,1803,5,13,0,0,1803,1804,5,4,0,0,1804,
        333,1,0,0,0,1805,1806,5,120,0,0,1806,1807,5,3,0,0,1807,1808,3,250,
        125,0,1808,1809,5,4,0,0,1809,335,1,0,0,0,1810,1811,5,121,0,0,1811,
        1812,5,3,0,0,1812,1813,5,158,0,0,1813,1814,5,4,0,0,1814,337,1,0,
        0,0,1815,1816,5,122,0,0,1816,1817,5,3,0,0,1817,1818,5,158,0,0,1818,
        1819,5,4,0,0,1819,339,1,0,0,0,1820,1821,5,123,0,0,1821,1822,5,3,
        0,0,1822,1823,3,248,124,0,1823,1824,5,4,0,0,1824,341,1,0,0,0,1825,
        1826,5,124,0,0,1826,1827,5,3,0,0,1827,1828,5,13,0,0,1828,1829,5,
        4,0,0,1829,343,1,0,0,0,1830,1831,5,125,0,0,1831,1832,5,3,0,0,1832,
        1833,3,412,206,0,1833,1834,5,4,0,0,1834,345,1,0,0,0,1835,1836,5,
        126,0,0,1836,1837,5,3,0,0,1837,1838,3,414,207,0,1838,1839,5,4,0,
        0,1839,1848,1,0,0,0,1840,1841,5,126,0,0,1841,1842,5,3,0,0,1842,1843,
        5,5,0,0,1843,1844,3,386,193,0,1844,1845,5,7,0,0,1845,1846,5,4,0,
        0,1846,1848,1,0,0,0,1847,1835,1,0,0,0,1847,1840,1,0,0,0,1848,347,
        1,0,0,0,1849,1850,5,127,0,0,1850,1851,5,3,0,0,1851,1852,3,412,206,
        0,1852,1853,5,4,0,0,1853,349,1,0,0,0,1854,1855,5,128,0,0,1855,1856,
        5,3,0,0,1856,1857,3,248,124,0,1857,1858,5,4,0,0,1858,351,1,0,0,0,
        1859,1860,5,129,0,0,1860,1861,5,3,0,0,1861,1862,3,250,125,0,1862,
        1863,5,4,0,0,1863,353,1,0,0,0,1864,1865,5,130,0,0,1865,1866,5,3,
        0,0,1866,1867,3,250,125,0,1867,1868,5,4,0,0,1868,355,1,0,0,0,1869,
        1870,5,131,0,0,1870,1871,5,3,0,0,1871,1872,3,250,125,0,1872,1873,
        5,4,0,0,1873,357,1,0,0,0,1874,1875,5,132,0,0,1875,1876,5,3,0,0,1876,
        1877,3,250,125,0,1877,1878,5,4,0,0,1878,359,1,0,0,0,1879,1880,5,
        133,0,0,1880,1881,5,3,0,0,1881,1882,3,412,206,0,1882,1883,5,4,0,
        0,1883,361,1,0,0,0,1884,1885,5,134,0,0,1885,1886,5,3,0,0,1886,1887,
        5,159,0,0,1887,1888,5,4,0,0,1888,363,1,0,0,0,1889,1890,5,135,0,0,
        1890,1891,5,3,0,0,1891,1892,3,412,206,0,1892,1893,5,4,0,0,1893,365,
        1,0,0,0,1894,1895,5,136,0,0,1895,1896,5,3,0,0,1896,1897,5,13,0,0,
        1897,1898,5,4,0,0,1898,367,1,0,0,0,1899,1900,5,137,0,0,1900,1901,
        5,3,0,0,1901,1902,5,158,0,0,1902,1903,5,4,0,0,1903,369,1,0,0,0,1904,
        1905,5,138,0,0,1905,1906,5,3,0,0,1906,1907,5,158,0,0,1907,1908,5,
        4,0,0,1908,371,1,0,0,0,1909,1910,5,139,0,0,1910,1911,5,3,0,0,1911,
        1912,3,414,207,0,1912,1913,5,4,0,0,1913,373,1,0,0,0,1914,1915,5,
        140,0,0,1915,1916,5,3,0,0,1916,1917,5,158,0,0,1917,1918,5,4,0,0,
        1918,375,1,0,0,0,1919,1920,5,141,0,0,1920,1921,5,3,0,0,1921,1922,
        5,158,0,0,1922,1923,5,4,0,0,1923,377,1,0,0,0,1924,1925,5,142,0,0,
        1925,1926,5,3,0,0,1926,1930,5,1,0,0,1927,1929,3,394,197,0,1928,1927,
        1,0,0,0,1929,1932,1,0,0,0,1930,1928,1,0,0,0,1930,1931,1,0,0,0,1931,
        1933,1,0,0,0,1932,1930,1,0,0,0,1933,1934,5,2,0,0,1934,1935,5,4,0,
        0,1935,379,1,0,0,0,1936,1937,5,143,0,0,1937,1938,5,3,0,0,1938,1939,
        3,248,124,0,1939,1940,5,4,0,0,1940,381,1,0,0,0,1941,1942,5,144,0,
        0,1942,1943,5,3,0,0,1943,1944,3,412,206,0,1944,1945,5,4,0,0,1945,
        383,1,0,0,0,1946,1947,5,145,0,0,1947,1948,5,3,0,0,1948,1949,5,13,
        0,0,1949,1950,5,4,0,0,1950,385,1,0,0,0,1951,1953,3,388,194,0,1952,
        1951,1,0,0,0,1953,1956,1,0,0,0,1954,1952,1,0,0,0,1954,1955,1,0,0,
        0,1955,387,1,0,0,0,1956,1954,1,0,0,0,1957,1958,5,1,0,0,1958,1959,
        5,146,0,0,1959,1960,5,3,0,0,1960,1961,5,158,0,0,1961,1962,5,4,0,
        0,1962,1963,5,147,0,0,1963,1964,5,3,0,0,1964,1965,5,158,0,0,1965,
        1966,5,4,0,0,1966,1967,5,2,0,0,1967,1968,5,6,0,0,1968,389,1,0,0,
        0,1969,1970,5,155,0,0,1970,1971,5,3,0,0,1971,1972,3,250,125,0,1972,
        1973,5,4,0,0,1973,391,1,0,0,0,1974,1975,5,156,0,0,1975,1976,5,3,
        0,0,1976,1977,3,248,124,0,1977,1978,5,4,0,0,1978,393,1,0,0,0,1979,
        1980,3,414,207,0,1980,1981,5,3,0,0,1981,1982,3,414,207,0,1982,1983,
        5,4,0,0,1983,2021,1,0,0,0,1984,1985,3,414,207,0,1985,1986,5,3,0,
        0,1986,1987,5,13,0,0,1987,1988,5,4,0,0,1988,2021,1,0,0,0,1989,1990,
        3,414,207,0,1990,1991,5,3,0,0,1991,1992,5,162,0,0,1992,1993,5,4,
        0,0,1993,2021,1,0,0,0,1994,1995,3,414,207,0,1995,1996,5,3,0,0,1996,
        1997,5,1,0,0,1997,1998,3,394,197,0,1998,1999,5,2,0,0,1999,2000,5,
        4,0,0,2000,2021,1,0,0,0,2001,2002,3,414,207,0,2002,2003,5,3,0,0,
        2003,2005,5,5,0,0,2004,2006,3,414,207,0,2005,2004,1,0,0,0,2005,2006,
        1,0,0,0,2006,2011,1,0,0,0,2007,2008,5,6,0,0,2008,2010,3,414,207,
        0,2009,2007,1,0,0,0,2010,2013,1,0,0,0,2011,2009,1,0,0,0,2011,2012,
        1,0,0,0,2012,2015,1,0,0,0,2013,2011,1,0,0,0,2014,2016,5,6,0,0,2015,
        2014,1,0,0,0,2015,2016,1,0,0,0,2016,2017,1,0,0,0,2017,2018,5,7,0,
        0,2018,2019,5,4,0,0,2019,2021,1,0,0,0,2020,1979,1,0,0,0,2020,1984,
        1,0,0,0,2020,1989,1,0,0,0,2020,1994,1,0,0,0,2020,2001,1,0,0,0,2021,
        395,1,0,0,0,2022,2023,5,148,0,0,2023,2024,5,3,0,0,2024,2025,3,248,
        124,0,2025,2026,5,4,0,0,2026,397,1,0,0,0,2027,2028,5,149,0,0,2028,
        2029,5,3,0,0,2029,2030,5,13,0,0,2030,2031,5,4,0,0,2031,399,1,0,0,
        0,2032,2033,5,150,0,0,2033,2034,5,3,0,0,2034,2035,3,412,206,0,2035,
        2036,5,4,0,0,2036,401,1,0,0,0,2037,2038,5,151,0,0,2038,2039,5,3,
        0,0,2039,2043,5,1,0,0,2040,2042,3,394,197,0,2041,2040,1,0,0,0,2042,
        2045,1,0,0,0,2043,2041,1,0,0,0,2043,2044,1,0,0,0,2044,2046,1,0,0,
        0,2045,2043,1,0,0,0,2046,2047,5,2,0,0,2047,2048,5,4,0,0,2048,403,
        1,0,0,0,2049,2050,5,152,0,0,2050,2051,5,3,0,0,2051,2055,5,1,0,0,
        2052,2054,3,394,197,0,2053,2052,1,0,0,0,2054,2057,1,0,0,0,2055,2053,
        1,0,0,0,2055,2056,1,0,0,0,2056,2058,1,0,0,0,2057,2055,1,0,0,0,2058,
        2059,5,2,0,0,2059,2060,5,4,0,0,2060,405,1,0,0,0,2061,2062,5,153,
        0,0,2062,2063,5,3,0,0,2063,2064,5,158,0,0,2064,2065,5,4,0,0,2065,
        407,1,0,0,0,2066,2067,5,154,0,0,2067,2068,5,3,0,0,2068,2069,5,160,
        0,0,2069,2070,5,4,0,0,2070,409,1,0,0,0,2071,2072,5,157,0,0,2072,
        2073,5,3,0,0,2073,2074,3,414,207,0,2074,2075,5,4,0,0,2075,411,1,
        0,0,0,2076,2083,5,160,0,0,2077,2083,5,159,0,0,2078,2083,5,18,0,0,
        2079,2083,5,10,0,0,2080,2083,5,11,0,0,2081,2083,3,416,208,0,2082,
        2076,1,0,0,0,2082,2077,1,0,0,0,2082,2078,1,0,0,0,2082,2079,1,0,0,
        0,2082,2080,1,0,0,0,2082,2081,1,0,0,0,2083,413,1,0,0,0,2084,2088,
        3,412,206,0,2085,2088,5,13,0,0,2086,2088,5,161,0,0,2087,2084,1,0,
        0,0,2087,2085,1,0,0,0,2087,2086,1,0,0,0,2088,415,1,0,0,0,2089,2090,
        7,1,0,0,2090,417,1,0,0,0,164,448,451,454,457,460,463,466,469,472,
        475,479,482,485,489,492,495,498,501,504,507,512,515,518,521,534,
        539,544,549,554,559,564,569,574,579,584,589,594,599,604,609,614,
        619,624,629,634,639,644,649,654,659,664,669,678,681,686,696,699,
        702,705,708,719,726,729,739,742,764,768,771,782,785,788,791,794,
        797,800,803,806,809,812,815,818,821,824,827,830,872,875,878,881,
        884,888,891,894,917,920,925,928,932,959,963,966,969,972,976,980,
        983,986,990,993,1005,1028,1033,1036,1039,1042,1045,1051,1088,1091,
        1094,1097,1100,1103,1115,1126,1140,1167,1180,1384,1461,1512,1525,
        1529,1533,1540,1659,1662,1665,1668,1671,1674,1677,1680,1683,1729,
        1739,1742,1745,1748,1751,1754,1757,1760,1847,1930,1954,2005,2011,
        2015,2020,2043,2055,2082,2087
    ]

class PBXProjParser ( Parser ):

    grammarFileName = "PBXProj.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'='", "';'", "'('", "','", 
                     "')'", "'archiveVersion'", "'classes'", "'-'", "'.'", 
                     "'isa'", "<INVALID>", "'objectVersion'", "'objects'", 
                     "'rootObject'", "'/'", "'_'", "'$'", "'PBXAggregateTarget'", 
                     "'PBXBuildFile'", "'PBXBuildRule'", "'PBXBuildStyle'", 
                     "'PBXContainerItemProxy'", "'PBXCopyFilesBuildPhase'", 
                     "'PBXFileReference'", "'PBXFileSystemSynchronizedBuildFileExceptionSet'", 
                     "'PBXFileSystemSynchronizedRootGroup'", "'PBXFrameworksBuildPhase'", 
                     "'PBXGroup'", "'PBXHeadersBuildPhase'", "'PBXNativeTarget'", 
                     "'PBXLegacyTarget'", "'PBXProject'", "'PBXReferenceProxy'", 
                     "<INVALID>", "'PBXShellScriptBuildPhase'", "'PBXShellBuildPhase'", 
                     "'PBXSourcesBuildPhase'", "'PBXTargetDependency'", 
                     "'PBXVariantGroup'", "'XCBuildConfiguration'", "'XCConfigurationList'", 
                     "'XCRemoteSwiftPackageReference'", "'XCLocalSwiftPackageReference'", 
                     "'XCSwiftPackageProductDependency'", "'XCVersionGroup'", 
                     "'alwaysOutOfDate'", "'fileRef'", "'productRef'", "'containerPortal'", 
                     "'proxyType'", "'remoteGlobalIDString'", "'remoteInfo'", 
                     "'fileEncoding'", "'comments'", "'explicitFileType'", 
                     "'explicitFileTypes'", "'explicitFolders'", "'lastKnownFileType'", 
                     "'includeInIndex'", "'indentWidth'", "'tabWidth'", 
                     "'usesTabs'", "'wrapsLines'", "'platformFilter'", "'platformFilters'", 
                     "'children'", "'productInstallPath'", "'repositoryURL'", 
                     "'relativePath'", "'requirement'", "'package'", "'packageProductDependencies'", 
                     "'name'", "'path'", "'sourceTree'", "'buildActionMask'", 
                     "'files'", "'runOnlyForDeploymentPostprocessing'", 
                     "'buildConfigurationList'", "'buildPhases'", "'buildRules'", 
                     "'buildArgumentsString'", "'buildToolPath'", "'buildWorkingDirectory'", 
                     "'passBuildSettingsInEnvironment'", "'dependencies'", 
                     "'productName'", "'productReference'", "'productType'", 
                     "'lineEnding'", "'xcLanguageSpecificationIdentifier'", 
                     "'plistStructureDefinitionIdentifier'", "'refType'", 
                     "'compilerSpec'", "'filePatterns'", "'inputFiles'", 
                     "'isEditable'", "'outputFiles'", "'runOncePerArchitecture'", 
                     "'script'", "'attributes'", "'LastSwiftMigration'", 
                     "'DefaultBuildSystemTypeForWorkspace'", "'LastSwiftUpdateCheck'", 
                     "'BuildIndependentTargetsInParallel'", "'LastTestingUpgradeCheck'", 
                     "'LastUpgradeCheck'", "'ORGANIZATIONNAME'", "'TargetAttributes'", 
                     "'CreatedOnToolsVersion'", "'TestTargetID'", "'DevelopmentTeam'", 
                     "'DevelopmentTeamName'", "'ProvisioningStyle'", "'compatibilityVersion'", 
                     "'developmentRegion'", "'hasScannedForEncodings'", 
                     "'knownRegions'", "'mainGroup'", "'productRefGroup'", 
                     "'packageReferences'", "'preferredProjectObjectVersion'", 
                     "'projectDirPath'", "'projectReferences'", "'projectRoot'", 
                     "'targets'", "'inputFileListPaths'", "'inputPaths'", 
                     "'outputFileListPaths'", "'outputPaths'", "'shellPath'", 
                     "'shell'", "'shellScript'", "'showEnvVarsInLog'", "'target'", 
                     "'targetProxy'", "'fileType'", "'remoteRef'", "'baseConfigurationReference'", 
                     "'buildSettings'", "'buildStyles'", "'dstPath'", "'dstSubfolderSpec'", 
                     "'ProductGroup'", "'ProjectRef'", "'buildConfigurations'", 
                     "'defaultConfigurationIsVisible'", "'defaultConfigurationName'", 
                     "'settings'", "'SystemCapabilities'", "'currentVersion'", 
                     "'versionGroupType'", "'membershipExceptions'", "'exceptions'", 
                     "'CLASSPREFIX'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "ARCHIVE_VERSION", "CLASSES", "DASH", "DOT", "ISA", 
                      "NUMBER", "OBJECT_VERSION", "OBJECTS", "ROOT_OBJECT", 
                      "SLASH", "UNDERSCORE", "DOLLAR", "PBX_AGGREGATE_TARGET", 
                      "PBX_BUILD_FILE", "PBX_BUILD_RULE", "PBX_BUILD_STYLE", 
                      "PBX_CONTAINER_ITEM_PROXY", "PBX_COPY_FILES_BUILD_PHASE", 
                      "PBX_FILE_REFERENCE", "PBX_FILE_SYSTEM_SYNCHRONIZED_BUILD_FILE_EXCEPTION_SET", 
                      "PBX_FILE_SYSTEM_SYNCHRONIZED_ROOT_GROUP", "PBX_FRAMEWORKS_BUILD_PHASE", 
                      "PBX_GROUP", "PBX_HEADERS_BUILD_PHASE", "PBX_NATIVE_TARGET", 
                      "PBX_LEGACY_TARGET", "PBX_PROJECT", "PBX_REFERENCE_PROXY", 
                      "PBX_RESOURCES_BUILD_PHASE", "PBX_SHELL_SCRIPT_BUILD_PHASE", 
                      "PBX_SHELL_BUILD_PHASE", "PBX_SOURCES_BUILD_PHASE", 
                      "PBX_TARGET_DEPENDENCY", "PBX_VARIANT_GROUP", "XC_BUILD_CONFIGURATION", 
                      "XC_CONFIGURATION_LIST", "XC_REMOTE_SWIFT_PACKAGE_REFERENCE", 
                      "XC_LOCAL_SWIFT_PACKAGE_REFERENCE", "XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY", 
                      "XC_VERSION_GROUP", "ALWAYS_OUT_OF_DATE", "FILE_REF", 
                      "PRODUCT_REF", "CONTAINER_PORTAL", "PROXY_TYPE", "REMOTE_GLOBAL_ID_STRING", 
                      "REMOTE_INFO", "FILE_ENCODING", "COMMENTS", "EXPLICIT_FILE_TYPE", 
                      "EXPLICIT_FILE_TYPES", "EXPLICIT_FOLDERS", "LAST_KNOWN_FILE_TYPE", 
                      "INCLUDE_IN_INDEX", "INDENT_WIDTH", "TAB_WIDTH", "USES_TABS", 
                      "WRAPS_LINES", "PLATFORM_FILTER", "PLATFORM_FILTERS", 
                      "CHILDREN", "PRODUCT_INSTALL_PATH", "REPOSITORY_URL", 
                      "RELATIVE_PATH", "REQUIREMENT", "PACKAGE", "PACKAGE_PRODUCT_DEPENDENCIES", 
                      "NAME", "PATH", "SOURCE_TREE", "BUILD_ACTION_MASK", 
                      "FILES", "RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING", 
                      "BUILD_CONFIGURATION_LIST", "BUILD_PHASES", "BUILD_RULES", 
                      "BUILD_ARGUMENTS_STRING", "BUILD_TOOL_PATH", "BUILD_WORKING_DIRECTORY", 
                      "PASS_BUILD_SETTINGS_IN_ENVIRONMENT", "DEPENDENCIES", 
                      "PRODUCT_NAME", "PRODUCT_REFERENCE", "PRODUCT_TYPE", 
                      "LINE_ENDING", "XC_LANGUAGE_SPECIFICATION_IDENTIFIER", 
                      "PLIST_STRUCTURE_DEFINITION_IDENTIFIER", "REF_TYPE", 
                      "COMPILER_SPEC", "FILE_PATTERNS", "INPUT_FILES", "IS_EDITABLE", 
                      "OUTPUT_FILES", "RUN_ONCE_PER_ARCH", "SCRIPT", "ATTRIBUTES", 
                      "LAST_SWIFT_MIGRATION", "DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE", 
                      "LAST_SWIFT_UPDATE_CHECK", "BUILD_INDEPENDENT_TARGETS_IN_PARALLEL", 
                      "LAST_TESTING_UPGRADE_CHECK", "LAST_UPGRADE_CHECK", 
                      "ORGANIZATION_NAME", "TARGET_ATTRIBUTES", "CREATED_ON_TOOLS_VERSION", 
                      "TEST_TARGET_ID", "DEVELOPMENT_TEAM", "DEVELOPMENT_TEAM_NAME", 
                      "PROVISIONING_STYLE", "COMPATIBILITY_VERSION", "DEVELOPMENT_REGION", 
                      "HAS_SCANNED_FOR_ENCODINGS", "KNOWN_REGIONS", "MAIN_GROUP", 
                      "PRODUCT_REF_GROUP", "PACKAGE_REFERENCES", "PREFERRED_PROJECT_OBJECT_VERSION", 
                      "PRODUCT_DIR_PATH", "PROJECT_REFERENCES", "PROJECT_ROOT", 
                      "TARGETS", "INPUT_FILE_LIST_PATHS", "INPUT_PATHS", 
                      "OUTPUT_FILE_LIST_PATHS", "OUTPUT_PATHS", "SHELL_PATH", 
                      "SHELL", "SHELL_SCRIPT", "SHOW_ENV_VARS_IN_LOG", "TARGET", 
                      "TARGET_PROXY", "FILE_TYPE", "REMOTE_REF", "BASE_CONFIGURATION_REFERENCE", 
                      "BUILD_SETTINGS", "BUILD_STYLES", "DST_PATH", "DST_SUBFOLDER_SPEC", 
                      "PRODUCT_GROUP", "PROJECT_REF", "BUILD_CONFIGURATIONS", 
                      "DEFAULT_CONFIGURATION_IS_VISIBLE", "DEFAULT_CONFIGURATION_NAME", 
                      "SETTINGS", "SYSTEM_CAPABILITIES", "CURRENT_VERSION", 
                      "VERSION_GROUP_TYPE", "MEMBERSHIP_EXCEPTIONS", "EXCEPTIONS", 
                      "CLASSPREFIX", "REFERENCE", "QUOTED_STRING", "NON_QUOTED_STRING", 
                      "VARIABLE", "ALPHA_NUMERIC", "ALPHA_NUMERIC_CAP", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_start = 0
    RULE_root_element = 1
    RULE_archive_version = 2
    RULE_classes = 3
    RULE_object_version = 4
    RULE_objects = 5
    RULE_root_object = 6
    RULE_pbx_aggregate_target_section = 7
    RULE_pbx_build_file_section = 8
    RULE_pbx_build_rule_section = 9
    RULE_pbx_build_style_section = 10
    RULE_pbx_container_item_proxy_section = 11
    RULE_pbx_copy_files_build_phase_section = 12
    RULE_pbx_file_reference_section = 13
    RULE_pbx_file_system_synchronized_build_file_exception_set_section = 14
    RULE_pbx_file_system_synchronized_root_group_section = 15
    RULE_pbx_frameworks_build_phase_section = 16
    RULE_pbx_group_section = 17
    RULE_pbx_headers_build_phase_section = 18
    RULE_pbx_native_target_section = 19
    RULE_pbx_legacy_target_section = 20
    RULE_pbx_project_section = 21
    RULE_pbx_reference_proxy_section = 22
    RULE_pbx_resources_build_phase_section = 23
    RULE_pbx_shell_script_build_phase_section = 24
    RULE_pbx_shell_build_phase_section = 25
    RULE_pbx_sources_build_phase_section = 26
    RULE_pbx_target_dependency_section = 27
    RULE_pbx_variant_group_section = 28
    RULE_xc_build_configuration_section = 29
    RULE_xc_configuration_list_section = 30
    RULE_xc_remote_swift_package_reference_section = 31
    RULE_xc_local_swift_package_reference_section = 32
    RULE_xc_swift_package_product_dependency_section = 33
    RULE_xc_version_group_section = 34
    RULE_pbx_aggregate_target = 35
    RULE_pbx_build_file = 36
    RULE_pbx_build_rule = 37
    RULE_pbx_build_style = 38
    RULE_pbx_container_item_proxy = 39
    RULE_pbx_copy_files_build_phase = 40
    RULE_pbx_file_reference = 41
    RULE_pbx_file_system_synchronized_build_file_exception_set = 42
    RULE_pbx_file_system_synchronized_root_group = 43
    RULE_pbx_frameworks_build_phase = 44
    RULE_pbx_group = 45
    RULE_pbx_headers_build_phase = 46
    RULE_pbx_native_target = 47
    RULE_pbx_legacy_target = 48
    RULE_pbx_project = 49
    RULE_pbx_reference_proxy = 50
    RULE_pbx_resources_build_phase = 51
    RULE_pbx_shell_script_build_phase = 52
    RULE_pbx_shell_build_phase = 53
    RULE_pbx_sources_build_phase = 54
    RULE_pbx_target_dependency = 55
    RULE_pbx_variant_group = 56
    RULE_xc_build_configuration = 57
    RULE_xc_configuration_list = 58
    RULE_xc_remote_swift_package_reference = 59
    RULE_xc_local_swift_pacakge_reference = 60
    RULE_xc_swift_package_product_dependency = 61
    RULE_xc_version_group = 62
    RULE_isa_pbx_aggregate_target = 63
    RULE_isa_pbx_build_file = 64
    RULE_isa_pbx_build_rule = 65
    RULE_isa_pbx_build_style = 66
    RULE_isa_pbx_container_item_proxy = 67
    RULE_isa_pbx_copy_files_build_phase = 68
    RULE_isa_pbx_file_reference = 69
    RULE_isa_pbx_file_system_synchronized_build_file_exception_set = 70
    RULE_isa_pbx_file_system_synchronized_root_group = 71
    RULE_isa_pbx_frameworks_build_phase = 72
    RULE_isa_pbx_group = 73
    RULE_isa_pbx_header_build_phase = 74
    RULE_isa_pbx_native_target = 75
    RULE_isa_pbx_legacy_target = 76
    RULE_isa_pbx_project = 77
    RULE_isa_pbx_reference_proxy = 78
    RULE_isa_pbx_resources_build_phase = 79
    RULE_isa_pbx_shell_script_build_phase = 80
    RULE_isa_pbx_shell_build_phase = 81
    RULE_isa_pbx_sources_build_phase = 82
    RULE_isa_pbx_target_dependency = 83
    RULE_isa_pbx_variant_group = 84
    RULE_isa_xc_build_configuration = 85
    RULE_isa_xc_configuration_list = 86
    RULE_isa_xc_remote_swift_package_reference = 87
    RULE_isa_xc_local_swift_package_reference = 88
    RULE_isa_xc_swift_package_product_dependency = 89
    RULE_isa_xc_version_group = 90
    RULE_always_out_of_date = 91
    RULE_file_ref = 92
    RULE_product_ref = 93
    RULE_container_portal = 94
    RULE_proxy_type = 95
    RULE_remote_global_id_string = 96
    RULE_remote_info = 97
    RULE_file_encoding = 98
    RULE_comments = 99
    RULE_explicit_file_type = 100
    RULE_explicit_file_types = 101
    RULE_explicit_folders = 102
    RULE_last_known_file_type = 103
    RULE_include_in_index = 104
    RULE_indent_width = 105
    RULE_tab_width = 106
    RULE_uses_tabs = 107
    RULE_wraps_lines = 108
    RULE_platform_filter = 109
    RULE_platform_filters = 110
    RULE_children = 111
    RULE_product_install_path = 112
    RULE_repository_url = 113
    RULE_relative_path = 114
    RULE_requirement = 115
    RULE_xc_package = 116
    RULE_package_product_dependencies = 117
    RULE_name = 118
    RULE_path = 119
    RULE_source_tree = 120
    RULE_build_action_mask = 121
    RULE_files = 122
    RULE_run_only_for_deployment_postprocessing = 123
    RULE_reference_list = 124
    RULE_any_string_list = 125
    RULE_non_quoted_strings_list = 126
    RULE_build_configuration_list = 127
    RULE_build_phases = 128
    RULE_build_rules = 129
    RULE_build_arguments_string = 130
    RULE_build_tool_path = 131
    RULE_build_working_directory = 132
    RULE_pass_build_settings_in_environment = 133
    RULE_dependencies = 134
    RULE_product_name = 135
    RULE_product_reference = 136
    RULE_product_type = 137
    RULE_line_ending = 138
    RULE_xc_language_specification_identifier = 139
    RULE_plist_structure_definition_identifier = 140
    RULE_ref_type = 141
    RULE_compiler_spec = 142
    RULE_file_patterns = 143
    RULE_input_files = 144
    RULE_is_editable = 145
    RULE_output_files = 146
    RULE_run_once_per_arch = 147
    RULE_script = 148
    RULE_attributes = 149
    RULE_last_swift_migration = 150
    RULE_default_build_system_type_for_workspace = 151
    RULE_last_swift_update_check = 152
    RULE_build_targets_in_parallel = 153
    RULE_last_testing_upgrade_check = 154
    RULE_last_upgrade_check = 155
    RULE_organization_name = 156
    RULE_target_attributes = 157
    RULE_target_attribute = 158
    RULE_created_on_tools_version = 159
    RULE_test_target_id = 160
    RULE_development_team = 161
    RULE_development_team_name = 162
    RULE_provisioning_style = 163
    RULE_compatibility_version = 164
    RULE_development_region = 165
    RULE_has_scanned_for_encodings = 166
    RULE_known_regions = 167
    RULE_main_group = 168
    RULE_product_ref_group = 169
    RULE_package_references = 170
    RULE_preferred_project_object_version = 171
    RULE_project_dir_path = 172
    RULE_project_references = 173
    RULE_project_root = 174
    RULE_targets = 175
    RULE_input_file_list_paths = 176
    RULE_input_paths = 177
    RULE_output_file_list_paths = 178
    RULE_output_paths = 179
    RULE_shell_path = 180
    RULE_shell = 181
    RULE_shell_script = 182
    RULE_show_env_vars_in_log = 183
    RULE_target = 184
    RULE_target_proxy = 185
    RULE_file_type = 186
    RULE_remote_ref = 187
    RULE_base_configuration_reference = 188
    RULE_build_settings = 189
    RULE_build_styles = 190
    RULE_dst_path = 191
    RULE_dst_subfolder_spec = 192
    RULE_project_references_list = 193
    RULE_project_references_list_element = 194
    RULE_membership_exceptions = 195
    RULE_exceptions = 196
    RULE_key_value = 197
    RULE_build_configurations = 198
    RULE_default_configuration_is_visible = 199
    RULE_default_configuration_name = 200
    RULE_settings = 201
    RULE_system_capabilities = 202
    RULE_current_version = 203
    RULE_version_group_type = 204
    RULE_class_prefix = 205
    RULE_any_string = 206
    RULE_str_number_variable = 207
    RULE_any_token = 208

    ruleNames =  [ "start", "root_element", "archive_version", "classes", 
                   "object_version", "objects", "root_object", "pbx_aggregate_target_section", 
                   "pbx_build_file_section", "pbx_build_rule_section", "pbx_build_style_section", 
                   "pbx_container_item_proxy_section", "pbx_copy_files_build_phase_section", 
                   "pbx_file_reference_section", "pbx_file_system_synchronized_build_file_exception_set_section", 
                   "pbx_file_system_synchronized_root_group_section", "pbx_frameworks_build_phase_section", 
                   "pbx_group_section", "pbx_headers_build_phase_section", 
                   "pbx_native_target_section", "pbx_legacy_target_section", 
                   "pbx_project_section", "pbx_reference_proxy_section", 
                   "pbx_resources_build_phase_section", "pbx_shell_script_build_phase_section", 
                   "pbx_shell_build_phase_section", "pbx_sources_build_phase_section", 
                   "pbx_target_dependency_section", "pbx_variant_group_section", 
                   "xc_build_configuration_section", "xc_configuration_list_section", 
                   "xc_remote_swift_package_reference_section", "xc_local_swift_package_reference_section", 
                   "xc_swift_package_product_dependency_section", "xc_version_group_section", 
                   "pbx_aggregate_target", "pbx_build_file", "pbx_build_rule", 
                   "pbx_build_style", "pbx_container_item_proxy", "pbx_copy_files_build_phase", 
                   "pbx_file_reference", "pbx_file_system_synchronized_build_file_exception_set", 
                   "pbx_file_system_synchronized_root_group", "pbx_frameworks_build_phase", 
                   "pbx_group", "pbx_headers_build_phase", "pbx_native_target", 
                   "pbx_legacy_target", "pbx_project", "pbx_reference_proxy", 
                   "pbx_resources_build_phase", "pbx_shell_script_build_phase", 
                   "pbx_shell_build_phase", "pbx_sources_build_phase", "pbx_target_dependency", 
                   "pbx_variant_group", "xc_build_configuration", "xc_configuration_list", 
                   "xc_remote_swift_package_reference", "xc_local_swift_pacakge_reference", 
                   "xc_swift_package_product_dependency", "xc_version_group", 
                   "isa_pbx_aggregate_target", "isa_pbx_build_file", "isa_pbx_build_rule", 
                   "isa_pbx_build_style", "isa_pbx_container_item_proxy", 
                   "isa_pbx_copy_files_build_phase", "isa_pbx_file_reference", 
                   "isa_pbx_file_system_synchronized_build_file_exception_set", 
                   "isa_pbx_file_system_synchronized_root_group", "isa_pbx_frameworks_build_phase", 
                   "isa_pbx_group", "isa_pbx_header_build_phase", "isa_pbx_native_target", 
                   "isa_pbx_legacy_target", "isa_pbx_project", "isa_pbx_reference_proxy", 
                   "isa_pbx_resources_build_phase", "isa_pbx_shell_script_build_phase", 
                   "isa_pbx_shell_build_phase", "isa_pbx_sources_build_phase", 
                   "isa_pbx_target_dependency", "isa_pbx_variant_group", 
                   "isa_xc_build_configuration", "isa_xc_configuration_list", 
                   "isa_xc_remote_swift_package_reference", "isa_xc_local_swift_package_reference", 
                   "isa_xc_swift_package_product_dependency", "isa_xc_version_group", 
                   "always_out_of_date", "file_ref", "product_ref", "container_portal", 
                   "proxy_type", "remote_global_id_string", "remote_info", 
                   "file_encoding", "comments", "explicit_file_type", "explicit_file_types", 
                   "explicit_folders", "last_known_file_type", "include_in_index", 
                   "indent_width", "tab_width", "uses_tabs", "wraps_lines", 
                   "platform_filter", "platform_filters", "children", "product_install_path", 
                   "repository_url", "relative_path", "requirement", "xc_package", 
                   "package_product_dependencies", "name", "path", "source_tree", 
                   "build_action_mask", "files", "run_only_for_deployment_postprocessing", 
                   "reference_list", "any_string_list", "non_quoted_strings_list", 
                   "build_configuration_list", "build_phases", "build_rules", 
                   "build_arguments_string", "build_tool_path", "build_working_directory", 
                   "pass_build_settings_in_environment", "dependencies", 
                   "product_name", "product_reference", "product_type", 
                   "line_ending", "xc_language_specification_identifier", 
                   "plist_structure_definition_identifier", "ref_type", 
                   "compiler_spec", "file_patterns", "input_files", "is_editable", 
                   "output_files", "run_once_per_arch", "script", "attributes", 
                   "last_swift_migration", "default_build_system_type_for_workspace", 
                   "last_swift_update_check", "build_targets_in_parallel", 
                   "last_testing_upgrade_check", "last_upgrade_check", "organization_name", 
                   "target_attributes", "target_attribute", "created_on_tools_version", 
                   "test_target_id", "development_team", "development_team_name", 
                   "provisioning_style", "compatibility_version", "development_region", 
                   "has_scanned_for_encodings", "known_regions", "main_group", 
                   "product_ref_group", "package_references", "preferred_project_object_version", 
                   "project_dir_path", "project_references", "project_root", 
                   "targets", "input_file_list_paths", "input_paths", "output_file_list_paths", 
                   "output_paths", "shell_path", "shell", "shell_script", 
                   "show_env_vars_in_log", "target", "target_proxy", "file_type", 
                   "remote_ref", "base_configuration_reference", "build_settings", 
                   "build_styles", "dst_path", "dst_subfolder_spec", "project_references_list", 
                   "project_references_list_element", "membership_exceptions", 
                   "exceptions", "key_value", "build_configurations", "default_configuration_is_visible", 
                   "default_configuration_name", "settings", "system_capabilities", 
                   "current_version", "version_group_type", "class_prefix", 
                   "any_string", "str_number_variable", "any_token" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    ARCHIVE_VERSION=8
    CLASSES=9
    DASH=10
    DOT=11
    ISA=12
    NUMBER=13
    OBJECT_VERSION=14
    OBJECTS=15
    ROOT_OBJECT=16
    SLASH=17
    UNDERSCORE=18
    DOLLAR=19
    PBX_AGGREGATE_TARGET=20
    PBX_BUILD_FILE=21
    PBX_BUILD_RULE=22
    PBX_BUILD_STYLE=23
    PBX_CONTAINER_ITEM_PROXY=24
    PBX_COPY_FILES_BUILD_PHASE=25
    PBX_FILE_REFERENCE=26
    PBX_FILE_SYSTEM_SYNCHRONIZED_BUILD_FILE_EXCEPTION_SET=27
    PBX_FILE_SYSTEM_SYNCHRONIZED_ROOT_GROUP=28
    PBX_FRAMEWORKS_BUILD_PHASE=29
    PBX_GROUP=30
    PBX_HEADERS_BUILD_PHASE=31
    PBX_NATIVE_TARGET=32
    PBX_LEGACY_TARGET=33
    PBX_PROJECT=34
    PBX_REFERENCE_PROXY=35
    PBX_RESOURCES_BUILD_PHASE=36
    PBX_SHELL_SCRIPT_BUILD_PHASE=37
    PBX_SHELL_BUILD_PHASE=38
    PBX_SOURCES_BUILD_PHASE=39
    PBX_TARGET_DEPENDENCY=40
    PBX_VARIANT_GROUP=41
    XC_BUILD_CONFIGURATION=42
    XC_CONFIGURATION_LIST=43
    XC_REMOTE_SWIFT_PACKAGE_REFERENCE=44
    XC_LOCAL_SWIFT_PACKAGE_REFERENCE=45
    XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY=46
    XC_VERSION_GROUP=47
    ALWAYS_OUT_OF_DATE=48
    FILE_REF=49
    PRODUCT_REF=50
    CONTAINER_PORTAL=51
    PROXY_TYPE=52
    REMOTE_GLOBAL_ID_STRING=53
    REMOTE_INFO=54
    FILE_ENCODING=55
    COMMENTS=56
    EXPLICIT_FILE_TYPE=57
    EXPLICIT_FILE_TYPES=58
    EXPLICIT_FOLDERS=59
    LAST_KNOWN_FILE_TYPE=60
    INCLUDE_IN_INDEX=61
    INDENT_WIDTH=62
    TAB_WIDTH=63
    USES_TABS=64
    WRAPS_LINES=65
    PLATFORM_FILTER=66
    PLATFORM_FILTERS=67
    CHILDREN=68
    PRODUCT_INSTALL_PATH=69
    REPOSITORY_URL=70
    RELATIVE_PATH=71
    REQUIREMENT=72
    PACKAGE=73
    PACKAGE_PRODUCT_DEPENDENCIES=74
    NAME=75
    PATH=76
    SOURCE_TREE=77
    BUILD_ACTION_MASK=78
    FILES=79
    RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING=80
    BUILD_CONFIGURATION_LIST=81
    BUILD_PHASES=82
    BUILD_RULES=83
    BUILD_ARGUMENTS_STRING=84
    BUILD_TOOL_PATH=85
    BUILD_WORKING_DIRECTORY=86
    PASS_BUILD_SETTINGS_IN_ENVIRONMENT=87
    DEPENDENCIES=88
    PRODUCT_NAME=89
    PRODUCT_REFERENCE=90
    PRODUCT_TYPE=91
    LINE_ENDING=92
    XC_LANGUAGE_SPECIFICATION_IDENTIFIER=93
    PLIST_STRUCTURE_DEFINITION_IDENTIFIER=94
    REF_TYPE=95
    COMPILER_SPEC=96
    FILE_PATTERNS=97
    INPUT_FILES=98
    IS_EDITABLE=99
    OUTPUT_FILES=100
    RUN_ONCE_PER_ARCH=101
    SCRIPT=102
    ATTRIBUTES=103
    LAST_SWIFT_MIGRATION=104
    DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE=105
    LAST_SWIFT_UPDATE_CHECK=106
    BUILD_INDEPENDENT_TARGETS_IN_PARALLEL=107
    LAST_TESTING_UPGRADE_CHECK=108
    LAST_UPGRADE_CHECK=109
    ORGANIZATION_NAME=110
    TARGET_ATTRIBUTES=111
    CREATED_ON_TOOLS_VERSION=112
    TEST_TARGET_ID=113
    DEVELOPMENT_TEAM=114
    DEVELOPMENT_TEAM_NAME=115
    PROVISIONING_STYLE=116
    COMPATIBILITY_VERSION=117
    DEVELOPMENT_REGION=118
    HAS_SCANNED_FOR_ENCODINGS=119
    KNOWN_REGIONS=120
    MAIN_GROUP=121
    PRODUCT_REF_GROUP=122
    PACKAGE_REFERENCES=123
    PREFERRED_PROJECT_OBJECT_VERSION=124
    PRODUCT_DIR_PATH=125
    PROJECT_REFERENCES=126
    PROJECT_ROOT=127
    TARGETS=128
    INPUT_FILE_LIST_PATHS=129
    INPUT_PATHS=130
    OUTPUT_FILE_LIST_PATHS=131
    OUTPUT_PATHS=132
    SHELL_PATH=133
    SHELL=134
    SHELL_SCRIPT=135
    SHOW_ENV_VARS_IN_LOG=136
    TARGET=137
    TARGET_PROXY=138
    FILE_TYPE=139
    REMOTE_REF=140
    BASE_CONFIGURATION_REFERENCE=141
    BUILD_SETTINGS=142
    BUILD_STYLES=143
    DST_PATH=144
    DST_SUBFOLDER_SPEC=145
    PRODUCT_GROUP=146
    PROJECT_REF=147
    BUILD_CONFIGURATIONS=148
    DEFAULT_CONFIGURATION_IS_VISIBLE=149
    DEFAULT_CONFIGURATION_NAME=150
    SETTINGS=151
    SYSTEM_CAPABILITIES=152
    CURRENT_VERSION=153
    VERSION_GROUP_TYPE=154
    MEMBERSHIP_EXCEPTIONS=155
    EXCEPTIONS=156
    CLASSPREFIX=157
    REFERENCE=158
    QUOTED_STRING=159
    NON_QUOTED_STRING=160
    VARIABLE=161
    ALPHA_NUMERIC=162
    ALPHA_NUMERIC_CAP=163
    WS=164
    COMMENT=165
    LINE_COMMENT=166

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def root_element(self):
            return self.getTypedRuleContext(PBXProjParser.Root_elementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = PBXProjParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.root_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def archive_version(self):
            return self.getTypedRuleContext(PBXProjParser.Archive_versionContext,0)


        def classes(self):
            return self.getTypedRuleContext(PBXProjParser.ClassesContext,0)


        def object_version(self):
            return self.getTypedRuleContext(PBXProjParser.Object_versionContext,0)


        def objects(self):
            return self.getTypedRuleContext(PBXProjParser.ObjectsContext,0)


        def root_object(self):
            return self.getTypedRuleContext(PBXProjParser.Root_objectContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_root_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_element" ):
                listener.enterRoot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_element" ):
                listener.exitRoot_element(self)




    def root_element(self):

        localctx = PBXProjParser.Root_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_root_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(PBXProjParser.T__0)
            self.state = 421
            self.archive_version()
            self.state = 422
            self.classes()
            self.state = 423
            self.object_version()
            self.state = 424
            self.objects()
            self.state = 425
            self.root_object()
            self.state = 426
            self.match(PBXProjParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Archive_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE_VERSION(self):
            return self.getToken(PBXProjParser.ARCHIVE_VERSION, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_archive_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchive_version" ):
                listener.enterArchive_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchive_version" ):
                listener.exitArchive_version(self)




    def archive_version(self):

        localctx = PBXProjParser.Archive_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_archive_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(PBXProjParser.ARCHIVE_VERSION)
            self.state = 429
            self.match(PBXProjParser.T__2)
            self.state = 430
            self.match(PBXProjParser.NUMBER)
            self.state = 431
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSES(self):
            return self.getToken(PBXProjParser.CLASSES, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasses" ):
                listener.enterClasses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasses" ):
                listener.exitClasses(self)




    def classes(self):

        localctx = PBXProjParser.ClassesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(PBXProjParser.CLASSES)
            self.state = 434
            self.match(PBXProjParser.T__2)
            self.state = 435
            self.match(PBXProjParser.T__0)
            self.state = 436
            self.match(PBXProjParser.T__1)
            self.state = 437
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_VERSION(self):
            return self.getToken(PBXProjParser.OBJECT_VERSION, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_object_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_version" ):
                listener.enterObject_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_version" ):
                listener.exitObject_version(self)




    def object_version(self):

        localctx = PBXProjParser.Object_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_object_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(PBXProjParser.OBJECT_VERSION)
            self.state = 440
            self.match(PBXProjParser.T__2)
            self.state = 441
            self.match(PBXProjParser.NUMBER)
            self.state = 442
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECTS(self):
            return self.getToken(PBXProjParser.OBJECTS, 0)

        def pbx_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_group_sectionContext,0)


        def pbx_project_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_project_sectionContext,0)


        def xc_build_configuration_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_build_configuration_sectionContext,0)


        def xc_configuration_list_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_configuration_list_sectionContext,0)


        def pbx_aggregate_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_target_sectionContext,0)


        def pbx_build_file_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_file_sectionContext,0)


        def pbx_build_rule_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_rule_sectionContext,0)


        def pbx_build_style_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_style_sectionContext,0)


        def pbx_container_item_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxy_sectionContext,0)


        def pbx_copy_files_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phase_sectionContext,0)


        def pbx_file_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_file_reference_sectionContext,0)


        def pbx_file_system_synchronized_build_file_exception_set_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_file_system_synchronized_build_file_exception_set_sectionContext,0)


        def pbx_file_system_synchronized_root_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_file_system_synchronized_root_group_sectionContext,0)


        def pbx_frameworks_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phase_sectionContext,0)


        def pbx_headers_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phase_sectionContext,0)


        def pbx_legacy_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_legacy_target_sectionContext,0)


        def pbx_native_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_native_target_sectionContext,0)


        def pbx_reference_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxy_sectionContext,0)


        def pbx_resources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phase_sectionContext,0)


        def pbx_shell_script_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phase_sectionContext,0)


        def pbx_shell_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_shell_build_phase_sectionContext,0)


        def pbx_sources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phase_sectionContext,0)


        def pbx_target_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependency_sectionContext,0)


        def pbx_variant_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_variant_group_sectionContext,0)


        def xc_local_swift_package_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_local_swift_package_reference_sectionContext,0)


        def xc_remote_swift_package_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_reference_sectionContext,0)


        def xc_swift_package_product_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependency_sectionContext,0)


        def xc_version_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_version_group_sectionContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_objects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjects" ):
                listener.enterObjects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjects" ):
                listener.exitObjects(self)




    def objects(self):

        localctx = PBXProjParser.ObjectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_objects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(PBXProjParser.OBJECTS)
            self.state = 445
            self.match(PBXProjParser.T__2)
            self.state = 446
            self.match(PBXProjParser.T__0)
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 447
                self.pbx_aggregate_target_section()


            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 450
                self.pbx_build_file_section()


            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 453
                self.pbx_build_rule_section()


            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 456
                self.pbx_build_style_section()


            self.state = 460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 459
                self.pbx_container_item_proxy_section()


            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 462
                self.pbx_copy_files_build_phase_section()


            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 465
                self.pbx_file_reference_section()


            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 468
                self.pbx_file_system_synchronized_build_file_exception_set_section()


            self.state = 472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 471
                self.pbx_file_system_synchronized_root_group_section()


            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 474
                self.pbx_frameworks_build_phase_section()


            self.state = 477
            self.pbx_group_section()
            self.state = 479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 478
                self.pbx_headers_build_phase_section()


            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 481
                self.pbx_legacy_target_section()


            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 484
                self.pbx_native_target_section()


            self.state = 487
            self.pbx_project_section()
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 488
                self.pbx_reference_proxy_section()


            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 491
                self.pbx_resources_build_phase_section()


            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 494
                self.pbx_shell_script_build_phase_section()


            self.state = 498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 497
                self.pbx_shell_build_phase_section()


            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 500
                self.pbx_sources_build_phase_section()


            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 503
                self.pbx_target_dependency_section()


            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 506
                self.pbx_variant_group_section()


            self.state = 509
            self.xc_build_configuration_section()
            self.state = 510
            self.xc_configuration_list_section()
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 511
                self.xc_local_swift_package_reference_section()


            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 514
                self.xc_remote_swift_package_reference_section()


            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 517
                self.xc_swift_package_product_dependency_section()


            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 520
                self.xc_version_group_section()


            self.state = 523
            self.match(PBXProjParser.T__1)
            self.state = 524
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROOT_OBJECT(self):
            return self.getToken(PBXProjParser.ROOT_OBJECT, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_root_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_object" ):
                listener.enterRoot_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_object" ):
                listener.exitRoot_object(self)




    def root_object(self):

        localctx = PBXProjParser.Root_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_root_object)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(PBXProjParser.ROOT_OBJECT)
            self.state = 527
            self.match(PBXProjParser.T__2)
            self.state = 528
            self.match(PBXProjParser.REFERENCE)
            self.state = 529
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_aggregate_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_aggregate_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target_section" ):
                listener.enterPbx_aggregate_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target_section" ):
                listener.exitPbx_aggregate_target_section(self)




    def pbx_aggregate_target_section(self):

        localctx = PBXProjParser.Pbx_aggregate_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_pbx_aggregate_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 531
                    self.pbx_aggregate_target()

                else:
                    raise NoViableAltException(self)
                self.state = 534 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_file_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_file(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_fileContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_fileContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file_section" ):
                listener.enterPbx_build_file_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file_section" ):
                listener.exitPbx_build_file_section(self)




    def pbx_build_file_section(self):

        localctx = PBXProjParser.Pbx_build_file_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pbx_build_file_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 536
                    self.pbx_build_file()

                else:
                    raise NoViableAltException(self)
                self.state = 539 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_rule_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_ruleContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_ruleContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_rule_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_rule_section" ):
                listener.enterPbx_build_rule_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_rule_section" ):
                listener.exitPbx_build_rule_section(self)




    def pbx_build_rule_section(self):

        localctx = PBXProjParser.Pbx_build_rule_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pbx_build_rule_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 541
                    self.pbx_build_rule()

                else:
                    raise NoViableAltException(self)
                self.state = 544 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_style_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_style(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_styleContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_styleContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_style_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_style_section" ):
                listener.enterPbx_build_style_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_style_section" ):
                listener.exitPbx_build_style_section(self)




    def pbx_build_style_section(self):

        localctx = PBXProjParser.Pbx_build_style_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_pbx_build_style_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 546
                    self.pbx_build_style()

                else:
                    raise NoViableAltException(self)
                self.state = 549 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_container_item_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_container_item_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy_section" ):
                listener.enterPbx_container_item_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy_section" ):
                listener.exitPbx_container_item_proxy_section(self)




    def pbx_container_item_proxy_section(self):

        localctx = PBXProjParser.Pbx_container_item_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_pbx_container_item_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 551
                    self.pbx_container_item_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 554 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_copy_files_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_copy_files_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase_section" ):
                listener.enterPbx_copy_files_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase_section" ):
                listener.exitPbx_copy_files_build_phase_section(self)




    def pbx_copy_files_build_phase_section(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pbx_copy_files_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 556
                    self.pbx_copy_files_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 559 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_file_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_file_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_file_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference_section" ):
                listener.enterPbx_file_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference_section" ):
                listener.exitPbx_file_reference_section(self)




    def pbx_file_reference_section(self):

        localctx = PBXProjParser.Pbx_file_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pbx_file_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 561
                    self.pbx_file_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 564 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_system_synchronized_build_file_exception_set_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_file_system_synchronized_build_file_exception_set(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_file_system_synchronized_build_file_exception_setContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_file_system_synchronized_build_file_exception_setContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_system_synchronized_build_file_exception_set_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_system_synchronized_build_file_exception_set_section" ):
                listener.enterPbx_file_system_synchronized_build_file_exception_set_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_system_synchronized_build_file_exception_set_section" ):
                listener.exitPbx_file_system_synchronized_build_file_exception_set_section(self)




    def pbx_file_system_synchronized_build_file_exception_set_section(self):

        localctx = PBXProjParser.Pbx_file_system_synchronized_build_file_exception_set_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pbx_file_system_synchronized_build_file_exception_set_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 566
                    self.pbx_file_system_synchronized_build_file_exception_set()

                else:
                    raise NoViableAltException(self)
                self.state = 569 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_system_synchronized_root_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_file_system_synchronized_root_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_file_system_synchronized_root_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_file_system_synchronized_root_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_system_synchronized_root_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_system_synchronized_root_group_section" ):
                listener.enterPbx_file_system_synchronized_root_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_system_synchronized_root_group_section" ):
                listener.exitPbx_file_system_synchronized_root_group_section(self)




    def pbx_file_system_synchronized_root_group_section(self):

        localctx = PBXProjParser.Pbx_file_system_synchronized_root_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pbx_file_system_synchronized_root_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 571
                    self.pbx_file_system_synchronized_root_group()

                else:
                    raise NoViableAltException(self)
                self.state = 574 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_frameworks_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_frameworks_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase_section" ):
                listener.enterPbx_frameworks_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase_section" ):
                listener.exitPbx_frameworks_build_phase_section(self)




    def pbx_frameworks_build_phase_section(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pbx_frameworks_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 576
                    self.pbx_frameworks_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 579 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group_section" ):
                listener.enterPbx_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group_section" ):
                listener.exitPbx_group_section(self)




    def pbx_group_section(self):

        localctx = PBXProjParser.Pbx_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pbx_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 581
                    self.pbx_group()

                else:
                    raise NoViableAltException(self)
                self.state = 584 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_headers_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_headers_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase_section" ):
                listener.enterPbx_headers_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase_section" ):
                listener.exitPbx_headers_build_phase_section(self)




    def pbx_headers_build_phase_section(self):

        localctx = PBXProjParser.Pbx_headers_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pbx_headers_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 586
                    self.pbx_headers_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 589 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_native_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_native_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_native_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target_section" ):
                listener.enterPbx_native_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target_section" ):
                listener.exitPbx_native_target_section(self)




    def pbx_native_target_section(self):

        localctx = PBXProjParser.Pbx_native_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pbx_native_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 591
                    self.pbx_native_target()

                else:
                    raise NoViableAltException(self)
                self.state = 594 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_legacy_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_legacy_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_legacy_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_legacy_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_legacy_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_legacy_target_section" ):
                listener.enterPbx_legacy_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_legacy_target_section" ):
                listener.exitPbx_legacy_target_section(self)




    def pbx_legacy_target_section(self):

        localctx = PBXProjParser.Pbx_legacy_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pbx_legacy_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 596
                    self.pbx_legacy_target()

                else:
                    raise NoViableAltException(self)
                self.state = 599 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_project_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_project(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_projectContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_projectContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project_section" ):
                listener.enterPbx_project_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project_section" ):
                listener.exitPbx_project_section(self)




    def pbx_project_section(self):

        localctx = PBXProjParser.Pbx_project_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pbx_project_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 601
                    self.pbx_project()

                else:
                    raise NoViableAltException(self)
                self.state = 604 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_reference_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_reference_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy_section" ):
                listener.enterPbx_reference_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy_section" ):
                listener.exitPbx_reference_proxy_section(self)




    def pbx_reference_proxy_section(self):

        localctx = PBXProjParser.Pbx_reference_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pbx_reference_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 606
                    self.pbx_reference_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 609 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_resources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_resources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase_section" ):
                listener.enterPbx_resources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase_section" ):
                listener.exitPbx_resources_build_phase_section(self)




    def pbx_resources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_resources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pbx_resources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 611
                    self.pbx_resources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 614 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_shell_script_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_shell_script_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase_section" ):
                listener.enterPbx_shell_script_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase_section" ):
                listener.exitPbx_shell_script_build_phase_section(self)




    def pbx_shell_script_build_phase_section(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pbx_shell_script_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 616
                    self.pbx_shell_script_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 619 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_shell_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_shell_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_shell_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_build_phase_section" ):
                listener.enterPbx_shell_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_build_phase_section" ):
                listener.exitPbx_shell_build_phase_section(self)




    def pbx_shell_build_phase_section(self):

        localctx = PBXProjParser.Pbx_shell_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_pbx_shell_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 621
                    self.pbx_shell_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 624 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_sources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_sources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase_section" ):
                listener.enterPbx_sources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase_section" ):
                listener.exitPbx_sources_build_phase_section(self)




    def pbx_sources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_sources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_pbx_sources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 626
                    self.pbx_sources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 629 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_target_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_target_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency_section" ):
                listener.enterPbx_target_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency_section" ):
                listener.exitPbx_target_dependency_section(self)




    def pbx_target_dependency_section(self):

        localctx = PBXProjParser.Pbx_target_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pbx_target_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 631
                    self.pbx_target_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 634 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_variant_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_variant_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_variant_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group_section" ):
                listener.enterPbx_variant_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group_section" ):
                listener.exitPbx_variant_group_section(self)




    def pbx_variant_group_section(self):

        localctx = PBXProjParser.Pbx_variant_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pbx_variant_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 636
                    self.pbx_variant_group()

                else:
                    raise NoViableAltException(self)
                self.state = 639 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configuration_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_build_configuration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_build_configurationContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_build_configurationContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration_section" ):
                listener.enterXc_build_configuration_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration_section" ):
                listener.exitXc_build_configuration_section(self)




    def xc_build_configuration_section(self):

        localctx = PBXProjParser.Xc_build_configuration_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_xc_build_configuration_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 641
                    self.xc_build_configuration()

                else:
                    raise NoViableAltException(self)
                self.state = 644 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_list_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_configuration_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_configuration_listContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_configuration_listContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list_section" ):
                listener.enterXc_configuration_list_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list_section" ):
                listener.exitXc_configuration_list_section(self)




    def xc_configuration_list_section(self):

        localctx = PBXProjParser.Xc_configuration_list_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_xc_configuration_list_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 646
                    self.xc_configuration_list()

                else:
                    raise NoViableAltException(self)
                self.state = 649 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_remote_swift_package_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_remote_swift_package_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference_section" ):
                listener.enterXc_remote_swift_package_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference_section" ):
                listener.exitXc_remote_swift_package_reference_section(self)




    def xc_remote_swift_package_reference_section(self):

        localctx = PBXProjParser.Xc_remote_swift_package_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_xc_remote_swift_package_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 651
                    self.xc_remote_swift_package_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 654 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_local_swift_package_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_local_swift_pacakge_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_local_swift_pacakge_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_local_swift_pacakge_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_local_swift_package_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_local_swift_package_reference_section" ):
                listener.enterXc_local_swift_package_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_local_swift_package_reference_section" ):
                listener.exitXc_local_swift_package_reference_section(self)




    def xc_local_swift_package_reference_section(self):

        localctx = PBXProjParser.Xc_local_swift_package_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_xc_local_swift_package_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 656
                    self.xc_local_swift_pacakge_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 659 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_swift_package_product_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_swift_package_product_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency_section" ):
                listener.enterXc_swift_package_product_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency_section" ):
                listener.exitXc_swift_package_product_dependency_section(self)




    def xc_swift_package_product_dependency_section(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xc_swift_package_product_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 661
                    self.xc_swift_package_product_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 664 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_version_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_version_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_version_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group_section" ):
                listener.enterXc_version_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group_section" ):
                listener.exitXc_version_group_section(self)




    def xc_version_group_section(self):

        localctx = PBXProjParser.Xc_version_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xc_version_group_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 666
                self.xc_version_group()
                self.state = 669 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==158):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_aggregate_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_aggregate_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target" ):
                listener.enterPbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target" ):
                listener.exitPbx_aggregate_target(self)




    def pbx_aggregate_target(self):

        localctx = PBXProjParser.Pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_pbx_aggregate_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(PBXProjParser.REFERENCE)
            self.state = 672
            self.match(PBXProjParser.T__2)
            self.state = 673
            self.match(PBXProjParser.T__0)
            self.state = 674
            self.isa_pbx_aggregate_target()
            self.state = 675
            self.build_configuration_list()
            self.state = 676
            self.build_phases()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 677
                self.build_settings()


            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 680
                self.comments()


            self.state = 683
            self.dependencies()
            self.state = 684
            self.name()
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 685
                self.product_name()


            self.state = 688
            self.match(PBXProjParser.T__1)
            self.state = 689
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_file(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_fileContext,0)


        def file_ref(self):
            return self.getTypedRuleContext(PBXProjParser.File_refContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def platform_filters(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filtersContext,0)


        def product_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Product_refContext,0)


        def settings(self):
            return self.getTypedRuleContext(PBXProjParser.SettingsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file" ):
                listener.enterPbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file" ):
                listener.exitPbx_build_file(self)




    def pbx_build_file(self):

        localctx = PBXProjParser.Pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_pbx_build_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(PBXProjParser.REFERENCE)
            self.state = 692
            self.match(PBXProjParser.T__2)
            self.state = 693
            self.match(PBXProjParser.T__0)
            self.state = 694
            self.isa_pbx_build_file()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 695
                self.file_ref()


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 698
                self.platform_filter()


            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 701
                self.platform_filters()


            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 704
                self.product_ref()


            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 707
                self.settings()


            self.state = 710
            self.match(PBXProjParser.T__1)
            self.state = 711
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_rule(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_ruleContext,0)


        def compiler_spec(self):
            return self.getTypedRuleContext(PBXProjParser.Compiler_specContext,0)


        def file_type(self):
            return self.getTypedRuleContext(PBXProjParser.File_typeContext,0)


        def input_files(self):
            return self.getTypedRuleContext(PBXProjParser.Input_filesContext,0)


        def is_editable(self):
            return self.getTypedRuleContext(PBXProjParser.Is_editableContext,0)


        def output_files(self):
            return self.getTypedRuleContext(PBXProjParser.Output_filesContext,0)


        def file_patterns(self):
            return self.getTypedRuleContext(PBXProjParser.File_patternsContext,0)


        def run_once_per_arch(self):
            return self.getTypedRuleContext(PBXProjParser.Run_once_per_archContext,0)


        def script(self):
            return self.getTypedRuleContext(PBXProjParser.ScriptContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_rule" ):
                listener.enterPbx_build_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_rule" ):
                listener.exitPbx_build_rule(self)




    def pbx_build_rule(self):

        localctx = PBXProjParser.Pbx_build_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_pbx_build_rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(PBXProjParser.REFERENCE)
            self.state = 714
            self.match(PBXProjParser.T__2)
            self.state = 715
            self.match(PBXProjParser.T__0)
            self.state = 716
            self.isa_pbx_build_rule()
            self.state = 717
            self.compiler_spec()
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 718
                self.file_patterns()


            self.state = 721
            self.file_type()
            self.state = 722
            self.input_files()
            self.state = 723
            self.is_editable()
            self.state = 724
            self.output_files()
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 725
                self.run_once_per_arch()


            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 728
                self.script()


            self.state = 731
            self.match(PBXProjParser.T__1)
            self.state = 732
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_style(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_styleContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_style" ):
                listener.enterPbx_build_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_style" ):
                listener.exitPbx_build_style(self)




    def pbx_build_style(self):

        localctx = PBXProjParser.Pbx_build_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pbx_build_style)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(PBXProjParser.REFERENCE)
            self.state = 735
            self.match(PBXProjParser.T__2)
            self.state = 736
            self.match(PBXProjParser.T__0)
            self.state = 737
            self.isa_pbx_build_style()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 738
                self.build_settings()


            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 741
                self.name()


            self.state = 744
            self.match(PBXProjParser.T__1)
            self.state = 745
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_container_item_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_container_item_proxyContext,0)


        def container_portal(self):
            return self.getTypedRuleContext(PBXProjParser.Container_portalContext,0)


        def proxy_type(self):
            return self.getTypedRuleContext(PBXProjParser.Proxy_typeContext,0)


        def remote_global_id_string(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_global_id_stringContext,0)


        def remote_info(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_infoContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy" ):
                listener.enterPbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy" ):
                listener.exitPbx_container_item_proxy(self)




    def pbx_container_item_proxy(self):

        localctx = PBXProjParser.Pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(PBXProjParser.REFERENCE)
            self.state = 748
            self.match(PBXProjParser.T__2)
            self.state = 749
            self.match(PBXProjParser.T__0)
            self.state = 750
            self.isa_pbx_container_item_proxy()
            self.state = 751
            self.container_portal()
            self.state = 752
            self.proxy_type()
            self.state = 753
            self.remote_global_id_string()
            self.state = 754
            self.remote_info()
            self.state = 755
            self.match(PBXProjParser.T__1)
            self.state = 756
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_copy_files_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_copy_files_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def dst_subfolder_spec(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_subfolder_specContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def dst_path(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_pathContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase" ):
                listener.enterPbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase" ):
                listener.exitPbx_copy_files_build_phase(self)




    def pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pbx_copy_files_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(PBXProjParser.REFERENCE)
            self.state = 759
            self.match(PBXProjParser.T__2)
            self.state = 760
            self.match(PBXProjParser.T__0)
            self.state = 761
            self.isa_pbx_copy_files_build_phase()
            self.state = 762
            self.build_action_mask()
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 763
                self.dst_path()


            self.state = 766
            self.dst_subfolder_spec()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 767
                self.files()


            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 770
                self.name()


            self.state = 773
            self.run_only_for_deployment_postprocessing()
            self.state = 774
            self.match(PBXProjParser.T__1)
            self.state = 775
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_file_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_file_referenceContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def file_encoding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.File_encodingContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.File_encodingContext,i)


        def explicit_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Explicit_file_typeContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def last_known_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Last_known_file_typeContext,0)


        def line_ending(self):
            return self.getTypedRuleContext(PBXProjParser.Line_endingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def ref_type(self):
            return self.getTypedRuleContext(PBXProjParser.Ref_typeContext,0)


        def plist_structure_definition_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Plist_structure_definition_identifierContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def xc_language_specification_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_language_specification_identifierContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def wraps_lines(self):
            return self.getTypedRuleContext(PBXProjParser.Wraps_linesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference" ):
                listener.enterPbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference" ):
                listener.exitPbx_file_reference(self)




    def pbx_file_reference(self):

        localctx = PBXProjParser.Pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pbx_file_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(PBXProjParser.REFERENCE)
            self.state = 778
            self.match(PBXProjParser.T__2)
            self.state = 779
            self.match(PBXProjParser.T__0)
            self.state = 780
            self.isa_pbx_file_reference()
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 781
                self.comments()


            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 784
                self.file_encoding()


            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 787
                self.explicit_file_type()


            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 790
                self.file_encoding()


            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 793
                self.include_in_index()


            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 796
                self.indent_width()


            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 799
                self.last_known_file_type()


            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 802
                self.line_ending()


            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 805
                self.name()


            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 808
                self.path()


            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 811
                self.ref_type()


            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 814
                self.plist_structure_definition_identifier()


            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 817
                self.source_tree()


            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 820
                self.tab_width()


            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 823
                self.xc_language_specification_identifier()


            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 826
                self.uses_tabs()


            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 829
                self.wraps_lines()


            self.state = 832
            self.match(PBXProjParser.T__1)
            self.state = 833
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_system_synchronized_build_file_exception_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_file_system_synchronized_build_file_exception_set(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_file_system_synchronized_build_file_exception_setContext,0)


        def membership_exceptions(self):
            return self.getTypedRuleContext(PBXProjParser.Membership_exceptionsContext,0)


        def target(self):
            return self.getTypedRuleContext(PBXProjParser.TargetContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_system_synchronized_build_file_exception_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_system_synchronized_build_file_exception_set" ):
                listener.enterPbx_file_system_synchronized_build_file_exception_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_system_synchronized_build_file_exception_set" ):
                listener.exitPbx_file_system_synchronized_build_file_exception_set(self)




    def pbx_file_system_synchronized_build_file_exception_set(self):

        localctx = PBXProjParser.Pbx_file_system_synchronized_build_file_exception_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_pbx_file_system_synchronized_build_file_exception_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(PBXProjParser.REFERENCE)
            self.state = 836
            self.match(PBXProjParser.T__2)
            self.state = 837
            self.match(PBXProjParser.T__0)
            self.state = 838
            self.isa_pbx_file_system_synchronized_build_file_exception_set()
            self.state = 839
            self.membership_exceptions()
            self.state = 840
            self.target()
            self.state = 841
            self.match(PBXProjParser.T__1)
            self.state = 842
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_system_synchronized_root_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_file_system_synchronized_root_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_file_system_synchronized_root_groupContext,0)


        def exceptions(self):
            return self.getTypedRuleContext(PBXProjParser.ExceptionsContext,0)


        def explicit_file_types(self):
            return self.getTypedRuleContext(PBXProjParser.Explicit_file_typesContext,0)


        def explicit_folders(self):
            return self.getTypedRuleContext(PBXProjParser.Explicit_foldersContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_system_synchronized_root_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_system_synchronized_root_group" ):
                listener.enterPbx_file_system_synchronized_root_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_system_synchronized_root_group" ):
                listener.exitPbx_file_system_synchronized_root_group(self)




    def pbx_file_system_synchronized_root_group(self):

        localctx = PBXProjParser.Pbx_file_system_synchronized_root_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_pbx_file_system_synchronized_root_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(PBXProjParser.REFERENCE)
            self.state = 845
            self.match(PBXProjParser.T__2)
            self.state = 846
            self.match(PBXProjParser.T__0)
            self.state = 847
            self.isa_pbx_file_system_synchronized_root_group()
            self.state = 848
            self.exceptions()
            self.state = 849
            self.explicit_file_types()
            self.state = 850
            self.explicit_folders()
            self.state = 851
            self.path()
            self.state = 852
            self.source_tree()
            self.state = 853
            self.match(PBXProjParser.T__1)
            self.state = 854
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_frameworks_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_frameworks_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase" ):
                listener.enterPbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase" ):
                listener.exitPbx_frameworks_build_phase(self)




    def pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(PBXProjParser.REFERENCE)
            self.state = 857
            self.match(PBXProjParser.T__2)
            self.state = 858
            self.match(PBXProjParser.T__0)
            self.state = 859
            self.isa_pbx_frameworks_build_phase()
            self.state = 860
            self.build_action_mask()
            self.state = 861
            self.files()
            self.state = 862
            self.run_only_for_deployment_postprocessing()
            self.state = 863
            self.match(PBXProjParser.T__1)
            self.state = 864
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def wraps_lines(self):
            return self.getTypedRuleContext(PBXProjParser.Wraps_linesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group" ):
                listener.enterPbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group" ):
                listener.exitPbx_group(self)




    def pbx_group(self):

        localctx = PBXProjParser.Pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_pbx_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(PBXProjParser.REFERENCE)
            self.state = 867
            self.match(PBXProjParser.T__2)
            self.state = 868
            self.match(PBXProjParser.T__0)
            self.state = 869
            self.isa_pbx_group()
            self.state = 870
            self.children()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 871
                self.comments()


            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 874
                self.indent_width()


            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 877
                self.include_in_index()


            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 880
                self.name()


            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 883
                self.path()


            self.state = 886
            self.source_tree()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 887
                self.tab_width()


            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 890
                self.uses_tabs()


            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 893
                self.wraps_lines()


            self.state = 896
            self.match(PBXProjParser.T__1)
            self.state = 897
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_header_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_header_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase" ):
                listener.enterPbx_headers_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase" ):
                listener.exitPbx_headers_build_phase(self)




    def pbx_headers_build_phase(self):

        localctx = PBXProjParser.Pbx_headers_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_pbx_headers_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(PBXProjParser.REFERENCE)
            self.state = 900
            self.match(PBXProjParser.T__2)
            self.state = 901
            self.match(PBXProjParser.T__0)
            self.state = 902
            self.isa_pbx_header_build_phase()
            self.state = 903
            self.build_action_mask()
            self.state = 904
            self.files()
            self.state = 905
            self.run_only_for_deployment_postprocessing()
            self.state = 906
            self.match(PBXProjParser.T__1)
            self.state = 907
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_native_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_native_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_rules(self):
            return self.getTypedRuleContext(PBXProjParser.Build_rulesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def product_type(self):
            return self.getTypedRuleContext(PBXProjParser.Product_typeContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def product_install_path(self):
            return self.getTypedRuleContext(PBXProjParser.Product_install_pathContext,0)


        def package_product_dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.Package_product_dependenciesContext,0)


        def product_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Product_referenceContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target" ):
                listener.enterPbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target" ):
                listener.exitPbx_native_target(self)




    def pbx_native_target(self):

        localctx = PBXProjParser.Pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_pbx_native_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(PBXProjParser.REFERENCE)
            self.state = 910
            self.match(PBXProjParser.T__2)
            self.state = 911
            self.match(PBXProjParser.T__0)
            self.state = 912
            self.isa_pbx_native_target()
            self.state = 913
            self.build_configuration_list()
            self.state = 914
            self.build_phases()
            self.state = 915
            self.build_rules()
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 916
                self.comments()


            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 919
                self.build_settings()


            self.state = 922
            self.dependencies()
            self.state = 923
            self.name()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 924
                self.product_install_path()


            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 927
                self.package_product_dependencies()


            self.state = 930
            self.product_name()
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 931
                self.product_reference()


            self.state = 934
            self.product_type()
            self.state = 935
            self.match(PBXProjParser.T__1)
            self.state = 936
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_legacy_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_legacy_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_legacy_targetContext,0)


        def build_arguments_string(self):
            return self.getTypedRuleContext(PBXProjParser.Build_arguments_stringContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_tool_path(self):
            return self.getTypedRuleContext(PBXProjParser.Build_tool_pathContext,0)


        def build_working_directory(self):
            return self.getTypedRuleContext(PBXProjParser.Build_working_directoryContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def pass_build_settings_in_environment(self):
            return self.getTypedRuleContext(PBXProjParser.Pass_build_settings_in_environmentContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_legacy_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_legacy_target" ):
                listener.enterPbx_legacy_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_legacy_target" ):
                listener.exitPbx_legacy_target(self)




    def pbx_legacy_target(self):

        localctx = PBXProjParser.Pbx_legacy_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_pbx_legacy_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(PBXProjParser.REFERENCE)
            self.state = 939
            self.match(PBXProjParser.T__2)
            self.state = 940
            self.match(PBXProjParser.T__0)
            self.state = 941
            self.isa_pbx_legacy_target()
            self.state = 942
            self.build_arguments_string()
            self.state = 943
            self.build_configuration_list()
            self.state = 944
            self.build_phases()
            self.state = 945
            self.build_tool_path()
            self.state = 946
            self.build_working_directory()
            self.state = 947
            self.dependencies()
            self.state = 948
            self.name()
            self.state = 949
            self.pass_build_settings_in_environment()
            self.state = 950
            self.product_name()
            self.state = 951
            self.match(PBXProjParser.T__1)
            self.state = 952
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_project(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_projectContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def has_scanned_for_encodings(self):
            return self.getTypedRuleContext(PBXProjParser.Has_scanned_for_encodingsContext,0)


        def main_group(self):
            return self.getTypedRuleContext(PBXProjParser.Main_groupContext,0)


        def project_dir_path(self):
            return self.getTypedRuleContext(PBXProjParser.Project_dir_pathContext,0)


        def targets(self):
            return self.getTypedRuleContext(PBXProjParser.TargetsContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PBXProjParser.AttributesContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def build_styles(self):
            return self.getTypedRuleContext(PBXProjParser.Build_stylesContext,0)


        def compatibility_version(self):
            return self.getTypedRuleContext(PBXProjParser.Compatibility_versionContext,0)


        def development_region(self):
            return self.getTypedRuleContext(PBXProjParser.Development_regionContext,0)


        def known_regions(self):
            return self.getTypedRuleContext(PBXProjParser.Known_regionsContext,0)


        def package_references(self):
            return self.getTypedRuleContext(PBXProjParser.Package_referencesContext,0)


        def preferred_project_object_version(self):
            return self.getTypedRuleContext(PBXProjParser.Preferred_project_object_versionContext,0)


        def product_ref_group(self):
            return self.getTypedRuleContext(PBXProjParser.Product_ref_groupContext,0)


        def project_references(self):
            return self.getTypedRuleContext(PBXProjParser.Project_referencesContext,0)


        def project_root(self):
            return self.getTypedRuleContext(PBXProjParser.Project_rootContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project" ):
                listener.enterPbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project" ):
                listener.exitPbx_project(self)




    def pbx_project(self):

        localctx = PBXProjParser.Pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_pbx_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(PBXProjParser.REFERENCE)
            self.state = 955
            self.match(PBXProjParser.T__2)
            self.state = 956
            self.match(PBXProjParser.T__0)
            self.state = 957
            self.isa_pbx_project()
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 958
                self.attributes()


            self.state = 961
            self.build_configuration_list()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 962
                self.build_settings()


            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 965
                self.build_styles()


            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 968
                self.compatibility_version()


            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 971
                self.development_region()


            self.state = 974
            self.has_scanned_for_encodings()
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 975
                self.known_regions()


            self.state = 978
            self.main_group()
            self.state = 980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 979
                self.package_references()


            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 982
                self.preferred_project_object_version()


            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 985
                self.product_ref_group()


            self.state = 988
            self.project_dir_path()
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 989
                self.project_references()


            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 992
                self.project_root()


            self.state = 995
            self.targets()
            self.state = 996
            self.match(PBXProjParser.T__1)
            self.state = 997
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_reference_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_reference_proxyContext,0)


        def file_type(self):
            return self.getTypedRuleContext(PBXProjParser.File_typeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def remote_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_refContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy" ):
                listener.enterPbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy" ):
                listener.exitPbx_reference_proxy(self)




    def pbx_reference_proxy(self):

        localctx = PBXProjParser.Pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_pbx_reference_proxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(PBXProjParser.REFERENCE)
            self.state = 1000
            self.match(PBXProjParser.T__2)
            self.state = 1001
            self.match(PBXProjParser.T__0)
            self.state = 1002
            self.isa_pbx_reference_proxy()
            self.state = 1003
            self.file_type()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1004
                self.name()


            self.state = 1007
            self.path()
            self.state = 1008
            self.remote_ref()
            self.state = 1009
            self.source_tree()
            self.state = 1010
            self.match(PBXProjParser.T__1)
            self.state = 1011
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_resources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_resources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase" ):
                listener.enterPbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase" ):
                listener.exitPbx_resources_build_phase(self)




    def pbx_resources_build_phase(self):

        localctx = PBXProjParser.Pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(PBXProjParser.REFERENCE)
            self.state = 1014
            self.match(PBXProjParser.T__2)
            self.state = 1015
            self.match(PBXProjParser.T__0)
            self.state = 1016
            self.isa_pbx_resources_build_phase()
            self.state = 1017
            self.build_action_mask()
            self.state = 1018
            self.files()
            self.state = 1019
            self.run_only_for_deployment_postprocessing()
            self.state = 1020
            self.match(PBXProjParser.T__1)
            self.state = 1021
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_shell_script_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_shell_script_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def shell_path(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_pathContext,0)


        def shell_script(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_scriptContext,0)


        def always_out_of_date(self):
            return self.getTypedRuleContext(PBXProjParser.Always_out_of_dateContext,0)


        def input_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_file_list_pathsContext,0)


        def input_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_pathsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def output_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_file_list_pathsContext,0)


        def output_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_pathsContext,0)


        def show_env_vars_in_log(self):
            return self.getTypedRuleContext(PBXProjParser.Show_env_vars_in_logContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase" ):
                listener.enterPbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase" ):
                listener.exitPbx_shell_script_build_phase(self)




    def pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_pbx_shell_script_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(PBXProjParser.REFERENCE)
            self.state = 1024
            self.match(PBXProjParser.T__2)
            self.state = 1025
            self.match(PBXProjParser.T__0)
            self.state = 1026
            self.isa_pbx_shell_script_build_phase()
            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1027
                self.always_out_of_date()


            self.state = 1030
            self.build_action_mask()
            self.state = 1031
            self.files()
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1032
                self.input_file_list_paths()


            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1035
                self.input_paths()


            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1038
                self.name()


            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 1041
                self.output_file_list_paths()


            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 1044
                self.output_paths()


            self.state = 1047
            self.run_only_for_deployment_postprocessing()
            self.state = 1048
            self.shell_path()
            self.state = 1049
            self.shell_script()
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1050
                self.show_env_vars_in_log()


            self.state = 1053
            self.match(PBXProjParser.T__1)
            self.state = 1054
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_shell_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_shell_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def input_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_file_list_pathsContext,0)


        def input_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_pathsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def output_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_file_list_pathsContext,0)


        def output_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_pathsContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def shell_path(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_pathContext,0)


        def shell(self):
            return self.getTypedRuleContext(PBXProjParser.ShellContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_build_phase" ):
                listener.enterPbx_shell_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_build_phase" ):
                listener.exitPbx_shell_build_phase(self)




    def pbx_shell_build_phase(self):

        localctx = PBXProjParser.Pbx_shell_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_pbx_shell_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(PBXProjParser.REFERENCE)
            self.state = 1057
            self.match(PBXProjParser.T__2)
            self.state = 1058
            self.match(PBXProjParser.T__0)
            self.state = 1059
            self.isa_pbx_shell_build_phase()
            self.state = 1060
            self.build_action_mask()
            self.state = 1061
            self.files()
            self.state = 1062
            self.input_file_list_paths()
            self.state = 1063
            self.input_paths()
            self.state = 1064
            self.name()
            self.state = 1065
            self.output_file_list_paths()
            self.state = 1066
            self.output_paths()
            self.state = 1067
            self.run_only_for_deployment_postprocessing()
            self.state = 1068
            self.shell_path()
            self.state = 1069
            self.shell()
            self.state = 1070
            self.match(PBXProjParser.T__1)
            self.state = 1071
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_sources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_sources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase" ):
                listener.enterPbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase" ):
                listener.exitPbx_sources_build_phase(self)




    def pbx_sources_build_phase(self):

        localctx = PBXProjParser.Pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(PBXProjParser.REFERENCE)
            self.state = 1074
            self.match(PBXProjParser.T__2)
            self.state = 1075
            self.match(PBXProjParser.T__0)
            self.state = 1076
            self.isa_pbx_sources_build_phase()
            self.state = 1077
            self.build_action_mask()
            self.state = 1078
            self.files()
            self.state = 1079
            self.run_only_for_deployment_postprocessing()
            self.state = 1080
            self.match(PBXProjParser.T__1)
            self.state = 1081
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_target_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_target_dependencyContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def platform_filters(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filtersContext,0)


        def product_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Product_refContext,0)


        def target(self):
            return self.getTypedRuleContext(PBXProjParser.TargetContext,0)


        def target_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Target_proxyContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency" ):
                listener.enterPbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency" ):
                listener.exitPbx_target_dependency(self)




    def pbx_target_dependency(self):

        localctx = PBXProjParser.Pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_pbx_target_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(PBXProjParser.REFERENCE)
            self.state = 1084
            self.match(PBXProjParser.T__2)
            self.state = 1085
            self.match(PBXProjParser.T__0)
            self.state = 1086
            self.isa_pbx_target_dependency()
            self.state = 1088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1087
                self.name()


            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1090
                self.platform_filter()


            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1093
                self.platform_filters()


            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1096
                self.product_ref()


            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1099
                self.target()


            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 1102
                self.target_proxy()


            self.state = 1105
            self.match(PBXProjParser.T__1)
            self.state = 1106
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_variant_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_variant_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group" ):
                listener.enterPbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group" ):
                listener.exitPbx_variant_group(self)




    def pbx_variant_group(self):

        localctx = PBXProjParser.Pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_pbx_variant_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(PBXProjParser.REFERENCE)
            self.state = 1109
            self.match(PBXProjParser.T__2)
            self.state = 1110
            self.match(PBXProjParser.T__0)
            self.state = 1111
            self.isa_pbx_variant_group()
            self.state = 1112
            self.children()
            self.state = 1113
            self.name()
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1114
                self.path()


            self.state = 1117
            self.source_tree()
            self.state = 1118
            self.match(PBXProjParser.T__1)
            self.state = 1119
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_build_configuration(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_build_configurationContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def base_configuration_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Base_configuration_referenceContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration" ):
                listener.enterXc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration" ):
                listener.exitXc_build_configuration(self)




    def xc_build_configuration(self):

        localctx = PBXProjParser.Xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_xc_build_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(PBXProjParser.REFERENCE)
            self.state = 1122
            self.match(PBXProjParser.T__2)
            self.state = 1123
            self.match(PBXProjParser.T__0)
            self.state = 1124
            self.isa_xc_build_configuration()
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141:
                self.state = 1125
                self.base_configuration_reference()


            self.state = 1128
            self.build_settings()
            self.state = 1129
            self.name()
            self.state = 1130
            self.match(PBXProjParser.T__1)
            self.state = 1131
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_configuration_listContext,0)


        def build_configurations(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configurationsContext,0)


        def default_configuration_is_visible(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_is_visibleContext,0)


        def default_configuration_name(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list" ):
                listener.enterXc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list" ):
                listener.exitXc_configuration_list(self)




    def xc_configuration_list(self):

        localctx = PBXProjParser.Xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_xc_configuration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(PBXProjParser.REFERENCE)
            self.state = 1134
            self.match(PBXProjParser.T__2)
            self.state = 1135
            self.match(PBXProjParser.T__0)
            self.state = 1136
            self.isa_xc_configuration_list()
            self.state = 1137
            self.build_configurations()
            self.state = 1138
            self.default_configuration_is_visible()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 1139
                self.default_configuration_name()


            self.state = 1142
            self.match(PBXProjParser.T__1)
            self.state = 1143
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_remote_swift_package_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_remote_swift_package_referenceContext,0)


        def repository_url(self):
            return self.getTypedRuleContext(PBXProjParser.Repository_urlContext,0)


        def requirement(self):
            return self.getTypedRuleContext(PBXProjParser.RequirementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference" ):
                listener.enterXc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference" ):
                listener.exitXc_remote_swift_package_reference(self)




    def xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(PBXProjParser.REFERENCE)
            self.state = 1146
            self.match(PBXProjParser.T__2)
            self.state = 1147
            self.match(PBXProjParser.T__0)
            self.state = 1148
            self.isa_xc_remote_swift_package_reference()
            self.state = 1149
            self.repository_url()
            self.state = 1150
            self.requirement()
            self.state = 1151
            self.match(PBXProjParser.T__1)
            self.state = 1152
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_local_swift_pacakge_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_local_swift_package_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_local_swift_package_referenceContext,0)


        def relative_path(self):
            return self.getTypedRuleContext(PBXProjParser.Relative_pathContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_local_swift_pacakge_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_local_swift_pacakge_reference" ):
                listener.enterXc_local_swift_pacakge_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_local_swift_pacakge_reference" ):
                listener.exitXc_local_swift_pacakge_reference(self)




    def xc_local_swift_pacakge_reference(self):

        localctx = PBXProjParser.Xc_local_swift_pacakge_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_xc_local_swift_pacakge_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(PBXProjParser.REFERENCE)
            self.state = 1155
            self.match(PBXProjParser.T__2)
            self.state = 1156
            self.match(PBXProjParser.T__0)
            self.state = 1157
            self.isa_xc_local_swift_package_reference()
            self.state = 1158
            self.relative_path()
            self.state = 1159
            self.match(PBXProjParser.T__1)
            self.state = 1160
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_swift_package_product_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_swift_package_product_dependencyContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def xc_package(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_packageContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency" ):
                listener.enterXc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency" ):
                listener.exitXc_swift_package_product_dependency(self)




    def xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_xc_swift_package_product_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(PBXProjParser.REFERENCE)
            self.state = 1163
            self.match(PBXProjParser.T__2)
            self.state = 1164
            self.match(PBXProjParser.T__0)
            self.state = 1165
            self.isa_xc_swift_package_product_dependency()
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1166
                self.xc_package()


            self.state = 1169
            self.product_name()
            self.state = 1170
            self.match(PBXProjParser.T__1)
            self.state = 1171
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_version_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_version_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def current_version(self):
            return self.getTypedRuleContext(PBXProjParser.Current_versionContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def version_group_type(self):
            return self.getTypedRuleContext(PBXProjParser.Version_group_typeContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group" ):
                listener.enterXc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group" ):
                listener.exitXc_version_group(self)




    def xc_version_group(self):

        localctx = PBXProjParser.Xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_xc_version_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.match(PBXProjParser.REFERENCE)
            self.state = 1174
            self.match(PBXProjParser.T__2)
            self.state = 1175
            self.match(PBXProjParser.T__0)
            self.state = 1176
            self.isa_xc_version_group()
            self.state = 1177
            self.children()
            self.state = 1178
            self.current_version()
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1179
                self.name()


            self.state = 1182
            self.path()
            self.state = 1183
            self.source_tree()
            self.state = 1184
            self.version_group_type()
            self.state = 1185
            self.match(PBXProjParser.T__1)
            self.state = 1186
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_AGGREGATE_TARGET(self):
            return self.getToken(PBXProjParser.PBX_AGGREGATE_TARGET, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_aggregate_target" ):
                listener.enterIsa_pbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_aggregate_target" ):
                listener.exitIsa_pbx_aggregate_target(self)




    def isa_pbx_aggregate_target(self):

        localctx = PBXProjParser.Isa_pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_isa_pbx_aggregate_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(PBXProjParser.ISA)
            self.state = 1189
            self.match(PBXProjParser.T__2)
            self.state = 1190
            self.match(PBXProjParser.PBX_AGGREGATE_TARGET)
            self.state = 1191
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_BUILD_FILE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_FILE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_build_file" ):
                listener.enterIsa_pbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_build_file" ):
                listener.exitIsa_pbx_build_file(self)




    def isa_pbx_build_file(self):

        localctx = PBXProjParser.Isa_pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_isa_pbx_build_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.match(PBXProjParser.ISA)
            self.state = 1194
            self.match(PBXProjParser.T__2)
            self.state = 1195
            self.match(PBXProjParser.PBX_BUILD_FILE)
            self.state = 1196
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_build_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_BUILD_RULE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_RULE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_build_rule" ):
                listener.enterIsa_pbx_build_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_build_rule" ):
                listener.exitIsa_pbx_build_rule(self)




    def isa_pbx_build_rule(self):

        localctx = PBXProjParser.Isa_pbx_build_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_isa_pbx_build_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(PBXProjParser.ISA)
            self.state = 1199
            self.match(PBXProjParser.T__2)
            self.state = 1200
            self.match(PBXProjParser.PBX_BUILD_RULE)
            self.state = 1201
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_build_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_BUILD_STYLE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_STYLE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_build_style" ):
                listener.enterIsa_pbx_build_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_build_style" ):
                listener.exitIsa_pbx_build_style(self)




    def isa_pbx_build_style(self):

        localctx = PBXProjParser.Isa_pbx_build_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_isa_pbx_build_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(PBXProjParser.ISA)
            self.state = 1204
            self.match(PBXProjParser.T__2)
            self.state = 1205
            self.match(PBXProjParser.PBX_BUILD_STYLE)
            self.state = 1206
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_CONTAINER_ITEM_PROXY(self):
            return self.getToken(PBXProjParser.PBX_CONTAINER_ITEM_PROXY, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_container_item_proxy" ):
                listener.enterIsa_pbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_container_item_proxy" ):
                listener.exitIsa_pbx_container_item_proxy(self)




    def isa_pbx_container_item_proxy(self):

        localctx = PBXProjParser.Isa_pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_isa_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(PBXProjParser.ISA)
            self.state = 1209
            self.match(PBXProjParser.T__2)
            self.state = 1210
            self.match(PBXProjParser.PBX_CONTAINER_ITEM_PROXY)
            self.state = 1211
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_COPY_FILES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_COPY_FILES_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_copy_files_build_phase" ):
                listener.enterIsa_pbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_copy_files_build_phase" ):
                listener.exitIsa_pbx_copy_files_build_phase(self)




    def isa_pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_isa_pbx_copy_files_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(PBXProjParser.ISA)
            self.state = 1214
            self.match(PBXProjParser.T__2)
            self.state = 1215
            self.match(PBXProjParser.PBX_COPY_FILES_BUILD_PHASE)
            self.state = 1216
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_FILE_REFERENCE(self):
            return self.getToken(PBXProjParser.PBX_FILE_REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_file_reference" ):
                listener.enterIsa_pbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_file_reference" ):
                listener.exitIsa_pbx_file_reference(self)




    def isa_pbx_file_reference(self):

        localctx = PBXProjParser.Isa_pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_isa_pbx_file_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.match(PBXProjParser.ISA)
            self.state = 1219
            self.match(PBXProjParser.T__2)
            self.state = 1220
            self.match(PBXProjParser.PBX_FILE_REFERENCE)
            self.state = 1221
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_file_system_synchronized_build_file_exception_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_FILE_SYSTEM_SYNCHRONIZED_BUILD_FILE_EXCEPTION_SET(self):
            return self.getToken(PBXProjParser.PBX_FILE_SYSTEM_SYNCHRONIZED_BUILD_FILE_EXCEPTION_SET, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_file_system_synchronized_build_file_exception_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_file_system_synchronized_build_file_exception_set" ):
                listener.enterIsa_pbx_file_system_synchronized_build_file_exception_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_file_system_synchronized_build_file_exception_set" ):
                listener.exitIsa_pbx_file_system_synchronized_build_file_exception_set(self)




    def isa_pbx_file_system_synchronized_build_file_exception_set(self):

        localctx = PBXProjParser.Isa_pbx_file_system_synchronized_build_file_exception_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_isa_pbx_file_system_synchronized_build_file_exception_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(PBXProjParser.ISA)
            self.state = 1224
            self.match(PBXProjParser.T__2)
            self.state = 1225
            self.match(PBXProjParser.PBX_FILE_SYSTEM_SYNCHRONIZED_BUILD_FILE_EXCEPTION_SET)
            self.state = 1226
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_file_system_synchronized_root_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_FILE_SYSTEM_SYNCHRONIZED_ROOT_GROUP(self):
            return self.getToken(PBXProjParser.PBX_FILE_SYSTEM_SYNCHRONIZED_ROOT_GROUP, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_file_system_synchronized_root_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_file_system_synchronized_root_group" ):
                listener.enterIsa_pbx_file_system_synchronized_root_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_file_system_synchronized_root_group" ):
                listener.exitIsa_pbx_file_system_synchronized_root_group(self)




    def isa_pbx_file_system_synchronized_root_group(self):

        localctx = PBXProjParser.Isa_pbx_file_system_synchronized_root_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_isa_pbx_file_system_synchronized_root_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(PBXProjParser.ISA)
            self.state = 1229
            self.match(PBXProjParser.T__2)
            self.state = 1230
            self.match(PBXProjParser.PBX_FILE_SYSTEM_SYNCHRONIZED_ROOT_GROUP)
            self.state = 1231
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_FRAMEWORKS_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_FRAMEWORKS_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_frameworks_build_phase" ):
                listener.enterIsa_pbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_frameworks_build_phase" ):
                listener.exitIsa_pbx_frameworks_build_phase(self)




    def isa_pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_isa_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(PBXProjParser.ISA)
            self.state = 1234
            self.match(PBXProjParser.T__2)
            self.state = 1235
            self.match(PBXProjParser.PBX_FRAMEWORKS_BUILD_PHASE)
            self.state = 1236
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_GROUP(self):
            return self.getToken(PBXProjParser.PBX_GROUP, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_group" ):
                listener.enterIsa_pbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_group" ):
                listener.exitIsa_pbx_group(self)




    def isa_pbx_group(self):

        localctx = PBXProjParser.Isa_pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_isa_pbx_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(PBXProjParser.ISA)
            self.state = 1239
            self.match(PBXProjParser.T__2)
            self.state = 1240
            self.match(PBXProjParser.PBX_GROUP)
            self.state = 1241
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_header_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_HEADERS_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_HEADERS_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_header_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_header_build_phase" ):
                listener.enterIsa_pbx_header_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_header_build_phase" ):
                listener.exitIsa_pbx_header_build_phase(self)




    def isa_pbx_header_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_header_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_isa_pbx_header_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(PBXProjParser.ISA)
            self.state = 1244
            self.match(PBXProjParser.T__2)
            self.state = 1245
            self.match(PBXProjParser.PBX_HEADERS_BUILD_PHASE)
            self.state = 1246
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_NATIVE_TARGET(self):
            return self.getToken(PBXProjParser.PBX_NATIVE_TARGET, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_native_target" ):
                listener.enterIsa_pbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_native_target" ):
                listener.exitIsa_pbx_native_target(self)




    def isa_pbx_native_target(self):

        localctx = PBXProjParser.Isa_pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_isa_pbx_native_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(PBXProjParser.ISA)
            self.state = 1249
            self.match(PBXProjParser.T__2)
            self.state = 1250
            self.match(PBXProjParser.PBX_NATIVE_TARGET)
            self.state = 1251
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_legacy_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_LEGACY_TARGET(self):
            return self.getToken(PBXProjParser.PBX_LEGACY_TARGET, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_legacy_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_legacy_target" ):
                listener.enterIsa_pbx_legacy_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_legacy_target" ):
                listener.exitIsa_pbx_legacy_target(self)




    def isa_pbx_legacy_target(self):

        localctx = PBXProjParser.Isa_pbx_legacy_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_isa_pbx_legacy_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(PBXProjParser.ISA)
            self.state = 1254
            self.match(PBXProjParser.T__2)
            self.state = 1255
            self.match(PBXProjParser.PBX_LEGACY_TARGET)
            self.state = 1256
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_PROJECT(self):
            return self.getToken(PBXProjParser.PBX_PROJECT, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_project" ):
                listener.enterIsa_pbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_project" ):
                listener.exitIsa_pbx_project(self)




    def isa_pbx_project(self):

        localctx = PBXProjParser.Isa_pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_isa_pbx_project)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(PBXProjParser.ISA)
            self.state = 1259
            self.match(PBXProjParser.T__2)
            self.state = 1260
            self.match(PBXProjParser.PBX_PROJECT)
            self.state = 1261
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_REFERENCE_PROXY(self):
            return self.getToken(PBXProjParser.PBX_REFERENCE_PROXY, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_reference_proxy" ):
                listener.enterIsa_pbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_reference_proxy" ):
                listener.exitIsa_pbx_reference_proxy(self)




    def isa_pbx_reference_proxy(self):

        localctx = PBXProjParser.Isa_pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_isa_pbx_reference_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.match(PBXProjParser.ISA)
            self.state = 1264
            self.match(PBXProjParser.T__2)
            self.state = 1265
            self.match(PBXProjParser.PBX_REFERENCE_PROXY)
            self.state = 1266
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_RESOURCES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_RESOURCES_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_resources_build_phase" ):
                listener.enterIsa_pbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_resources_build_phase" ):
                listener.exitIsa_pbx_resources_build_phase(self)




    def isa_pbx_resources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_isa_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(PBXProjParser.ISA)
            self.state = 1269
            self.match(PBXProjParser.T__2)
            self.state = 1270
            self.match(PBXProjParser.PBX_RESOURCES_BUILD_PHASE)
            self.state = 1271
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_SHELL_SCRIPT_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SHELL_SCRIPT_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_shell_script_build_phase" ):
                listener.enterIsa_pbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_shell_script_build_phase" ):
                listener.exitIsa_pbx_shell_script_build_phase(self)




    def isa_pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_isa_pbx_shell_script_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(PBXProjParser.ISA)
            self.state = 1274
            self.match(PBXProjParser.T__2)
            self.state = 1275
            self.match(PBXProjParser.PBX_SHELL_SCRIPT_BUILD_PHASE)
            self.state = 1276
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_shell_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_SHELL_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SHELL_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_shell_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_shell_build_phase" ):
                listener.enterIsa_pbx_shell_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_shell_build_phase" ):
                listener.exitIsa_pbx_shell_build_phase(self)




    def isa_pbx_shell_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_shell_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_isa_pbx_shell_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(PBXProjParser.ISA)
            self.state = 1279
            self.match(PBXProjParser.T__2)
            self.state = 1280
            self.match(PBXProjParser.PBX_SHELL_BUILD_PHASE)
            self.state = 1281
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_SOURCES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SOURCES_BUILD_PHASE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_sources_build_phase" ):
                listener.enterIsa_pbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_sources_build_phase" ):
                listener.exitIsa_pbx_sources_build_phase(self)




    def isa_pbx_sources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_isa_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(PBXProjParser.ISA)
            self.state = 1284
            self.match(PBXProjParser.T__2)
            self.state = 1285
            self.match(PBXProjParser.PBX_SOURCES_BUILD_PHASE)
            self.state = 1286
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_TARGET_DEPENDENCY(self):
            return self.getToken(PBXProjParser.PBX_TARGET_DEPENDENCY, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_target_dependency" ):
                listener.enterIsa_pbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_target_dependency" ):
                listener.exitIsa_pbx_target_dependency(self)




    def isa_pbx_target_dependency(self):

        localctx = PBXProjParser.Isa_pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_isa_pbx_target_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(PBXProjParser.ISA)
            self.state = 1289
            self.match(PBXProjParser.T__2)
            self.state = 1290
            self.match(PBXProjParser.PBX_TARGET_DEPENDENCY)
            self.state = 1291
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def PBX_VARIANT_GROUP(self):
            return self.getToken(PBXProjParser.PBX_VARIANT_GROUP, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_variant_group" ):
                listener.enterIsa_pbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_variant_group" ):
                listener.exitIsa_pbx_variant_group(self)




    def isa_pbx_variant_group(self):

        localctx = PBXProjParser.Isa_pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_isa_pbx_variant_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.match(PBXProjParser.ISA)
            self.state = 1294
            self.match(PBXProjParser.T__2)
            self.state = 1295
            self.match(PBXProjParser.PBX_VARIANT_GROUP)
            self.state = 1296
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_BUILD_CONFIGURATION(self):
            return self.getToken(PBXProjParser.XC_BUILD_CONFIGURATION, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_build_configuration" ):
                listener.enterIsa_xc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_build_configuration" ):
                listener.exitIsa_xc_build_configuration(self)




    def isa_xc_build_configuration(self):

        localctx = PBXProjParser.Isa_xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_isa_xc_build_configuration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(PBXProjParser.ISA)
            self.state = 1299
            self.match(PBXProjParser.T__2)
            self.state = 1300
            self.match(PBXProjParser.XC_BUILD_CONFIGURATION)
            self.state = 1301
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_CONFIGURATION_LIST(self):
            return self.getToken(PBXProjParser.XC_CONFIGURATION_LIST, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_configuration_list" ):
                listener.enterIsa_xc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_configuration_list" ):
                listener.exitIsa_xc_configuration_list(self)




    def isa_xc_configuration_list(self):

        localctx = PBXProjParser.Isa_xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_isa_xc_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(PBXProjParser.ISA)
            self.state = 1304
            self.match(PBXProjParser.T__2)
            self.state = 1305
            self.match(PBXProjParser.XC_CONFIGURATION_LIST)
            self.state = 1306
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_REMOTE_SWIFT_PACKAGE_REFERENCE(self):
            return self.getToken(PBXProjParser.XC_REMOTE_SWIFT_PACKAGE_REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_remote_swift_package_reference" ):
                listener.enterIsa_xc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_remote_swift_package_reference" ):
                listener.exitIsa_xc_remote_swift_package_reference(self)




    def isa_xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Isa_xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_isa_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.match(PBXProjParser.ISA)
            self.state = 1309
            self.match(PBXProjParser.T__2)
            self.state = 1310
            self.match(PBXProjParser.XC_REMOTE_SWIFT_PACKAGE_REFERENCE)
            self.state = 1311
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_local_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_LOCAL_SWIFT_PACKAGE_REFERENCE(self):
            return self.getToken(PBXProjParser.XC_LOCAL_SWIFT_PACKAGE_REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_local_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_local_swift_package_reference" ):
                listener.enterIsa_xc_local_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_local_swift_package_reference" ):
                listener.exitIsa_xc_local_swift_package_reference(self)




    def isa_xc_local_swift_package_reference(self):

        localctx = PBXProjParser.Isa_xc_local_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_isa_xc_local_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.match(PBXProjParser.ISA)
            self.state = 1314
            self.match(PBXProjParser.T__2)
            self.state = 1315
            self.match(PBXProjParser.XC_LOCAL_SWIFT_PACKAGE_REFERENCE)
            self.state = 1316
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY(self):
            return self.getToken(PBXProjParser.XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_swift_package_product_dependency" ):
                listener.enterIsa_xc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_swift_package_product_dependency" ):
                listener.exitIsa_xc_swift_package_product_dependency(self)




    def isa_xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Isa_xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_isa_xc_swift_package_product_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.match(PBXProjParser.ISA)
            self.state = 1319
            self.match(PBXProjParser.T__2)
            self.state = 1320
            self.match(PBXProjParser.XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY)
            self.state = 1321
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def XC_VERSION_GROUP(self):
            return self.getToken(PBXProjParser.XC_VERSION_GROUP, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_version_group" ):
                listener.enterIsa_xc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_version_group" ):
                listener.exitIsa_xc_version_group(self)




    def isa_xc_version_group(self):

        localctx = PBXProjParser.Isa_xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_isa_xc_version_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.match(PBXProjParser.ISA)
            self.state = 1324
            self.match(PBXProjParser.T__2)
            self.state = 1325
            self.match(PBXProjParser.XC_VERSION_GROUP)
            self.state = 1326
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Always_out_of_dateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALWAYS_OUT_OF_DATE(self):
            return self.getToken(PBXProjParser.ALWAYS_OUT_OF_DATE, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_always_out_of_date

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlways_out_of_date" ):
                listener.enterAlways_out_of_date(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlways_out_of_date" ):
                listener.exitAlways_out_of_date(self)




    def always_out_of_date(self):

        localctx = PBXProjParser.Always_out_of_dateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_always_out_of_date)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(PBXProjParser.ALWAYS_OUT_OF_DATE)
            self.state = 1329
            self.match(PBXProjParser.T__2)
            self.state = 1330
            self.match(PBXProjParser.NUMBER)
            self.state = 1331
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_REF(self):
            return self.getToken(PBXProjParser.FILE_REF, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_ref" ):
                listener.enterFile_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_ref" ):
                listener.exitFile_ref(self)




    def file_ref(self):

        localctx = PBXProjParser.File_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_file_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(PBXProjParser.FILE_REF)
            self.state = 1334
            self.match(PBXProjParser.T__2)
            self.state = 1335
            self.match(PBXProjParser.REFERENCE)
            self.state = 1336
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_REF(self):
            return self.getToken(PBXProjParser.PRODUCT_REF, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref" ):
                listener.enterProduct_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref" ):
                listener.exitProduct_ref(self)




    def product_ref(self):

        localctx = PBXProjParser.Product_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_product_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(PBXProjParser.PRODUCT_REF)
            self.state = 1339
            self.match(PBXProjParser.T__2)
            self.state = 1340
            self.match(PBXProjParser.REFERENCE)
            self.state = 1341
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Container_portalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINER_PORTAL(self):
            return self.getToken(PBXProjParser.CONTAINER_PORTAL, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_container_portal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_portal" ):
                listener.enterContainer_portal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_portal" ):
                listener.exitContainer_portal(self)




    def container_portal(self):

        localctx = PBXProjParser.Container_portalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_container_portal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.match(PBXProjParser.CONTAINER_PORTAL)
            self.state = 1344
            self.match(PBXProjParser.T__2)
            self.state = 1345
            self.match(PBXProjParser.REFERENCE)
            self.state = 1346
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROXY_TYPE(self):
            return self.getToken(PBXProjParser.PROXY_TYPE, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_proxy_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_type" ):
                listener.enterProxy_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_type" ):
                listener.exitProxy_type(self)




    def proxy_type(self):

        localctx = PBXProjParser.Proxy_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_proxy_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.match(PBXProjParser.PROXY_TYPE)
            self.state = 1349
            self.match(PBXProjParser.T__2)
            self.state = 1350
            self.match(PBXProjParser.NUMBER)
            self.state = 1351
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_global_id_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOTE_GLOBAL_ID_STRING(self):
            return self.getToken(PBXProjParser.REMOTE_GLOBAL_ID_STRING, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_global_id_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_global_id_string" ):
                listener.enterRemote_global_id_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_global_id_string" ):
                listener.exitRemote_global_id_string(self)




    def remote_global_id_string(self):

        localctx = PBXProjParser.Remote_global_id_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_remote_global_id_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.match(PBXProjParser.REMOTE_GLOBAL_ID_STRING)
            self.state = 1354
            self.match(PBXProjParser.T__2)
            self.state = 1355
            self.match(PBXProjParser.REFERENCE)
            self.state = 1356
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOTE_INFO(self):
            return self.getToken(PBXProjParser.REMOTE_INFO, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_info" ):
                listener.enterRemote_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_info" ):
                listener.exitRemote_info(self)




    def remote_info(self):

        localctx = PBXProjParser.Remote_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_remote_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.match(PBXProjParser.REMOTE_INFO)
            self.state = 1359
            self.match(PBXProjParser.T__2)
            self.state = 1360
            self.str_number_variable()
            self.state = 1361
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_ENCODING(self):
            return self.getToken(PBXProjParser.FILE_ENCODING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_encoding" ):
                listener.enterFile_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_encoding" ):
                listener.exitFile_encoding(self)




    def file_encoding(self):

        localctx = PBXProjParser.File_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_file_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(PBXProjParser.FILE_ENCODING)
            self.state = 1364
            self.match(PBXProjParser.T__2)
            self.state = 1365
            self.match(PBXProjParser.NUMBER)
            self.state = 1366
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS(self):
            return self.getToken(PBXProjParser.COMMENTS, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = PBXProjParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(PBXProjParser.COMMENTS)
            self.state = 1369
            self.match(PBXProjParser.T__2)
            self.state = 1370
            self.str_number_variable()
            self.state = 1371
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLICIT_FILE_TYPE(self):
            return self.getToken(PBXProjParser.EXPLICIT_FILE_TYPE, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_explicit_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_file_type" ):
                listener.enterExplicit_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_file_type" ):
                listener.exitExplicit_file_type(self)




    def explicit_file_type(self):

        localctx = PBXProjParser.Explicit_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_explicit_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.match(PBXProjParser.EXPLICIT_FILE_TYPE)
            self.state = 1374
            self.match(PBXProjParser.T__2)
            self.state = 1375
            self.str_number_variable()
            self.state = 1376
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_file_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLICIT_FILE_TYPES(self):
            return self.getToken(PBXProjParser.EXPLICIT_FILE_TYPES, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_explicit_file_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_file_types" ):
                listener.enterExplicit_file_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_file_types" ):
                listener.exitExplicit_file_types(self)




    def explicit_file_types(self):

        localctx = PBXProjParser.Explicit_file_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_explicit_file_types)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.match(PBXProjParser.EXPLICIT_FILE_TYPES)
            self.state = 1379
            self.match(PBXProjParser.T__2)
            self.state = 1380
            self.match(PBXProjParser.T__0)
            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -281753076498688) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 16106094591) != 0):
                self.state = 1381
                self.key_value()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1387
            self.match(PBXProjParser.T__1)
            self.state = 1388
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_foldersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLICIT_FOLDERS(self):
            return self.getToken(PBXProjParser.EXPLICIT_FOLDERS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_explicit_folders

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_folders" ):
                listener.enterExplicit_folders(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_folders" ):
                listener.exitExplicit_folders(self)




    def explicit_folders(self):

        localctx = PBXProjParser.Explicit_foldersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_explicit_folders)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(PBXProjParser.EXPLICIT_FOLDERS)
            self.state = 1391
            self.match(PBXProjParser.T__2)
            self.state = 1392
            self.any_string_list()
            self.state = 1393
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_known_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_KNOWN_FILE_TYPE(self):
            return self.getToken(PBXProjParser.LAST_KNOWN_FILE_TYPE, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_last_known_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_known_file_type" ):
                listener.enterLast_known_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_known_file_type" ):
                listener.exitLast_known_file_type(self)




    def last_known_file_type(self):

        localctx = PBXProjParser.Last_known_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_last_known_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(PBXProjParser.LAST_KNOWN_FILE_TYPE)
            self.state = 1396
            self.match(PBXProjParser.T__2)
            self.state = 1397
            self.str_number_variable()
            self.state = 1398
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_in_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE_IN_INDEX(self):
            return self.getToken(PBXProjParser.INCLUDE_IN_INDEX, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_include_in_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_in_index" ):
                listener.enterInclude_in_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_in_index" ):
                listener.exitInclude_in_index(self)




    def include_in_index(self):

        localctx = PBXProjParser.Include_in_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_include_in_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(PBXProjParser.INCLUDE_IN_INDEX)
            self.state = 1401
            self.match(PBXProjParser.T__2)
            self.state = 1402
            self.match(PBXProjParser.NUMBER)
            self.state = 1403
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indent_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT_WIDTH(self):
            return self.getToken(PBXProjParser.INDENT_WIDTH, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_indent_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndent_width" ):
                listener.enterIndent_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndent_width" ):
                listener.exitIndent_width(self)




    def indent_width(self):

        localctx = PBXProjParser.Indent_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_indent_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(PBXProjParser.INDENT_WIDTH)
            self.state = 1406
            self.match(PBXProjParser.T__2)
            self.state = 1407
            self.match(PBXProjParser.NUMBER)
            self.state = 1408
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tab_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB_WIDTH(self):
            return self.getToken(PBXProjParser.TAB_WIDTH, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_tab_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_width" ):
                listener.enterTab_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_width" ):
                listener.exitTab_width(self)




    def tab_width(self):

        localctx = PBXProjParser.Tab_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tab_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(PBXProjParser.TAB_WIDTH)
            self.state = 1411
            self.match(PBXProjParser.T__2)
            self.state = 1412
            self.match(PBXProjParser.NUMBER)
            self.state = 1413
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uses_tabsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USES_TABS(self):
            return self.getToken(PBXProjParser.USES_TABS, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_uses_tabs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUses_tabs" ):
                listener.enterUses_tabs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUses_tabs" ):
                listener.exitUses_tabs(self)




    def uses_tabs(self):

        localctx = PBXProjParser.Uses_tabsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_uses_tabs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.match(PBXProjParser.USES_TABS)
            self.state = 1416
            self.match(PBXProjParser.T__2)
            self.state = 1417
            self.match(PBXProjParser.NUMBER)
            self.state = 1418
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wraps_linesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRAPS_LINES(self):
            return self.getToken(PBXProjParser.WRAPS_LINES, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_wraps_lines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWraps_lines" ):
                listener.enterWraps_lines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWraps_lines" ):
                listener.exitWraps_lines(self)




    def wraps_lines(self):

        localctx = PBXProjParser.Wraps_linesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_wraps_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(PBXProjParser.WRAPS_LINES)
            self.state = 1421
            self.match(PBXProjParser.T__2)
            self.state = 1422
            self.match(PBXProjParser.NUMBER)
            self.state = 1423
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLATFORM_FILTER(self):
            return self.getToken(PBXProjParser.PLATFORM_FILTER, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_platform_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_filter" ):
                listener.enterPlatform_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_filter" ):
                listener.exitPlatform_filter(self)




    def platform_filter(self):

        localctx = PBXProjParser.Platform_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_platform_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(PBXProjParser.PLATFORM_FILTER)
            self.state = 1426
            self.match(PBXProjParser.T__2)
            self.state = 1427
            self.any_string()
            self.state = 1428
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_filtersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLATFORM_FILTERS(self):
            return self.getToken(PBXProjParser.PLATFORM_FILTERS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_platform_filters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_filters" ):
                listener.enterPlatform_filters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_filters" ):
                listener.exitPlatform_filters(self)




    def platform_filters(self):

        localctx = PBXProjParser.Platform_filtersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_platform_filters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.match(PBXProjParser.PLATFORM_FILTERS)
            self.state = 1431
            self.match(PBXProjParser.T__2)
            self.state = 1432
            self.any_string_list()
            self.state = 1433
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChildrenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHILDREN(self):
            return self.getToken(PBXProjParser.CHILDREN, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_children

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChildren" ):
                listener.enterChildren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChildren" ):
                listener.exitChildren(self)




    def children(self):

        localctx = PBXProjParser.ChildrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self.match(PBXProjParser.CHILDREN)
            self.state = 1436
            self.match(PBXProjParser.T__2)
            self.state = 1437
            self.reference_list()
            self.state = 1438
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_install_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_INSTALL_PATH(self):
            return self.getToken(PBXProjParser.PRODUCT_INSTALL_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_product_install_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_install_path" ):
                listener.enterProduct_install_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_install_path" ):
                listener.exitProduct_install_path(self)




    def product_install_path(self):

        localctx = PBXProjParser.Product_install_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_product_install_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(PBXProjParser.PRODUCT_INSTALL_PATH)
            self.state = 1441
            self.match(PBXProjParser.T__2)
            self.state = 1442
            self.any_string()
            self.state = 1443
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repository_urlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPOSITORY_URL(self):
            return self.getToken(PBXProjParser.REPOSITORY_URL, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_repository_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepository_url" ):
                listener.enterRepository_url(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepository_url" ):
                listener.exitRepository_url(self)




    def repository_url(self):

        localctx = PBXProjParser.Repository_urlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_repository_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(PBXProjParser.REPOSITORY_URL)
            self.state = 1446
            self.match(PBXProjParser.T__2)
            self.state = 1447
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1448
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relative_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIVE_PATH(self):
            return self.getToken(PBXProjParser.RELATIVE_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_relative_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelative_path" ):
                listener.enterRelative_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelative_path" ):
                listener.exitRelative_path(self)




    def relative_path(self):

        localctx = PBXProjParser.Relative_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_relative_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(PBXProjParser.RELATIVE_PATH)
            self.state = 1451
            self.match(PBXProjParser.T__2)
            self.state = 1452
            self.any_string()
            self.state = 1453
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIREMENT(self):
            return self.getToken(PBXProjParser.REQUIREMENT, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = PBXProjParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.match(PBXProjParser.REQUIREMENT)
            self.state = 1456
            self.match(PBXProjParser.T__2)
            self.state = 1457
            self.match(PBXProjParser.T__0)
            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -281753076498688) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 16106094591) != 0):
                self.state = 1458
                self.key_value()
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1464
            self.match(PBXProjParser.T__1)
            self.state = 1465
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_packageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(PBXProjParser.PACKAGE, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_package" ):
                listener.enterXc_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_package" ):
                listener.exitXc_package(self)




    def xc_package(self):

        localctx = PBXProjParser.Xc_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_xc_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.match(PBXProjParser.PACKAGE)
            self.state = 1468
            self.match(PBXProjParser.T__2)
            self.state = 1469
            self.match(PBXProjParser.REFERENCE)
            self.state = 1470
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_product_dependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE_PRODUCT_DEPENDENCIES(self):
            return self.getToken(PBXProjParser.PACKAGE_PRODUCT_DEPENDENCIES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_product_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_product_dependencies" ):
                listener.enterPackage_product_dependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_product_dependencies" ):
                listener.exitPackage_product_dependencies(self)




    def package_product_dependencies(self):

        localctx = PBXProjParser.Package_product_dependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_package_product_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.match(PBXProjParser.PACKAGE_PRODUCT_DEPENDENCIES)
            self.state = 1473
            self.match(PBXProjParser.T__2)
            self.state = 1474
            self.reference_list()
            self.state = 1475
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PBXProjParser.NAME, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = PBXProjParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.match(PBXProjParser.NAME)
            self.state = 1478
            self.match(PBXProjParser.T__2)
            self.state = 1479
            self.any_string()
            self.state = 1480
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH(self):
            return self.getToken(PBXProjParser.PATH, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)




    def path(self):

        localctx = PBXProjParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(PBXProjParser.PATH)
            self.state = 1483
            self.match(PBXProjParser.T__2)
            self.state = 1484
            self.str_number_variable()
            self.state = 1485
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_treeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE_TREE(self):
            return self.getToken(PBXProjParser.SOURCE_TREE, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_source_tree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_tree" ):
                listener.enterSource_tree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_tree" ):
                listener.exitSource_tree(self)




    def source_tree(self):

        localctx = PBXProjParser.Source_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_source_tree)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.match(PBXProjParser.SOURCE_TREE)
            self.state = 1488
            self.match(PBXProjParser.T__2)
            self.state = 1489
            self.any_string()
            self.state = 1490
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_action_maskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_ACTION_MASK(self):
            return self.getToken(PBXProjParser.BUILD_ACTION_MASK, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_action_mask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_action_mask" ):
                listener.enterBuild_action_mask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_action_mask" ):
                listener.exitBuild_action_mask(self)




    def build_action_mask(self):

        localctx = PBXProjParser.Build_action_maskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_build_action_mask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1492
            self.match(PBXProjParser.BUILD_ACTION_MASK)
            self.state = 1493
            self.match(PBXProjParser.T__2)
            self.state = 1494
            self.match(PBXProjParser.NUMBER)
            self.state = 1495
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILES(self):
            return self.getToken(PBXProjParser.FILES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiles" ):
                listener.enterFiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiles" ):
                listener.exitFiles(self)




    def files(self):

        localctx = PBXProjParser.FilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_files)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(PBXProjParser.FILES)
            self.state = 1498
            self.match(PBXProjParser.T__2)
            self.state = 1499
            self.reference_list()
            self.state = 1500
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Run_only_for_deployment_postprocessingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING(self):
            return self.getToken(PBXProjParser.RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_run_only_for_deployment_postprocessing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRun_only_for_deployment_postprocessing" ):
                listener.enterRun_only_for_deployment_postprocessing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRun_only_for_deployment_postprocessing" ):
                listener.exitRun_only_for_deployment_postprocessing(self)




    def run_only_for_deployment_postprocessing(self):

        localctx = PBXProjParser.Run_only_for_deployment_postprocessingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_run_only_for_deployment_postprocessing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.match(PBXProjParser.RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING)
            self.state = 1503
            self.match(PBXProjParser.T__2)
            self.state = 1504
            self.match(PBXProjParser.NUMBER)
            self.state = 1505
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_reference_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_list" ):
                listener.enterReference_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_list" ):
                listener.exitReference_list(self)




    def reference_list(self):

        localctx = PBXProjParser.Reference_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_reference_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(PBXProjParser.T__4)
            self.state = 1512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==158:
                self.state = 1508
                self.match(PBXProjParser.REFERENCE)
                self.state = 1509
                self.match(PBXProjParser.T__5)
                self.state = 1514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1515
            self.match(PBXProjParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_string_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def str_number_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Str_number_variableContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string_list" ):
                listener.enterAny_string_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string_list" ):
                listener.exitAny_string_list(self)




    def any_string_list(self):

        localctx = PBXProjParser.Any_string_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_any_string_list)
        self._la = 0 # Token type
        try:
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1517
                self.match(PBXProjParser.T__4)
                self.state = 1518
                self.match(PBXProjParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.match(PBXProjParser.T__4)
                self.state = 1520
                self.str_number_variable()
                self.state = 1525
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1521
                        self.match(PBXProjParser.T__5)
                        self.state = 1522
                        self.str_number_variable() 
                    self.state = 1527
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 1528
                    self.match(PBXProjParser.T__5)


                self.state = 1531
                self.match(PBXProjParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_quoted_strings_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.NON_QUOTED_STRING)
            else:
                return self.getToken(PBXProjParser.NON_QUOTED_STRING, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_non_quoted_strings_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_quoted_strings_list" ):
                listener.enterNon_quoted_strings_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_quoted_strings_list" ):
                listener.exitNon_quoted_strings_list(self)




    def non_quoted_strings_list(self):

        localctx = PBXProjParser.Non_quoted_strings_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_non_quoted_strings_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(PBXProjParser.T__4)
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==160:
                self.state = 1536
                self.match(PBXProjParser.NON_QUOTED_STRING)
                self.state = 1537
                self.match(PBXProjParser.T__5)
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1543
            self.match(PBXProjParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_CONFIGURATION_LIST(self):
            return self.getToken(PBXProjParser.BUILD_CONFIGURATION_LIST, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configuration_list" ):
                listener.enterBuild_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configuration_list" ):
                listener.exitBuild_configuration_list(self)




    def build_configuration_list(self):

        localctx = PBXProjParser.Build_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_build_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            self.match(PBXProjParser.BUILD_CONFIGURATION_LIST)
            self.state = 1546
            self.match(PBXProjParser.T__2)
            self.state = 1547
            self.match(PBXProjParser.REFERENCE)
            self.state = 1548
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_phasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_PHASES(self):
            return self.getToken(PBXProjParser.BUILD_PHASES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_phases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_phases" ):
                listener.enterBuild_phases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_phases" ):
                listener.exitBuild_phases(self)




    def build_phases(self):

        localctx = PBXProjParser.Build_phasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_build_phases)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.match(PBXProjParser.BUILD_PHASES)
            self.state = 1551
            self.match(PBXProjParser.T__2)
            self.state = 1552
            self.reference_list()
            self.state = 1553
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_RULES(self):
            return self.getToken(PBXProjParser.BUILD_RULES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_rules" ):
                listener.enterBuild_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_rules" ):
                listener.exitBuild_rules(self)




    def build_rules(self):

        localctx = PBXProjParser.Build_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_build_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.match(PBXProjParser.BUILD_RULES)
            self.state = 1556
            self.match(PBXProjParser.T__2)
            self.state = 1557
            self.reference_list()
            self.state = 1558
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_arguments_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_ARGUMENTS_STRING(self):
            return self.getToken(PBXProjParser.BUILD_ARGUMENTS_STRING, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_arguments_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_arguments_string" ):
                listener.enterBuild_arguments_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_arguments_string" ):
                listener.exitBuild_arguments_string(self)




    def build_arguments_string(self):

        localctx = PBXProjParser.Build_arguments_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_build_arguments_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self.match(PBXProjParser.BUILD_ARGUMENTS_STRING)
            self.state = 1561
            self.match(PBXProjParser.T__2)
            self.state = 1562
            self.any_string()
            self.state = 1563
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_tool_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_TOOL_PATH(self):
            return self.getToken(PBXProjParser.BUILD_TOOL_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_tool_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_tool_path" ):
                listener.enterBuild_tool_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_tool_path" ):
                listener.exitBuild_tool_path(self)




    def build_tool_path(self):

        localctx = PBXProjParser.Build_tool_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_build_tool_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self.match(PBXProjParser.BUILD_TOOL_PATH)
            self.state = 1566
            self.match(PBXProjParser.T__2)
            self.state = 1567
            self.any_string()
            self.state = 1568
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_working_directoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_WORKING_DIRECTORY(self):
            return self.getToken(PBXProjParser.BUILD_WORKING_DIRECTORY, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_working_directory

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_working_directory" ):
                listener.enterBuild_working_directory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_working_directory" ):
                listener.exitBuild_working_directory(self)




    def build_working_directory(self):

        localctx = PBXProjParser.Build_working_directoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_build_working_directory)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.match(PBXProjParser.BUILD_WORKING_DIRECTORY)
            self.state = 1571
            self.match(PBXProjParser.T__2)
            self.state = 1572
            self.any_string()
            self.state = 1573
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_build_settings_in_environmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS_BUILD_SETTINGS_IN_ENVIRONMENT(self):
            return self.getToken(PBXProjParser.PASS_BUILD_SETTINGS_IN_ENVIRONMENT, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_pass_build_settings_in_environment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_build_settings_in_environment" ):
                listener.enterPass_build_settings_in_environment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_build_settings_in_environment" ):
                listener.exitPass_build_settings_in_environment(self)




    def pass_build_settings_in_environment(self):

        localctx = PBXProjParser.Pass_build_settings_in_environmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_pass_build_settings_in_environment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.match(PBXProjParser.PASS_BUILD_SETTINGS_IN_ENVIRONMENT)
            self.state = 1576
            self.match(PBXProjParser.T__2)
            self.state = 1577
            self.match(PBXProjParser.NUMBER)
            self.state = 1578
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEPENDENCIES(self):
            return self.getToken(PBXProjParser.DEPENDENCIES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependencies" ):
                listener.enterDependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependencies" ):
                listener.exitDependencies(self)




    def dependencies(self):

        localctx = PBXProjParser.DependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self.match(PBXProjParser.DEPENDENCIES)
            self.state = 1581
            self.match(PBXProjParser.T__2)
            self.state = 1582
            self.reference_list()
            self.state = 1583
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_NAME(self):
            return self.getToken(PBXProjParser.PRODUCT_NAME, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_product_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_name" ):
                listener.enterProduct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_name" ):
                listener.exitProduct_name(self)




    def product_name(self):

        localctx = PBXProjParser.Product_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_product_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(PBXProjParser.PRODUCT_NAME)
            self.state = 1586
            self.match(PBXProjParser.T__2)
            self.state = 1587
            self.str_number_variable()
            self.state = 1588
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_REFERENCE(self):
            return self.getToken(PBXProjParser.PRODUCT_REFERENCE, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_reference" ):
                listener.enterProduct_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_reference" ):
                listener.exitProduct_reference(self)




    def product_reference(self):

        localctx = PBXProjParser.Product_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_product_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1590
            self.match(PBXProjParser.PRODUCT_REFERENCE)
            self.state = 1591
            self.match(PBXProjParser.T__2)
            self.state = 1592
            self.match(PBXProjParser.REFERENCE)
            self.state = 1593
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_TYPE(self):
            return self.getToken(PBXProjParser.PRODUCT_TYPE, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_type" ):
                listener.enterProduct_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_type" ):
                listener.exitProduct_type(self)




    def product_type(self):

        localctx = PBXProjParser.Product_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_product_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.match(PBXProjParser.PRODUCT_TYPE)
            self.state = 1596
            self.match(PBXProjParser.T__2)
            self.state = 1597
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1598
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_endingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_ENDING(self):
            return self.getToken(PBXProjParser.LINE_ENDING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_line_ending

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_ending" ):
                listener.enterLine_ending(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_ending" ):
                listener.exitLine_ending(self)




    def line_ending(self):

        localctx = PBXProjParser.Line_endingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_line_ending)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(PBXProjParser.LINE_ENDING)
            self.state = 1601
            self.match(PBXProjParser.T__2)
            self.state = 1602
            self.match(PBXProjParser.NUMBER)
            self.state = 1603
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_language_specification_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XC_LANGUAGE_SPECIFICATION_IDENTIFIER(self):
            return self.getToken(PBXProjParser.XC_LANGUAGE_SPECIFICATION_IDENTIFIER, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_language_specification_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_language_specification_identifier" ):
                listener.enterXc_language_specification_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_language_specification_identifier" ):
                listener.exitXc_language_specification_identifier(self)




    def xc_language_specification_identifier(self):

        localctx = PBXProjParser.Xc_language_specification_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_xc_language_specification_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.match(PBXProjParser.XC_LANGUAGE_SPECIFICATION_IDENTIFIER)
            self.state = 1606
            self.match(PBXProjParser.T__2)
            self.state = 1607
            self.str_number_variable()
            self.state = 1608
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plist_structure_definition_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLIST_STRUCTURE_DEFINITION_IDENTIFIER(self):
            return self.getToken(PBXProjParser.PLIST_STRUCTURE_DEFINITION_IDENTIFIER, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_plist_structure_definition_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlist_structure_definition_identifier" ):
                listener.enterPlist_structure_definition_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlist_structure_definition_identifier" ):
                listener.exitPlist_structure_definition_identifier(self)




    def plist_structure_definition_identifier(self):

        localctx = PBXProjParser.Plist_structure_definition_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_plist_structure_definition_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(PBXProjParser.PLIST_STRUCTURE_DEFINITION_IDENTIFIER)
            self.state = 1611
            self.match(PBXProjParser.T__2)
            self.state = 1612
            self.str_number_variable()
            self.state = 1613
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ref_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF_TYPE(self):
            return self.getToken(PBXProjParser.REF_TYPE, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_ref_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_type" ):
                listener.enterRef_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_type" ):
                listener.exitRef_type(self)




    def ref_type(self):

        localctx = PBXProjParser.Ref_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_ref_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self.match(PBXProjParser.REF_TYPE)
            self.state = 1616
            self.match(PBXProjParser.T__2)
            self.state = 1617
            self.match(PBXProjParser.NUMBER)
            self.state = 1618
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compiler_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPILER_SPEC(self):
            return self.getToken(PBXProjParser.COMPILER_SPEC, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_compiler_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_spec" ):
                listener.enterCompiler_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_spec" ):
                listener.exitCompiler_spec(self)




    def compiler_spec(self):

        localctx = PBXProjParser.Compiler_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_compiler_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(PBXProjParser.COMPILER_SPEC)
            self.state = 1621
            self.match(PBXProjParser.T__2)
            self.state = 1622
            self.any_string()
            self.state = 1623
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_PATTERNS(self):
            return self.getToken(PBXProjParser.FILE_PATTERNS, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_file_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_patterns" ):
                listener.enterFile_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_patterns" ):
                listener.exitFile_patterns(self)




    def file_patterns(self):

        localctx = PBXProjParser.File_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_file_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(PBXProjParser.FILE_PATTERNS)
            self.state = 1626
            self.match(PBXProjParser.T__2)
            self.state = 1627
            self.any_string()
            self.state = 1628
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT_FILES(self):
            return self.getToken(PBXProjParser.INPUT_FILES, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_files" ):
                listener.enterInput_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_files" ):
                listener.exitInput_files(self)




    def input_files(self):

        localctx = PBXProjParser.Input_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_input_files)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.match(PBXProjParser.INPUT_FILES)
            self.state = 1631
            self.match(PBXProjParser.T__2)
            self.state = 1632
            self.any_string_list()
            self.state = 1633
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_editableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_EDITABLE(self):
            return self.getToken(PBXProjParser.IS_EDITABLE, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_is_editable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_editable" ):
                listener.enterIs_editable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_editable" ):
                listener.exitIs_editable(self)




    def is_editable(self):

        localctx = PBXProjParser.Is_editableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_is_editable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(PBXProjParser.IS_EDITABLE)
            self.state = 1636
            self.match(PBXProjParser.T__2)
            self.state = 1637
            self.match(PBXProjParser.NUMBER)
            self.state = 1638
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT_FILES(self):
            return self.getToken(PBXProjParser.OUTPUT_FILES, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_files" ):
                listener.enterOutput_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_files" ):
                listener.exitOutput_files(self)




    def output_files(self):

        localctx = PBXProjParser.Output_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_output_files)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(PBXProjParser.OUTPUT_FILES)
            self.state = 1641
            self.match(PBXProjParser.T__2)
            self.state = 1642
            self.any_string_list()
            self.state = 1643
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Run_once_per_archContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RUN_ONCE_PER_ARCH(self):
            return self.getToken(PBXProjParser.RUN_ONCE_PER_ARCH, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_run_once_per_arch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRun_once_per_arch" ):
                listener.enterRun_once_per_arch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRun_once_per_arch" ):
                listener.exitRun_once_per_arch(self)




    def run_once_per_arch(self):

        localctx = PBXProjParser.Run_once_per_archContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_run_once_per_arch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(PBXProjParser.RUN_ONCE_PER_ARCH)
            self.state = 1646
            self.match(PBXProjParser.T__2)
            self.state = 1647
            self.match(PBXProjParser.NUMBER)
            self.state = 1648
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCRIPT(self):
            return self.getToken(PBXProjParser.SCRIPT, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)




    def script(self):

        localctx = PBXProjParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_script)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.match(PBXProjParser.SCRIPT)
            self.state = 1651
            self.match(PBXProjParser.T__2)
            self.state = 1652
            self.any_string()
            self.state = 1653
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTES(self):
            return self.getToken(PBXProjParser.ATTRIBUTES, 0)

        def build_targets_in_parallel(self):
            return self.getTypedRuleContext(PBXProjParser.Build_targets_in_parallelContext,0)


        def class_prefix(self):
            return self.getTypedRuleContext(PBXProjParser.Class_prefixContext,0)


        def default_build_system_type_for_workspace(self):
            return self.getTypedRuleContext(PBXProjParser.Default_build_system_type_for_workspaceContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def last_swift_update_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_update_checkContext,0)


        def last_testing_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_testing_upgrade_checkContext,0)


        def last_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_upgrade_checkContext,0)


        def organization_name(self):
            return self.getTypedRuleContext(PBXProjParser.Organization_nameContext,0)


        def target_attributes(self):
            return self.getTypedRuleContext(PBXProjParser.Target_attributesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PBXProjParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.match(PBXProjParser.ATTRIBUTES)
            self.state = 1656
            self.match(PBXProjParser.T__2)
            self.state = 1657
            self.match(PBXProjParser.T__0)
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 1658
                self.build_targets_in_parallel()


            self.state = 1662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 1661
                self.class_prefix()


            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 1664
                self.default_build_system_type_for_workspace()


            self.state = 1668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 1667
                self.last_swift_migration()


            self.state = 1671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 1670
                self.last_swift_update_check()


            self.state = 1674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 1673
                self.last_testing_upgrade_check()


            self.state = 1677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1676
                self.last_upgrade_check()


            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1679
                self.organization_name()


            self.state = 1683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 1682
                self.target_attributes()


            self.state = 1685
            self.match(PBXProjParser.T__1)
            self.state = 1686
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_migrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_SWIFT_MIGRATION(self):
            return self.getToken(PBXProjParser.LAST_SWIFT_MIGRATION, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_migration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_migration" ):
                listener.enterLast_swift_migration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_migration" ):
                listener.exitLast_swift_migration(self)




    def last_swift_migration(self):

        localctx = PBXProjParser.Last_swift_migrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_last_swift_migration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.match(PBXProjParser.LAST_SWIFT_MIGRATION)
            self.state = 1689
            self.match(PBXProjParser.T__2)
            self.state = 1690
            self.match(PBXProjParser.NUMBER)
            self.state = 1691
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_build_system_type_for_workspaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE(self):
            return self.getToken(PBXProjParser.DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_build_system_type_for_workspace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_build_system_type_for_workspace" ):
                listener.enterDefault_build_system_type_for_workspace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_build_system_type_for_workspace" ):
                listener.exitDefault_build_system_type_for_workspace(self)




    def default_build_system_type_for_workspace(self):

        localctx = PBXProjParser.Default_build_system_type_for_workspaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_default_build_system_type_for_workspace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.match(PBXProjParser.DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE)
            self.state = 1694
            self.match(PBXProjParser.T__2)
            self.state = 1695
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1696
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_update_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_SWIFT_UPDATE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_SWIFT_UPDATE_CHECK, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_update_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_update_check" ):
                listener.enterLast_swift_update_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_update_check" ):
                listener.exitLast_swift_update_check(self)




    def last_swift_update_check(self):

        localctx = PBXProjParser.Last_swift_update_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_last_swift_update_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.match(PBXProjParser.LAST_SWIFT_UPDATE_CHECK)
            self.state = 1699
            self.match(PBXProjParser.T__2)
            self.state = 1700
            self.match(PBXProjParser.NUMBER)
            self.state = 1701
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_targets_in_parallelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_INDEPENDENT_TARGETS_IN_PARALLEL(self):
            return self.getToken(PBXProjParser.BUILD_INDEPENDENT_TARGETS_IN_PARALLEL, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_targets_in_parallel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_targets_in_parallel" ):
                listener.enterBuild_targets_in_parallel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_targets_in_parallel" ):
                listener.exitBuild_targets_in_parallel(self)




    def build_targets_in_parallel(self):

        localctx = PBXProjParser.Build_targets_in_parallelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_build_targets_in_parallel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self.match(PBXProjParser.BUILD_INDEPENDENT_TARGETS_IN_PARALLEL)
            self.state = 1704
            self.match(PBXProjParser.T__2)
            self.state = 1705
            _la = self._input.LA(1)
            if not(_la==13 or _la==160):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1706
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_testing_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_TESTING_UPGRADE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_TESTING_UPGRADE_CHECK, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_testing_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_testing_upgrade_check" ):
                listener.enterLast_testing_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_testing_upgrade_check" ):
                listener.exitLast_testing_upgrade_check(self)




    def last_testing_upgrade_check(self):

        localctx = PBXProjParser.Last_testing_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_last_testing_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.match(PBXProjParser.LAST_TESTING_UPGRADE_CHECK)
            self.state = 1709
            self.match(PBXProjParser.T__2)
            self.state = 1710
            self.match(PBXProjParser.NUMBER)
            self.state = 1711
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAST_UPGRADE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_UPGRADE_CHECK, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_upgrade_check" ):
                listener.enterLast_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_upgrade_check" ):
                listener.exitLast_upgrade_check(self)




    def last_upgrade_check(self):

        localctx = PBXProjParser.Last_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_last_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.match(PBXProjParser.LAST_UPGRADE_CHECK)
            self.state = 1714
            self.match(PBXProjParser.T__2)
            self.state = 1715
            self.match(PBXProjParser.NUMBER)
            self.state = 1716
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Organization_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORGANIZATION_NAME(self):
            return self.getToken(PBXProjParser.ORGANIZATION_NAME, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_organization_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrganization_name" ):
                listener.enterOrganization_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrganization_name" ):
                listener.exitOrganization_name(self)




    def organization_name(self):

        localctx = PBXProjParser.Organization_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_organization_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.match(PBXProjParser.ORGANIZATION_NAME)
            self.state = 1719
            self.match(PBXProjParser.T__2)
            self.state = 1720
            self.str_number_variable()
            self.state = 1721
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_ATTRIBUTES(self):
            return self.getToken(PBXProjParser.TARGET_ATTRIBUTES, 0)

        def target_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Target_attributeContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Target_attributeContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attributes" ):
                listener.enterTarget_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attributes" ):
                listener.exitTarget_attributes(self)




    def target_attributes(self):

        localctx = PBXProjParser.Target_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_target_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.match(PBXProjParser.TARGET_ATTRIBUTES)
            self.state = 1724
            self.match(PBXProjParser.T__2)
            self.state = 1725
            self.match(PBXProjParser.T__0)
            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==158:
                self.state = 1726
                self.target_attribute()
                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1732
            self.match(PBXProjParser.T__1)
            self.state = 1733
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def created_on_tools_version(self):
            return self.getTypedRuleContext(PBXProjParser.Created_on_tools_versionContext,0)


        def test_target_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Test_target_idContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Test_target_idContext,i)


        def development_team(self):
            return self.getTypedRuleContext(PBXProjParser.Development_teamContext,0)


        def development_team_name(self):
            return self.getTypedRuleContext(PBXProjParser.Development_team_nameContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def provisioning_style(self):
            return self.getTypedRuleContext(PBXProjParser.Provisioning_styleContext,0)


        def system_capabilities(self):
            return self.getTypedRuleContext(PBXProjParser.System_capabilitiesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attribute" ):
                listener.enterTarget_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attribute" ):
                listener.exitTarget_attribute(self)




    def target_attribute(self):

        localctx = PBXProjParser.Target_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_target_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(PBXProjParser.REFERENCE)
            self.state = 1736
            self.match(PBXProjParser.T__2)
            self.state = 1737
            self.match(PBXProjParser.T__0)
            self.state = 1739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 1738
                self.created_on_tools_version()


            self.state = 1742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1741
                self.test_target_id()


            self.state = 1745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 1744
                self.development_team()


            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1747
                self.development_team_name()


            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 1750
                self.last_swift_migration()


            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1753
                self.provisioning_style()


            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1756
                self.system_capabilities()


            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 1759
                self.test_target_id()


            self.state = 1762
            self.match(PBXProjParser.T__1)
            self.state = 1763
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Created_on_tools_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATED_ON_TOOLS_VERSION(self):
            return self.getToken(PBXProjParser.CREATED_ON_TOOLS_VERSION, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_created_on_tools_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreated_on_tools_version" ):
                listener.enterCreated_on_tools_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreated_on_tools_version" ):
                listener.exitCreated_on_tools_version(self)




    def created_on_tools_version(self):

        localctx = PBXProjParser.Created_on_tools_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_created_on_tools_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(PBXProjParser.CREATED_ON_TOOLS_VERSION)
            self.state = 1766
            self.match(PBXProjParser.T__2)
            self.state = 1767
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1768
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_target_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEST_TARGET_ID(self):
            return self.getToken(PBXProjParser.TEST_TARGET_ID, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_test_target_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_target_id" ):
                listener.enterTest_target_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_target_id" ):
                listener.exitTest_target_id(self)




    def test_target_id(self):

        localctx = PBXProjParser.Test_target_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_test_target_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self.match(PBXProjParser.TEST_TARGET_ID)
            self.state = 1771
            self.match(PBXProjParser.T__2)
            self.state = 1772
            self.match(PBXProjParser.REFERENCE)
            self.state = 1773
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_teamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEVELOPMENT_TEAM(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_TEAM, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team" ):
                listener.enterDevelopment_team(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team" ):
                listener.exitDevelopment_team(self)




    def development_team(self):

        localctx = PBXProjParser.Development_teamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_development_team)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.match(PBXProjParser.DEVELOPMENT_TEAM)
            self.state = 1776
            self.match(PBXProjParser.T__2)
            self.state = 1777
            self.any_string()
            self.state = 1778
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_team_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEVELOPMENT_TEAM_NAME(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_TEAM_NAME, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team_name" ):
                listener.enterDevelopment_team_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team_name" ):
                listener.exitDevelopment_team_name(self)




    def development_team_name(self):

        localctx = PBXProjParser.Development_team_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_development_team_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(PBXProjParser.DEVELOPMENT_TEAM_NAME)
            self.state = 1781
            self.match(PBXProjParser.T__2)
            self.state = 1782
            self.any_string()
            self.state = 1783
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provisioning_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROVISIONING_STYLE(self):
            return self.getToken(PBXProjParser.PROVISIONING_STYLE, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_provisioning_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvisioning_style" ):
                listener.enterProvisioning_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvisioning_style" ):
                listener.exitProvisioning_style(self)




    def provisioning_style(self):

        localctx = PBXProjParser.Provisioning_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_provisioning_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self.match(PBXProjParser.PROVISIONING_STYLE)
            self.state = 1786
            self.match(PBXProjParser.T__2)
            self.state = 1787
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1788
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compatibility_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPATIBILITY_VERSION(self):
            return self.getToken(PBXProjParser.COMPATIBILITY_VERSION, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_compatibility_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompatibility_version" ):
                listener.enterCompatibility_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompatibility_version" ):
                listener.exitCompatibility_version(self)




    def compatibility_version(self):

        localctx = PBXProjParser.Compatibility_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_compatibility_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self.match(PBXProjParser.COMPATIBILITY_VERSION)
            self.state = 1791
            self.match(PBXProjParser.T__2)
            self.state = 1792
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1793
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_regionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEVELOPMENT_REGION(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_REGION, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_region

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_region" ):
                listener.enterDevelopment_region(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_region" ):
                listener.exitDevelopment_region(self)




    def development_region(self):

        localctx = PBXProjParser.Development_regionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_development_region)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(PBXProjParser.DEVELOPMENT_REGION)
            self.state = 1796
            self.match(PBXProjParser.T__2)
            self.state = 1797
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1798
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_scanned_for_encodingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAS_SCANNED_FOR_ENCODINGS(self):
            return self.getToken(PBXProjParser.HAS_SCANNED_FOR_ENCODINGS, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_has_scanned_for_encodings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_scanned_for_encodings" ):
                listener.enterHas_scanned_for_encodings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_scanned_for_encodings" ):
                listener.exitHas_scanned_for_encodings(self)




    def has_scanned_for_encodings(self):

        localctx = PBXProjParser.Has_scanned_for_encodingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_has_scanned_for_encodings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self.match(PBXProjParser.HAS_SCANNED_FOR_ENCODINGS)
            self.state = 1801
            self.match(PBXProjParser.T__2)
            self.state = 1802
            self.match(PBXProjParser.NUMBER)
            self.state = 1803
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Known_regionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KNOWN_REGIONS(self):
            return self.getToken(PBXProjParser.KNOWN_REGIONS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_known_regions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKnown_regions" ):
                listener.enterKnown_regions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKnown_regions" ):
                listener.exitKnown_regions(self)




    def known_regions(self):

        localctx = PBXProjParser.Known_regionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_known_regions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.match(PBXProjParser.KNOWN_REGIONS)
            self.state = 1806
            self.match(PBXProjParser.T__2)
            self.state = 1807
            self.any_string_list()
            self.state = 1808
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAIN_GROUP(self):
            return self.getToken(PBXProjParser.MAIN_GROUP, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_main_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_group" ):
                listener.enterMain_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_group" ):
                listener.exitMain_group(self)




    def main_group(self):

        localctx = PBXProjParser.Main_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_main_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.match(PBXProjParser.MAIN_GROUP)
            self.state = 1811
            self.match(PBXProjParser.T__2)
            self.state = 1812
            self.match(PBXProjParser.REFERENCE)
            self.state = 1813
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_ref_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_REF_GROUP(self):
            return self.getToken(PBXProjParser.PRODUCT_REF_GROUP, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref_group" ):
                listener.enterProduct_ref_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref_group" ):
                listener.exitProduct_ref_group(self)




    def product_ref_group(self):

        localctx = PBXProjParser.Product_ref_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_product_ref_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.match(PBXProjParser.PRODUCT_REF_GROUP)
            self.state = 1816
            self.match(PBXProjParser.T__2)
            self.state = 1817
            self.match(PBXProjParser.REFERENCE)
            self.state = 1818
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE_REFERENCES(self):
            return self.getToken(PBXProjParser.PACKAGE_REFERENCES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_references" ):
                listener.enterPackage_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_references" ):
                listener.exitPackage_references(self)




    def package_references(self):

        localctx = PBXProjParser.Package_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_package_references)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(PBXProjParser.PACKAGE_REFERENCES)
            self.state = 1821
            self.match(PBXProjParser.T__2)
            self.state = 1822
            self.reference_list()
            self.state = 1823
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preferred_project_object_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREFERRED_PROJECT_OBJECT_VERSION(self):
            return self.getToken(PBXProjParser.PREFERRED_PROJECT_OBJECT_VERSION, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_preferred_project_object_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreferred_project_object_version" ):
                listener.enterPreferred_project_object_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreferred_project_object_version" ):
                listener.exitPreferred_project_object_version(self)




    def preferred_project_object_version(self):

        localctx = PBXProjParser.Preferred_project_object_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_preferred_project_object_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.match(PBXProjParser.PREFERRED_PROJECT_OBJECT_VERSION)
            self.state = 1826
            self.match(PBXProjParser.T__2)
            self.state = 1827
            self.match(PBXProjParser.NUMBER)
            self.state = 1828
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_dir_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_DIR_PATH(self):
            return self.getToken(PBXProjParser.PRODUCT_DIR_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_dir_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_dir_path" ):
                listener.enterProject_dir_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_dir_path" ):
                listener.exitProject_dir_path(self)




    def project_dir_path(self):

        localctx = PBXProjParser.Project_dir_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_project_dir_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.match(PBXProjParser.PRODUCT_DIR_PATH)
            self.state = 1831
            self.match(PBXProjParser.T__2)
            self.state = 1832
            self.any_string()
            self.state = 1833
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROJECT_REFERENCES(self):
            return self.getToken(PBXProjParser.PROJECT_REFERENCES, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def project_references_list(self):
            return self.getTypedRuleContext(PBXProjParser.Project_references_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references" ):
                listener.enterProject_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references" ):
                listener.exitProject_references(self)




    def project_references(self):

        localctx = PBXProjParser.Project_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_project_references)
        try:
            self.state = 1847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1835
                self.match(PBXProjParser.PROJECT_REFERENCES)
                self.state = 1836
                self.match(PBXProjParser.T__2)
                self.state = 1837
                self.str_number_variable()
                self.state = 1838
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1840
                self.match(PBXProjParser.PROJECT_REFERENCES)
                self.state = 1841
                self.match(PBXProjParser.T__2)
                self.state = 1842
                self.match(PBXProjParser.T__4)
                self.state = 1843
                self.project_references_list()
                self.state = 1844
                self.match(PBXProjParser.T__6)
                self.state = 1845
                self.match(PBXProjParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_rootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROJECT_ROOT(self):
            return self.getToken(PBXProjParser.PROJECT_ROOT, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_root" ):
                listener.enterProject_root(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_root" ):
                listener.exitProject_root(self)




    def project_root(self):

        localctx = PBXProjParser.Project_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_project_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self.match(PBXProjParser.PROJECT_ROOT)
            self.state = 1850
            self.match(PBXProjParser.T__2)
            self.state = 1851
            self.any_string()
            self.state = 1852
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGETS(self):
            return self.getToken(PBXProjParser.TARGETS, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_targets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargets" ):
                listener.enterTargets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargets" ):
                listener.exitTargets(self)




    def targets(self):

        localctx = PBXProjParser.TargetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_targets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            self.match(PBXProjParser.TARGETS)
            self.state = 1855
            self.match(PBXProjParser.T__2)
            self.state = 1856
            self.reference_list()
            self.state = 1857
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT_FILE_LIST_PATHS(self):
            return self.getToken(PBXProjParser.INPUT_FILE_LIST_PATHS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_file_list_paths" ):
                listener.enterInput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_file_list_paths" ):
                listener.exitInput_file_list_paths(self)




    def input_file_list_paths(self):

        localctx = PBXProjParser.Input_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_input_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(PBXProjParser.INPUT_FILE_LIST_PATHS)
            self.state = 1860
            self.match(PBXProjParser.T__2)
            self.state = 1861
            self.any_string_list()
            self.state = 1862
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT_PATHS(self):
            return self.getToken(PBXProjParser.INPUT_PATHS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_paths" ):
                listener.enterInput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_paths" ):
                listener.exitInput_paths(self)




    def input_paths(self):

        localctx = PBXProjParser.Input_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_input_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(PBXProjParser.INPUT_PATHS)
            self.state = 1865
            self.match(PBXProjParser.T__2)
            self.state = 1866
            self.any_string_list()
            self.state = 1867
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT_FILE_LIST_PATHS(self):
            return self.getToken(PBXProjParser.OUTPUT_FILE_LIST_PATHS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_file_list_paths" ):
                listener.enterOutput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_file_list_paths" ):
                listener.exitOutput_file_list_paths(self)




    def output_file_list_paths(self):

        localctx = PBXProjParser.Output_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_output_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            self.match(PBXProjParser.OUTPUT_FILE_LIST_PATHS)
            self.state = 1870
            self.match(PBXProjParser.T__2)
            self.state = 1871
            self.any_string_list()
            self.state = 1872
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT_PATHS(self):
            return self.getToken(PBXProjParser.OUTPUT_PATHS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_paths" ):
                listener.enterOutput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_paths" ):
                listener.exitOutput_paths(self)




    def output_paths(self):

        localctx = PBXProjParser.Output_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_output_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            self.match(PBXProjParser.OUTPUT_PATHS)
            self.state = 1875
            self.match(PBXProjParser.T__2)
            self.state = 1876
            self.any_string_list()
            self.state = 1877
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHELL_PATH(self):
            return self.getToken(PBXProjParser.SHELL_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_path" ):
                listener.enterShell_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_path" ):
                listener.exitShell_path(self)




    def shell_path(self):

        localctx = PBXProjParser.Shell_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_shell_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self.match(PBXProjParser.SHELL_PATH)
            self.state = 1880
            self.match(PBXProjParser.T__2)
            self.state = 1881
            self.any_string()
            self.state = 1882
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShellContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHELL(self):
            return self.getToken(PBXProjParser.SHELL, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell" ):
                listener.enterShell(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell" ):
                listener.exitShell(self)




    def shell(self):

        localctx = PBXProjParser.ShellContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_shell)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884
            self.match(PBXProjParser.SHELL)
            self.state = 1885
            self.match(PBXProjParser.T__2)
            self.state = 1886
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1887
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_scriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHELL_SCRIPT(self):
            return self.getToken(PBXProjParser.SHELL_SCRIPT, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_script" ):
                listener.enterShell_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_script" ):
                listener.exitShell_script(self)




    def shell_script(self):

        localctx = PBXProjParser.Shell_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_shell_script)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            self.match(PBXProjParser.SHELL_SCRIPT)
            self.state = 1890
            self.match(PBXProjParser.T__2)
            self.state = 1891
            self.any_string()
            self.state = 1892
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_env_vars_in_logContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_ENV_VARS_IN_LOG(self):
            return self.getToken(PBXProjParser.SHOW_ENV_VARS_IN_LOG, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_show_env_vars_in_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_env_vars_in_log" ):
                listener.enterShow_env_vars_in_log(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_env_vars_in_log" ):
                listener.exitShow_env_vars_in_log(self)




    def show_env_vars_in_log(self):

        localctx = PBXProjParser.Show_env_vars_in_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_show_env_vars_in_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.match(PBXProjParser.SHOW_ENV_VARS_IN_LOG)
            self.state = 1895
            self.match(PBXProjParser.T__2)
            self.state = 1896
            self.match(PBXProjParser.NUMBER)
            self.state = 1897
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET(self):
            return self.getToken(PBXProjParser.TARGET, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget" ):
                listener.enterTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget" ):
                listener.exitTarget(self)




    def target(self):

        localctx = PBXProjParser.TargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1899
            self.match(PBXProjParser.TARGET)
            self.state = 1900
            self.match(PBXProjParser.T__2)
            self.state = 1901
            self.match(PBXProjParser.REFERENCE)
            self.state = 1902
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_PROXY(self):
            return self.getToken(PBXProjParser.TARGET_PROXY, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_proxy" ):
                listener.enterTarget_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_proxy" ):
                listener.exitTarget_proxy(self)




    def target_proxy(self):

        localctx = PBXProjParser.Target_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_target_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.match(PBXProjParser.TARGET_PROXY)
            self.state = 1905
            self.match(PBXProjParser.T__2)
            self.state = 1906
            self.match(PBXProjParser.REFERENCE)
            self.state = 1907
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_TYPE(self):
            return self.getToken(PBXProjParser.FILE_TYPE, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_type" ):
                listener.enterFile_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_type" ):
                listener.exitFile_type(self)




    def file_type(self):

        localctx = PBXProjParser.File_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.match(PBXProjParser.FILE_TYPE)
            self.state = 1910
            self.match(PBXProjParser.T__2)
            self.state = 1911
            self.str_number_variable()
            self.state = 1912
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOTE_REF(self):
            return self.getToken(PBXProjParser.REMOTE_REF, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_ref" ):
                listener.enterRemote_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_ref" ):
                listener.exitRemote_ref(self)




    def remote_ref(self):

        localctx = PBXProjParser.Remote_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_remote_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(PBXProjParser.REMOTE_REF)
            self.state = 1915
            self.match(PBXProjParser.T__2)
            self.state = 1916
            self.match(PBXProjParser.REFERENCE)
            self.state = 1917
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_configuration_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASE_CONFIGURATION_REFERENCE(self):
            return self.getToken(PBXProjParser.BASE_CONFIGURATION_REFERENCE, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_base_configuration_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_configuration_reference" ):
                listener.enterBase_configuration_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_configuration_reference" ):
                listener.exitBase_configuration_reference(self)




    def base_configuration_reference(self):

        localctx = PBXProjParser.Base_configuration_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_base_configuration_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1919
            self.match(PBXProjParser.BASE_CONFIGURATION_REFERENCE)
            self.state = 1920
            self.match(PBXProjParser.T__2)
            self.state = 1921
            self.match(PBXProjParser.REFERENCE)
            self.state = 1922
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_SETTINGS(self):
            return self.getToken(PBXProjParser.BUILD_SETTINGS, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_settings" ):
                listener.enterBuild_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_settings" ):
                listener.exitBuild_settings(self)




    def build_settings(self):

        localctx = PBXProjParser.Build_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_build_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self.match(PBXProjParser.BUILD_SETTINGS)
            self.state = 1925
            self.match(PBXProjParser.T__2)
            self.state = 1926
            self.match(PBXProjParser.T__0)
            self.state = 1930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -281753076498688) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 16106094591) != 0):
                self.state = 1927
                self.key_value()
                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1933
            self.match(PBXProjParser.T__1)
            self.state = 1934
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_stylesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_STYLES(self):
            return self.getToken(PBXProjParser.BUILD_STYLES, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_styles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_styles" ):
                listener.enterBuild_styles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_styles" ):
                listener.exitBuild_styles(self)




    def build_styles(self):

        localctx = PBXProjParser.Build_stylesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_build_styles)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self.match(PBXProjParser.BUILD_STYLES)
            self.state = 1937
            self.match(PBXProjParser.T__2)
            self.state = 1938
            self.reference_list()
            self.state = 1939
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DST_PATH(self):
            return self.getToken(PBXProjParser.DST_PATH, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_path" ):
                listener.enterDst_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_path" ):
                listener.exitDst_path(self)




    def dst_path(self):

        localctx = PBXProjParser.Dst_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_dst_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.match(PBXProjParser.DST_PATH)
            self.state = 1942
            self.match(PBXProjParser.T__2)
            self.state = 1943
            self.any_string()
            self.state = 1944
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_subfolder_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DST_SUBFOLDER_SPEC(self):
            return self.getToken(PBXProjParser.DST_SUBFOLDER_SPEC, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_subfolder_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_subfolder_spec" ):
                listener.enterDst_subfolder_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_subfolder_spec" ):
                listener.exitDst_subfolder_spec(self)




    def dst_subfolder_spec(self):

        localctx = PBXProjParser.Dst_subfolder_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_dst_subfolder_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.match(PBXProjParser.DST_SUBFOLDER_SPEC)
            self.state = 1947
            self.match(PBXProjParser.T__2)
            self.state = 1948
            self.match(PBXProjParser.NUMBER)
            self.state = 1949
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def project_references_list_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Project_references_list_elementContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Project_references_list_elementContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list" ):
                listener.enterProject_references_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list" ):
                listener.exitProject_references_list(self)




    def project_references_list(self):

        localctx = PBXProjParser.Project_references_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_project_references_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1951
                self.project_references_list_element()
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_list_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRODUCT_GROUP(self):
            return self.getToken(PBXProjParser.PRODUCT_GROUP, 0)

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def PROJECT_REF(self):
            return self.getToken(PBXProjParser.PROJECT_REF, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list_element" ):
                listener.enterProject_references_list_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list_element" ):
                listener.exitProject_references_list_element(self)




    def project_references_list_element(self):

        localctx = PBXProjParser.Project_references_list_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_project_references_list_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self.match(PBXProjParser.T__0)
            self.state = 1958
            self.match(PBXProjParser.PRODUCT_GROUP)
            self.state = 1959
            self.match(PBXProjParser.T__2)
            self.state = 1960
            self.match(PBXProjParser.REFERENCE)
            self.state = 1961
            self.match(PBXProjParser.T__3)
            self.state = 1962
            self.match(PBXProjParser.PROJECT_REF)
            self.state = 1963
            self.match(PBXProjParser.T__2)
            self.state = 1964
            self.match(PBXProjParser.REFERENCE)
            self.state = 1965
            self.match(PBXProjParser.T__3)
            self.state = 1966
            self.match(PBXProjParser.T__1)
            self.state = 1967
            self.match(PBXProjParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Membership_exceptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBERSHIP_EXCEPTIONS(self):
            return self.getToken(PBXProjParser.MEMBERSHIP_EXCEPTIONS, 0)

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_membership_exceptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMembership_exceptions" ):
                listener.enterMembership_exceptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMembership_exceptions" ):
                listener.exitMembership_exceptions(self)




    def membership_exceptions(self):

        localctx = PBXProjParser.Membership_exceptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_membership_exceptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(PBXProjParser.MEMBERSHIP_EXCEPTIONS)
            self.state = 1970
            self.match(PBXProjParser.T__2)
            self.state = 1971
            self.any_string_list()
            self.state = 1972
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(PBXProjParser.EXCEPTIONS, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_exceptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptions" ):
                listener.enterExceptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptions" ):
                listener.exitExceptions(self)




    def exceptions(self):

        localctx = PBXProjParser.ExceptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_exceptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.match(PBXProjParser.EXCEPTIONS)
            self.state = 1975
            self.match(PBXProjParser.T__2)
            self.state = 1976
            self.reference_list()
            self.state = 1977
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def str_number_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Str_number_variableContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,i)


        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def ALPHA_NUMERIC(self):
            return self.getToken(PBXProjParser.ALPHA_NUMERIC, 0)

        def key_value(self):
            return self.getTypedRuleContext(PBXProjParser.Key_valueContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_key_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value" ):
                listener.enterKey_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value" ):
                listener.exitKey_value(self)




    def key_value(self):

        localctx = PBXProjParser.Key_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_key_value)
        self._la = 0 # Token type
        try:
            self.state = 2020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1979
                self.str_number_variable()
                self.state = 1980
                self.match(PBXProjParser.T__2)
                self.state = 1981
                self.str_number_variable()
                self.state = 1982
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1984
                self.str_number_variable()
                self.state = 1985
                self.match(PBXProjParser.T__2)
                self.state = 1986
                self.match(PBXProjParser.NUMBER)
                self.state = 1987
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1989
                self.str_number_variable()
                self.state = 1990
                self.match(PBXProjParser.T__2)
                self.state = 1991
                self.match(PBXProjParser.ALPHA_NUMERIC)
                self.state = 1992
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1994
                self.str_number_variable()
                self.state = 1995
                self.match(PBXProjParser.T__2)
                self.state = 1996
                self.match(PBXProjParser.T__0)
                self.state = 1997
                self.key_value()
                self.state = 1998
                self.match(PBXProjParser.T__1)
                self.state = 1999
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2001
                self.str_number_variable()
                self.state = 2002
                self.match(PBXProjParser.T__2)
                self.state = 2003
                self.match(PBXProjParser.T__4)
                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -281753076498688) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 16106094591) != 0):
                    self.state = 2004
                    self.str_number_variable()


                self.state = 2011
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2007
                        self.match(PBXProjParser.T__5)
                        self.state = 2008
                        self.str_number_variable() 
                    self.state = 2013
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 2014
                    self.match(PBXProjParser.T__5)


                self.state = 2017
                self.match(PBXProjParser.T__6)
                self.state = 2018
                self.match(PBXProjParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configurationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BUILD_CONFIGURATIONS(self):
            return self.getToken(PBXProjParser.BUILD_CONFIGURATIONS, 0)

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configurations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configurations" ):
                listener.enterBuild_configurations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configurations" ):
                listener.exitBuild_configurations(self)




    def build_configurations(self):

        localctx = PBXProjParser.Build_configurationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_build_configurations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.match(PBXProjParser.BUILD_CONFIGURATIONS)
            self.state = 2023
            self.match(PBXProjParser.T__2)
            self.state = 2024
            self.reference_list()
            self.state = 2025
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_is_visibleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_CONFIGURATION_IS_VISIBLE(self):
            return self.getToken(PBXProjParser.DEFAULT_CONFIGURATION_IS_VISIBLE, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_is_visible

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_is_visible" ):
                listener.enterDefault_configuration_is_visible(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_is_visible" ):
                listener.exitDefault_configuration_is_visible(self)




    def default_configuration_is_visible(self):

        localctx = PBXProjParser.Default_configuration_is_visibleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_default_configuration_is_visible)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.match(PBXProjParser.DEFAULT_CONFIGURATION_IS_VISIBLE)
            self.state = 2028
            self.match(PBXProjParser.T__2)
            self.state = 2029
            self.match(PBXProjParser.NUMBER)
            self.state = 2030
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_CONFIGURATION_NAME(self):
            return self.getToken(PBXProjParser.DEFAULT_CONFIGURATION_NAME, 0)

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_name" ):
                listener.enterDefault_configuration_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_name" ):
                listener.exitDefault_configuration_name(self)




    def default_configuration_name(self):

        localctx = PBXProjParser.Default_configuration_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_default_configuration_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.match(PBXProjParser.DEFAULT_CONFIGURATION_NAME)
            self.state = 2033
            self.match(PBXProjParser.T__2)
            self.state = 2034
            self.any_string()
            self.state = 2035
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(PBXProjParser.SETTINGS, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettings" ):
                listener.enterSettings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettings" ):
                listener.exitSettings(self)




    def settings(self):

        localctx = PBXProjParser.SettingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self.match(PBXProjParser.SETTINGS)
            self.state = 2038
            self.match(PBXProjParser.T__2)
            self.state = 2039
            self.match(PBXProjParser.T__0)
            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -281753076498688) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 16106094591) != 0):
                self.state = 2040
                self.key_value()
                self.state = 2045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2046
            self.match(PBXProjParser.T__1)
            self.state = 2047
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_capabilitiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEM_CAPABILITIES(self):
            return self.getToken(PBXProjParser.SYSTEM_CAPABILITIES, 0)

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_system_capabilities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_capabilities" ):
                listener.enterSystem_capabilities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_capabilities" ):
                listener.exitSystem_capabilities(self)




    def system_capabilities(self):

        localctx = PBXProjParser.System_capabilitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_system_capabilities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.match(PBXProjParser.SYSTEM_CAPABILITIES)
            self.state = 2050
            self.match(PBXProjParser.T__2)
            self.state = 2051
            self.match(PBXProjParser.T__0)
            self.state = 2055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -281753076498688) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 16106094591) != 0):
                self.state = 2052
                self.key_value()
                self.state = 2057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2058
            self.match(PBXProjParser.T__1)
            self.state = 2059
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Current_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_VERSION(self):
            return self.getToken(PBXProjParser.CURRENT_VERSION, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_current_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_version" ):
                listener.enterCurrent_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_version" ):
                listener.exitCurrent_version(self)




    def current_version(self):

        localctx = PBXProjParser.Current_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_current_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.match(PBXProjParser.CURRENT_VERSION)
            self.state = 2062
            self.match(PBXProjParser.T__2)
            self.state = 2063
            self.match(PBXProjParser.REFERENCE)
            self.state = 2064
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Version_group_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION_GROUP_TYPE(self):
            return self.getToken(PBXProjParser.VERSION_GROUP_TYPE, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_version_group_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion_group_type" ):
                listener.enterVersion_group_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion_group_type" ):
                listener.exitVersion_group_type(self)




    def version_group_type(self):

        localctx = PBXProjParser.Version_group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_version_group_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.match(PBXProjParser.VERSION_GROUP_TYPE)
            self.state = 2067
            self.match(PBXProjParser.T__2)
            self.state = 2068
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 2069
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSPREFIX(self):
            return self.getToken(PBXProjParser.CLASSPREFIX, 0)

        def str_number_variable(self):
            return self.getTypedRuleContext(PBXProjParser.Str_number_variableContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_class_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefix" ):
                listener.enterClass_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefix" ):
                listener.exitClass_prefix(self)




    def class_prefix(self):

        localctx = PBXProjParser.Class_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_class_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(PBXProjParser.CLASSPREFIX)
            self.state = 2072
            self.match(PBXProjParser.T__2)
            self.state = 2073
            self.str_number_variable()
            self.state = 2074
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def UNDERSCORE(self):
            return self.getToken(PBXProjParser.UNDERSCORE, 0)

        def DASH(self):
            return self.getToken(PBXProjParser.DASH, 0)

        def DOT(self):
            return self.getToken(PBXProjParser.DOT, 0)

        def any_token(self):
            return self.getTypedRuleContext(PBXProjParser.Any_tokenContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string" ):
                listener.enterAny_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string" ):
                listener.exitAny_string(self)




    def any_string(self):

        localctx = PBXProjParser.Any_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_any_string)
        try:
            self.state = 2082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2076
                self.match(PBXProjParser.NON_QUOTED_STRING)
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2077
                self.match(PBXProjParser.QUOTED_STRING)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2078
                self.match(PBXProjParser.UNDERSCORE)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2079
                self.match(PBXProjParser.DASH)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2080
                self.match(PBXProjParser.DOT)
                pass
            elif token in [8, 9, 12, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2081
                self.any_token()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Str_number_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def VARIABLE(self):
            return self.getToken(PBXProjParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_str_number_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStr_number_variable" ):
                listener.enterStr_number_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStr_number_variable" ):
                listener.exitStr_number_variable(self)




    def str_number_variable(self):

        localctx = PBXProjParser.Str_number_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_str_number_variable)
        try:
            self.state = 2087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2084
                self.any_string()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2085
                self.match(PBXProjParser.NUMBER)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2086
                self.match(PBXProjParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_tokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE_VERSION(self):
            return self.getToken(PBXProjParser.ARCHIVE_VERSION, 0)

        def CLASSES(self):
            return self.getToken(PBXProjParser.CLASSES, 0)

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def OBJECT_VERSION(self):
            return self.getToken(PBXProjParser.OBJECT_VERSION, 0)

        def OBJECTS(self):
            return self.getToken(PBXProjParser.OBJECTS, 0)

        def ROOT_OBJECT(self):
            return self.getToken(PBXProjParser.ROOT_OBJECT, 0)

        def PBX_AGGREGATE_TARGET(self):
            return self.getToken(PBXProjParser.PBX_AGGREGATE_TARGET, 0)

        def PBX_BUILD_FILE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_FILE, 0)

        def PBX_BUILD_RULE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_RULE, 0)

        def PBX_BUILD_STYLE(self):
            return self.getToken(PBXProjParser.PBX_BUILD_STYLE, 0)

        def PBX_CONTAINER_ITEM_PROXY(self):
            return self.getToken(PBXProjParser.PBX_CONTAINER_ITEM_PROXY, 0)

        def PBX_COPY_FILES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_COPY_FILES_BUILD_PHASE, 0)

        def PBX_FILE_REFERENCE(self):
            return self.getToken(PBXProjParser.PBX_FILE_REFERENCE, 0)

        def PBX_FILE_SYSTEM_SYNCHRONIZED_BUILD_FILE_EXCEPTION_SET(self):
            return self.getToken(PBXProjParser.PBX_FILE_SYSTEM_SYNCHRONIZED_BUILD_FILE_EXCEPTION_SET, 0)

        def PBX_FILE_SYSTEM_SYNCHRONIZED_ROOT_GROUP(self):
            return self.getToken(PBXProjParser.PBX_FILE_SYSTEM_SYNCHRONIZED_ROOT_GROUP, 0)

        def PBX_FRAMEWORKS_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_FRAMEWORKS_BUILD_PHASE, 0)

        def PBX_NATIVE_TARGET(self):
            return self.getToken(PBXProjParser.PBX_NATIVE_TARGET, 0)

        def PBX_LEGACY_TARGET(self):
            return self.getToken(PBXProjParser.PBX_LEGACY_TARGET, 0)

        def PBX_PROJECT(self):
            return self.getToken(PBXProjParser.PBX_PROJECT, 0)

        def PBX_REFERENCE_PROXY(self):
            return self.getToken(PBXProjParser.PBX_REFERENCE_PROXY, 0)

        def PBX_RESOURCES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_RESOURCES_BUILD_PHASE, 0)

        def PBX_SHELL_SCRIPT_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SHELL_SCRIPT_BUILD_PHASE, 0)

        def PBX_SOURCES_BUILD_PHASE(self):
            return self.getToken(PBXProjParser.PBX_SOURCES_BUILD_PHASE, 0)

        def PBX_TARGET_DEPENDENCY(self):
            return self.getToken(PBXProjParser.PBX_TARGET_DEPENDENCY, 0)

        def PBX_VARIANT_GROUP(self):
            return self.getToken(PBXProjParser.PBX_VARIANT_GROUP, 0)

        def PREFERRED_PROJECT_OBJECT_VERSION(self):
            return self.getToken(PBXProjParser.PREFERRED_PROJECT_OBJECT_VERSION, 0)

        def XC_BUILD_CONFIGURATION(self):
            return self.getToken(PBXProjParser.XC_BUILD_CONFIGURATION, 0)

        def XC_CONFIGURATION_LIST(self):
            return self.getToken(PBXProjParser.XC_CONFIGURATION_LIST, 0)

        def XC_REMOTE_SWIFT_PACKAGE_REFERENCE(self):
            return self.getToken(PBXProjParser.XC_REMOTE_SWIFT_PACKAGE_REFERENCE, 0)

        def XC_LOCAL_SWIFT_PACKAGE_REFERENCE(self):
            return self.getToken(PBXProjParser.XC_LOCAL_SWIFT_PACKAGE_REFERENCE, 0)

        def XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY(self):
            return self.getToken(PBXProjParser.XC_SWIFT_PACKAGE_PRODUCT_DEPENDENCY, 0)

        def XC_VERSION_GROUP(self):
            return self.getToken(PBXProjParser.XC_VERSION_GROUP, 0)

        def FILE_REF(self):
            return self.getToken(PBXProjParser.FILE_REF, 0)

        def PRODUCT_REF(self):
            return self.getToken(PBXProjParser.PRODUCT_REF, 0)

        def CONTAINER_PORTAL(self):
            return self.getToken(PBXProjParser.CONTAINER_PORTAL, 0)

        def PROXY_TYPE(self):
            return self.getToken(PBXProjParser.PROXY_TYPE, 0)

        def REMOTE_GLOBAL_ID_STRING(self):
            return self.getToken(PBXProjParser.REMOTE_GLOBAL_ID_STRING, 0)

        def REMOTE_INFO(self):
            return self.getToken(PBXProjParser.REMOTE_INFO, 0)

        def FILE_ENCODING(self):
            return self.getToken(PBXProjParser.FILE_ENCODING, 0)

        def COMMENTS(self):
            return self.getToken(PBXProjParser.COMMENTS, 0)

        def EXPLICIT_FILE_TYPE(self):
            return self.getToken(PBXProjParser.EXPLICIT_FILE_TYPE, 0)

        def EXPLICIT_FILE_TYPES(self):
            return self.getToken(PBXProjParser.EXPLICIT_FILE_TYPES, 0)

        def EXPLICIT_FOLDERS(self):
            return self.getToken(PBXProjParser.EXPLICIT_FOLDERS, 0)

        def LAST_KNOWN_FILE_TYPE(self):
            return self.getToken(PBXProjParser.LAST_KNOWN_FILE_TYPE, 0)

        def INCLUDE_IN_INDEX(self):
            return self.getToken(PBXProjParser.INCLUDE_IN_INDEX, 0)

        def INDENT_WIDTH(self):
            return self.getToken(PBXProjParser.INDENT_WIDTH, 0)

        def TAB_WIDTH(self):
            return self.getToken(PBXProjParser.TAB_WIDTH, 0)

        def USES_TABS(self):
            return self.getToken(PBXProjParser.USES_TABS, 0)

        def WRAPS_LINES(self):
            return self.getToken(PBXProjParser.WRAPS_LINES, 0)

        def PLATFORM_FILTER(self):
            return self.getToken(PBXProjParser.PLATFORM_FILTER, 0)

        def PLATFORM_FILTERS(self):
            return self.getToken(PBXProjParser.PLATFORM_FILTERS, 0)

        def CHILDREN(self):
            return self.getToken(PBXProjParser.CHILDREN, 0)

        def PRODUCT_INSTALL_PATH(self):
            return self.getToken(PBXProjParser.PRODUCT_INSTALL_PATH, 0)

        def REPOSITORY_URL(self):
            return self.getToken(PBXProjParser.REPOSITORY_URL, 0)

        def RELATIVE_PATH(self):
            return self.getToken(PBXProjParser.RELATIVE_PATH, 0)

        def REQUIREMENT(self):
            return self.getToken(PBXProjParser.REQUIREMENT, 0)

        def PACKAGE(self):
            return self.getToken(PBXProjParser.PACKAGE, 0)

        def PACKAGE_PRODUCT_DEPENDENCIES(self):
            return self.getToken(PBXProjParser.PACKAGE_PRODUCT_DEPENDENCIES, 0)

        def NAME(self):
            return self.getToken(PBXProjParser.NAME, 0)

        def PATH(self):
            return self.getToken(PBXProjParser.PATH, 0)

        def SOURCE_TREE(self):
            return self.getToken(PBXProjParser.SOURCE_TREE, 0)

        def BUILD_ACTION_MASK(self):
            return self.getToken(PBXProjParser.BUILD_ACTION_MASK, 0)

        def FILES(self):
            return self.getToken(PBXProjParser.FILES, 0)

        def RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING(self):
            return self.getToken(PBXProjParser.RUN_ONLY_FOR_DEPLOYMENT_POSTPROCESSING, 0)

        def BUILD_CONFIGURATION_LIST(self):
            return self.getToken(PBXProjParser.BUILD_CONFIGURATION_LIST, 0)

        def BUILD_PHASES(self):
            return self.getToken(PBXProjParser.BUILD_PHASES, 0)

        def BUILD_RULES(self):
            return self.getToken(PBXProjParser.BUILD_RULES, 0)

        def BUILD_ARGUMENTS_STRING(self):
            return self.getToken(PBXProjParser.BUILD_ARGUMENTS_STRING, 0)

        def BUILD_TOOL_PATH(self):
            return self.getToken(PBXProjParser.BUILD_TOOL_PATH, 0)

        def BUILD_WORKING_DIRECTORY(self):
            return self.getToken(PBXProjParser.BUILD_WORKING_DIRECTORY, 0)

        def PASS_BUILD_SETTINGS_IN_ENVIRONMENT(self):
            return self.getToken(PBXProjParser.PASS_BUILD_SETTINGS_IN_ENVIRONMENT, 0)

        def DEPENDENCIES(self):
            return self.getToken(PBXProjParser.DEPENDENCIES, 0)

        def PRODUCT_NAME(self):
            return self.getToken(PBXProjParser.PRODUCT_NAME, 0)

        def PRODUCT_REFERENCE(self):
            return self.getToken(PBXProjParser.PRODUCT_REFERENCE, 0)

        def PRODUCT_TYPE(self):
            return self.getToken(PBXProjParser.PRODUCT_TYPE, 0)

        def LINE_ENDING(self):
            return self.getToken(PBXProjParser.LINE_ENDING, 0)

        def XC_LANGUAGE_SPECIFICATION_IDENTIFIER(self):
            return self.getToken(PBXProjParser.XC_LANGUAGE_SPECIFICATION_IDENTIFIER, 0)

        def PLIST_STRUCTURE_DEFINITION_IDENTIFIER(self):
            return self.getToken(PBXProjParser.PLIST_STRUCTURE_DEFINITION_IDENTIFIER, 0)

        def REF_TYPE(self):
            return self.getToken(PBXProjParser.REF_TYPE, 0)

        def COMPILER_SPEC(self):
            return self.getToken(PBXProjParser.COMPILER_SPEC, 0)

        def FILE_PATTERNS(self):
            return self.getToken(PBXProjParser.FILE_PATTERNS, 0)

        def INPUT_FILES(self):
            return self.getToken(PBXProjParser.INPUT_FILES, 0)

        def IS_EDITABLE(self):
            return self.getToken(PBXProjParser.IS_EDITABLE, 0)

        def OUTPUT_FILES(self):
            return self.getToken(PBXProjParser.OUTPUT_FILES, 0)

        def RUN_ONCE_PER_ARCH(self):
            return self.getToken(PBXProjParser.RUN_ONCE_PER_ARCH, 0)

        def SCRIPT(self):
            return self.getToken(PBXProjParser.SCRIPT, 0)

        def ATTRIBUTES(self):
            return self.getToken(PBXProjParser.ATTRIBUTES, 0)

        def LAST_SWIFT_MIGRATION(self):
            return self.getToken(PBXProjParser.LAST_SWIFT_MIGRATION, 0)

        def DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE(self):
            return self.getToken(PBXProjParser.DEFAULT_BUILD_SYSTEM_TYPE_FOR_WORKSPACE, 0)

        def LAST_SWIFT_UPDATE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_SWIFT_UPDATE_CHECK, 0)

        def BUILD_INDEPENDENT_TARGETS_IN_PARALLEL(self):
            return self.getToken(PBXProjParser.BUILD_INDEPENDENT_TARGETS_IN_PARALLEL, 0)

        def LAST_TESTING_UPGRADE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_TESTING_UPGRADE_CHECK, 0)

        def LAST_UPGRADE_CHECK(self):
            return self.getToken(PBXProjParser.LAST_UPGRADE_CHECK, 0)

        def ORGANIZATION_NAME(self):
            return self.getToken(PBXProjParser.ORGANIZATION_NAME, 0)

        def TARGET_ATTRIBUTES(self):
            return self.getToken(PBXProjParser.TARGET_ATTRIBUTES, 0)

        def CREATED_ON_TOOLS_VERSION(self):
            return self.getToken(PBXProjParser.CREATED_ON_TOOLS_VERSION, 0)

        def TEST_TARGET_ID(self):
            return self.getToken(PBXProjParser.TEST_TARGET_ID, 0)

        def DEVELOPMENT_TEAM(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_TEAM, 0)

        def DEVELOPMENT_TEAM_NAME(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_TEAM_NAME, 0)

        def PROVISIONING_STYLE(self):
            return self.getToken(PBXProjParser.PROVISIONING_STYLE, 0)

        def COMPATIBILITY_VERSION(self):
            return self.getToken(PBXProjParser.COMPATIBILITY_VERSION, 0)

        def DEVELOPMENT_REGION(self):
            return self.getToken(PBXProjParser.DEVELOPMENT_REGION, 0)

        def HAS_SCANNED_FOR_ENCODINGS(self):
            return self.getToken(PBXProjParser.HAS_SCANNED_FOR_ENCODINGS, 0)

        def KNOWN_REGIONS(self):
            return self.getToken(PBXProjParser.KNOWN_REGIONS, 0)

        def MAIN_GROUP(self):
            return self.getToken(PBXProjParser.MAIN_GROUP, 0)

        def PRODUCT_REF_GROUP(self):
            return self.getToken(PBXProjParser.PRODUCT_REF_GROUP, 0)

        def PACKAGE_REFERENCES(self):
            return self.getToken(PBXProjParser.PACKAGE_REFERENCES, 0)

        def PRODUCT_DIR_PATH(self):
            return self.getToken(PBXProjParser.PRODUCT_DIR_PATH, 0)

        def PROJECT_REFERENCES(self):
            return self.getToken(PBXProjParser.PROJECT_REFERENCES, 0)

        def PROJECT_ROOT(self):
            return self.getToken(PBXProjParser.PROJECT_ROOT, 0)

        def TARGETS(self):
            return self.getToken(PBXProjParser.TARGETS, 0)

        def INPUT_FILE_LIST_PATHS(self):
            return self.getToken(PBXProjParser.INPUT_FILE_LIST_PATHS, 0)

        def INPUT_PATHS(self):
            return self.getToken(PBXProjParser.INPUT_PATHS, 0)

        def OUTPUT_FILE_LIST_PATHS(self):
            return self.getToken(PBXProjParser.OUTPUT_FILE_LIST_PATHS, 0)

        def OUTPUT_PATHS(self):
            return self.getToken(PBXProjParser.OUTPUT_PATHS, 0)

        def SHELL_PATH(self):
            return self.getToken(PBXProjParser.SHELL_PATH, 0)

        def SHELL(self):
            return self.getToken(PBXProjParser.SHELL, 0)

        def SHELL_SCRIPT(self):
            return self.getToken(PBXProjParser.SHELL_SCRIPT, 0)

        def SHOW_ENV_VARS_IN_LOG(self):
            return self.getToken(PBXProjParser.SHOW_ENV_VARS_IN_LOG, 0)

        def TARGET(self):
            return self.getToken(PBXProjParser.TARGET, 0)

        def TARGET_PROXY(self):
            return self.getToken(PBXProjParser.TARGET_PROXY, 0)

        def FILE_TYPE(self):
            return self.getToken(PBXProjParser.FILE_TYPE, 0)

        def REMOTE_REF(self):
            return self.getToken(PBXProjParser.REMOTE_REF, 0)

        def BASE_CONFIGURATION_REFERENCE(self):
            return self.getToken(PBXProjParser.BASE_CONFIGURATION_REFERENCE, 0)

        def BUILD_SETTINGS(self):
            return self.getToken(PBXProjParser.BUILD_SETTINGS, 0)

        def DST_PATH(self):
            return self.getToken(PBXProjParser.DST_PATH, 0)

        def DST_SUBFOLDER_SPEC(self):
            return self.getToken(PBXProjParser.DST_SUBFOLDER_SPEC, 0)

        def PRODUCT_GROUP(self):
            return self.getToken(PBXProjParser.PRODUCT_GROUP, 0)

        def PROJECT_REF(self):
            return self.getToken(PBXProjParser.PROJECT_REF, 0)

        def BUILD_CONFIGURATIONS(self):
            return self.getToken(PBXProjParser.BUILD_CONFIGURATIONS, 0)

        def DEFAULT_CONFIGURATION_IS_VISIBLE(self):
            return self.getToken(PBXProjParser.DEFAULT_CONFIGURATION_IS_VISIBLE, 0)

        def DEFAULT_CONFIGURATION_NAME(self):
            return self.getToken(PBXProjParser.DEFAULT_CONFIGURATION_NAME, 0)

        def SETTINGS(self):
            return self.getToken(PBXProjParser.SETTINGS, 0)

        def SYSTEM_CAPABILITIES(self):
            return self.getToken(PBXProjParser.SYSTEM_CAPABILITIES, 0)

        def CURRENT_VERSION(self):
            return self.getToken(PBXProjParser.CURRENT_VERSION, 0)

        def VERSION_GROUP_TYPE(self):
            return self.getToken(PBXProjParser.VERSION_GROUP_TYPE, 0)

        def MEMBERSHIP_EXCEPTIONS(self):
            return self.getToken(PBXProjParser.MEMBERSHIP_EXCEPTIONS, 0)

        def EXCEPTIONS(self):
            return self.getToken(PBXProjParser.EXCEPTIONS, 0)

        def CLASSPREFIX(self):
            return self.getToken(PBXProjParser.CLASSPREFIX, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_any_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_token" ):
                listener.enterAny_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_token" ):
                listener.exitAny_token(self)




    def any_token(self):

        localctx = PBXProjParser.Any_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_any_token)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -281753076772096) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 1073709055) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





