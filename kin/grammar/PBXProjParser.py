# Generated from PBXProj.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,142,1690,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,3,5,375,8,5,1,5,3,5,378,8,5,1,5,3,5,381,8,5,1,5,
        3,5,384,8,5,1,5,1,5,3,5,388,8,5,1,5,1,5,3,5,392,8,5,1,5,3,5,395,
        8,5,1,5,3,5,398,8,5,1,5,1,5,3,5,402,8,5,1,5,3,5,405,8,5,1,5,3,5,
        408,8,5,1,5,3,5,411,8,5,1,5,3,5,414,8,5,1,5,3,5,417,8,5,1,5,1,5,
        1,5,3,5,422,8,5,1,5,3,5,425,8,5,1,5,3,5,428,8,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,7,4,7,439,8,7,11,7,12,7,440,1,8,4,8,444,8,8,11,
        8,12,8,445,1,9,4,9,449,8,9,11,9,12,9,450,1,10,4,10,454,8,10,11,10,
        12,10,455,1,11,4,11,459,8,11,11,11,12,11,460,1,12,4,12,464,8,12,
        11,12,12,12,465,1,13,4,13,469,8,13,11,13,12,13,470,1,14,4,14,474,
        8,14,11,14,12,14,475,1,15,4,15,479,8,15,11,15,12,15,480,1,16,4,16,
        484,8,16,11,16,12,16,485,1,17,4,17,489,8,17,11,17,12,17,490,1,18,
        4,18,494,8,18,11,18,12,18,495,1,19,4,19,499,8,19,11,19,12,19,500,
        1,20,4,20,504,8,20,11,20,12,20,505,1,21,4,21,509,8,21,11,21,12,21,
        510,1,22,4,22,514,8,22,11,22,12,22,515,1,23,4,23,519,8,23,11,23,
        12,23,520,1,24,4,24,524,8,24,11,24,12,24,525,1,25,4,25,529,8,25,
        11,25,12,25,530,1,26,4,26,534,8,26,11,26,12,26,535,1,27,4,27,539,
        8,27,11,27,12,27,540,1,28,4,28,544,8,28,11,28,12,28,545,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,557,8,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,3,30,567,8,30,1,30,3,30,570,8,30,1,30,3,
        30,573,8,30,1,30,3,30,576,8,30,1,30,3,30,579,8,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,604,8,32,1,32,1,32,1,32,
        1,32,1,33,1,33,1,33,1,33,1,33,3,33,615,8,33,1,33,3,33,618,8,33,1,
        33,3,33,621,8,33,1,33,3,33,624,8,33,1,33,3,33,627,8,33,1,33,3,33,
        630,8,33,1,33,3,33,633,8,33,1,33,3,33,636,8,33,1,33,3,33,639,8,33,
        1,33,3,33,642,8,33,1,33,3,33,645,8,33,1,33,3,33,648,8,33,1,33,3,
        33,651,8,33,1,33,3,33,654,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,
        675,8,35,1,35,3,35,678,8,35,1,35,3,35,681,8,35,1,35,3,35,684,8,35,
        1,35,1,35,3,35,688,8,35,1,35,3,35,691,8,35,1,35,3,35,694,8,35,1,
        35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,719,8,37,1,
        37,3,37,722,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        39,1,39,1,39,1,39,1,39,3,39,751,8,39,1,39,1,39,1,39,3,39,756,8,39,
        1,39,1,39,3,39,760,8,39,1,39,1,39,3,39,764,8,39,1,39,3,39,767,8,
        39,1,39,1,39,3,39,771,8,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,
        40,1,40,1,40,1,40,3,40,784,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,3,42,809,8,42,1,42,3,42,812,8,42,1,42,3,42,815,
        8,42,1,42,3,42,818,8,42,1,42,3,42,821,8,42,1,42,1,42,1,42,1,42,3,
        42,827,8,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,3,44,847,8,44,1,44,3,44,850,
        8,44,1,44,3,44,853,8,44,1,44,3,44,856,8,44,1,44,1,44,1,44,1,44,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,869,8,45,1,45,1,45,1,45,1,
        45,1,46,1,46,1,46,1,46,1,46,3,46,880,8,46,1,46,1,46,1,46,1,46,1,
        46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,894,8,47,1,47,1,47,1,
        47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,
        49,1,49,3,49,913,8,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,3,50,926,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,
        51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,
        53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,
        56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,
        59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,
        61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,
        64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,
        66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,
        69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,
        72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,
        74,1,74,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,77,1,
        77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,
        79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,
        82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,
        85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,
        87,1,87,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,90,1,
        90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,
        92,1,93,1,93,1,93,1,93,5,93,1148,8,93,10,93,12,93,1151,9,93,1,93,
        1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,
        1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,
        1,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,101,
        1,101,1,101,1,101,1,101,1,102,1,102,1,102,5,102,1199,8,102,10,102,
        12,102,1202,9,102,1,102,1,102,1,103,1,103,1,103,1,103,5,103,1210,
        8,103,10,103,12,103,1213,9,103,1,103,1,103,1,104,1,104,1,104,5,104,
        1220,8,104,10,104,12,104,1223,9,104,1,104,1,104,1,105,1,105,1,105,
        1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,
        1,107,1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,
        1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,112,
        1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,114,1,114,
        1,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,116,
        1,116,1,116,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,
        1,118,1,119,1,119,1,119,1,119,3,119,1301,8,119,1,119,3,119,1304,
        8,119,1,119,3,119,1307,8,119,1,119,3,119,1310,8,119,1,119,3,119,
        1313,8,119,1,119,3,119,1316,8,119,1,119,3,119,1319,8,119,1,119,3,
        119,1322,8,119,1,119,3,119,1325,8,119,1,119,1,119,1,119,1,120,1,
        120,1,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,122,1,122,
        1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,
        1,124,1,124,1,125,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,
        1,126,1,127,1,127,1,127,1,127,5,127,1369,8,127,10,127,12,127,1372,
        9,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,3,128,1381,8,128,
        1,128,3,128,1384,8,128,1,128,3,128,1387,8,128,1,128,3,128,1390,8,
        128,1,128,3,128,1393,8,128,1,128,3,128,1396,8,128,1,128,3,128,1399,
        8,128,1,128,3,128,1402,8,128,1,128,1,128,1,128,1,129,1,129,1,129,
        1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,131,
        1,131,1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,
        1,134,1,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,1,135,1,136,
        1,136,1,136,1,136,1,136,1,137,1,137,1,137,1,137,1,137,1,138,1,138,
        1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,140,1,140,1,140,
        1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,1484,8,142,
        1,143,1,143,1,143,1,143,1,143,1,144,1,144,1,144,1,144,1,144,1,145,
        1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,1,147,1,147,
        1,147,1,147,1,147,1,148,1,148,1,148,1,148,1,148,1,149,1,149,1,149,
        1,149,1,149,1,150,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,
        1,151,1,152,1,152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,
        1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,156,
        1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,5,157,1560,8,157,
        10,157,12,157,1563,9,157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,
        1,158,1,159,1,159,1,159,1,159,1,159,1,160,5,160,1579,8,160,10,160,
        12,160,1582,9,160,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,5,162,
        1624,8,162,10,162,12,162,1627,9,162,1,162,1,162,1,162,3,162,1632,
        8,162,1,163,1,163,1,163,1,163,1,163,1,164,1,164,1,164,1,164,1,164,
        1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,5,166,1653,
        8,166,10,166,12,166,1656,9,166,1,166,1,166,1,166,1,167,1,167,1,167,
        1,167,5,167,1665,8,167,10,167,12,167,1668,9,167,1,167,1,167,1,167,
        1,168,1,168,1,168,1,168,1,168,1,169,1,169,1,169,1,169,1,169,1,170,
        1,170,1,170,1,170,1,170,1,171,1,171,1,171,0,0,172,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
        262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
        294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
        326,328,330,332,334,336,338,340,342,0,3,1,0,137,138,2,0,129,129,
        138,138,2,0,129,129,137,139,1640,0,344,1,0,0,0,2,346,1,0,0,0,4,354,
        1,0,0,0,6,359,1,0,0,0,8,365,1,0,0,0,10,370,1,0,0,0,12,432,1,0,0,
        0,14,438,1,0,0,0,16,443,1,0,0,0,18,448,1,0,0,0,20,453,1,0,0,0,22,
        458,1,0,0,0,24,463,1,0,0,0,26,468,1,0,0,0,28,473,1,0,0,0,30,478,
        1,0,0,0,32,483,1,0,0,0,34,488,1,0,0,0,36,493,1,0,0,0,38,498,1,0,
        0,0,40,503,1,0,0,0,42,508,1,0,0,0,44,513,1,0,0,0,46,518,1,0,0,0,
        48,523,1,0,0,0,50,528,1,0,0,0,52,533,1,0,0,0,54,538,1,0,0,0,56,543,
        1,0,0,0,58,547,1,0,0,0,60,561,1,0,0,0,62,583,1,0,0,0,64,594,1,0,
        0,0,66,609,1,0,0,0,68,658,1,0,0,0,70,668,1,0,0,0,72,698,1,0,0,0,
        74,708,1,0,0,0,76,729,1,0,0,0,78,745,1,0,0,0,80,777,1,0,0,0,82,791,
        1,0,0,0,84,801,1,0,0,0,86,831,1,0,0,0,88,841,1,0,0,0,90,861,1,0,
        0,0,92,874,1,0,0,0,94,886,1,0,0,0,96,898,1,0,0,0,98,907,1,0,0,0,
        100,918,1,0,0,0,102,933,1,0,0,0,104,938,1,0,0,0,106,943,1,0,0,0,
        108,948,1,0,0,0,110,953,1,0,0,0,112,958,1,0,0,0,114,963,1,0,0,0,
        116,968,1,0,0,0,118,973,1,0,0,0,120,978,1,0,0,0,122,983,1,0,0,0,
        124,988,1,0,0,0,126,993,1,0,0,0,128,998,1,0,0,0,130,1003,1,0,0,0,
        132,1008,1,0,0,0,134,1013,1,0,0,0,136,1018,1,0,0,0,138,1023,1,0,
        0,0,140,1028,1,0,0,0,142,1033,1,0,0,0,144,1038,1,0,0,0,146,1043,
        1,0,0,0,148,1048,1,0,0,0,150,1053,1,0,0,0,152,1058,1,0,0,0,154,1063,
        1,0,0,0,156,1068,1,0,0,0,158,1073,1,0,0,0,160,1078,1,0,0,0,162,1083,
        1,0,0,0,164,1088,1,0,0,0,166,1093,1,0,0,0,168,1098,1,0,0,0,170,1103,
        1,0,0,0,172,1108,1,0,0,0,174,1113,1,0,0,0,176,1118,1,0,0,0,178,1123,
        1,0,0,0,180,1128,1,0,0,0,182,1133,1,0,0,0,184,1138,1,0,0,0,186,1143,
        1,0,0,0,188,1155,1,0,0,0,190,1160,1,0,0,0,192,1165,1,0,0,0,194,1170,
        1,0,0,0,196,1175,1,0,0,0,198,1180,1,0,0,0,200,1185,1,0,0,0,202,1190,
        1,0,0,0,204,1195,1,0,0,0,206,1205,1,0,0,0,208,1216,1,0,0,0,210,1226,
        1,0,0,0,212,1231,1,0,0,0,214,1236,1,0,0,0,216,1241,1,0,0,0,218,1246,
        1,0,0,0,220,1251,1,0,0,0,222,1256,1,0,0,0,224,1261,1,0,0,0,226,1266,
        1,0,0,0,228,1271,1,0,0,0,230,1276,1,0,0,0,232,1281,1,0,0,0,234,1286,
        1,0,0,0,236,1291,1,0,0,0,238,1296,1,0,0,0,240,1329,1,0,0,0,242,1334,
        1,0,0,0,244,1339,1,0,0,0,246,1344,1,0,0,0,248,1349,1,0,0,0,250,1354,
        1,0,0,0,252,1359,1,0,0,0,254,1364,1,0,0,0,256,1376,1,0,0,0,258,1406,
        1,0,0,0,260,1411,1,0,0,0,262,1416,1,0,0,0,264,1421,1,0,0,0,266,1426,
        1,0,0,0,268,1431,1,0,0,0,270,1436,1,0,0,0,272,1441,1,0,0,0,274,1446,
        1,0,0,0,276,1451,1,0,0,0,278,1456,1,0,0,0,280,1461,1,0,0,0,282,1466,
        1,0,0,0,284,1483,1,0,0,0,286,1485,1,0,0,0,288,1490,1,0,0,0,290,1495,
        1,0,0,0,292,1500,1,0,0,0,294,1505,1,0,0,0,296,1510,1,0,0,0,298,1515,
        1,0,0,0,300,1520,1,0,0,0,302,1525,1,0,0,0,304,1530,1,0,0,0,306,1535,
        1,0,0,0,308,1540,1,0,0,0,310,1545,1,0,0,0,312,1550,1,0,0,0,314,1555,
        1,0,0,0,316,1567,1,0,0,0,318,1572,1,0,0,0,320,1580,1,0,0,0,322,1583,
        1,0,0,0,324,1631,1,0,0,0,326,1633,1,0,0,0,328,1638,1,0,0,0,330,1643,
        1,0,0,0,332,1648,1,0,0,0,334,1660,1,0,0,0,336,1672,1,0,0,0,338,1677,
        1,0,0,0,340,1682,1,0,0,0,342,1687,1,0,0,0,344,345,3,2,1,0,345,1,
        1,0,0,0,346,347,5,1,0,0,347,348,3,4,2,0,348,349,3,6,3,0,349,350,
        3,8,4,0,350,351,3,10,5,0,351,352,3,12,6,0,352,353,5,2,0,0,353,3,
        1,0,0,0,354,355,5,3,0,0,355,356,5,4,0,0,356,357,5,129,0,0,357,358,
        5,5,0,0,358,5,1,0,0,0,359,360,5,125,0,0,360,361,5,4,0,0,361,362,
        5,1,0,0,362,363,5,2,0,0,363,364,5,5,0,0,364,7,1,0,0,0,365,366,5,
        6,0,0,366,367,5,4,0,0,367,368,5,129,0,0,368,369,5,5,0,0,369,9,1,
        0,0,0,370,371,5,127,0,0,371,372,5,4,0,0,372,374,5,1,0,0,373,375,
        3,14,7,0,374,373,1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,378,
        3,16,8,0,377,376,1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,381,
        3,18,9,0,380,379,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,384,
        3,20,10,0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,387,
        3,22,11,0,386,388,3,24,12,0,387,386,1,0,0,0,387,388,1,0,0,0,388,
        389,1,0,0,0,389,391,3,26,13,0,390,392,3,28,14,0,391,390,1,0,0,0,
        391,392,1,0,0,0,392,394,1,0,0,0,393,395,3,32,16,0,394,393,1,0,0,
        0,394,395,1,0,0,0,395,397,1,0,0,0,396,398,3,30,15,0,397,396,1,0,
        0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,401,3,34,17,0,400,402,3,
        36,18,0,401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,405,
        3,38,19,0,404,403,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,408,
        3,40,20,0,407,406,1,0,0,0,407,408,1,0,0,0,408,410,1,0,0,0,409,411,
        3,42,21,0,410,409,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,414,
        3,44,22,0,413,412,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,417,
        3,46,23,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,
        3,48,24,0,419,421,3,50,25,0,420,422,3,52,26,0,421,420,1,0,0,0,421,
        422,1,0,0,0,422,424,1,0,0,0,423,425,3,54,27,0,424,423,1,0,0,0,424,
        425,1,0,0,0,425,427,1,0,0,0,426,428,3,56,28,0,427,426,1,0,0,0,427,
        428,1,0,0,0,428,429,1,0,0,0,429,430,5,2,0,0,430,431,5,5,0,0,431,
        11,1,0,0,0,432,433,5,128,0,0,433,434,5,4,0,0,434,435,5,136,0,0,435,
        436,5,5,0,0,436,13,1,0,0,0,437,439,3,58,29,0,438,437,1,0,0,0,439,
        440,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,15,1,0,0,0,442,444,
        3,60,30,0,443,442,1,0,0,0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,
        1,0,0,0,446,17,1,0,0,0,447,449,3,62,31,0,448,447,1,0,0,0,449,450,
        1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,19,1,0,0,0,452,454,3,
        64,32,0,453,452,1,0,0,0,454,455,1,0,0,0,455,453,1,0,0,0,455,456,
        1,0,0,0,456,21,1,0,0,0,457,459,3,66,33,0,458,457,1,0,0,0,459,460,
        1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,23,1,0,0,0,462,464,3,
        68,34,0,463,462,1,0,0,0,464,465,1,0,0,0,465,463,1,0,0,0,465,466,
        1,0,0,0,466,25,1,0,0,0,467,469,3,70,35,0,468,467,1,0,0,0,469,470,
        1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,27,1,0,0,0,472,474,3,
        72,36,0,473,472,1,0,0,0,474,475,1,0,0,0,475,473,1,0,0,0,475,476,
        1,0,0,0,476,29,1,0,0,0,477,479,3,74,37,0,478,477,1,0,0,0,479,480,
        1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,31,1,0,0,0,482,484,3,
        76,38,0,483,482,1,0,0,0,484,485,1,0,0,0,485,483,1,0,0,0,485,486,
        1,0,0,0,486,33,1,0,0,0,487,489,3,78,39,0,488,487,1,0,0,0,489,490,
        1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,35,1,0,0,0,492,494,3,
        80,40,0,493,492,1,0,0,0,494,495,1,0,0,0,495,493,1,0,0,0,495,496,
        1,0,0,0,496,37,1,0,0,0,497,499,3,82,41,0,498,497,1,0,0,0,499,500,
        1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,39,1,0,0,0,502,504,3,
        84,42,0,503,502,1,0,0,0,504,505,1,0,0,0,505,503,1,0,0,0,505,506,
        1,0,0,0,506,41,1,0,0,0,507,509,3,86,43,0,508,507,1,0,0,0,509,510,
        1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,43,1,0,0,0,512,514,3,
        88,44,0,513,512,1,0,0,0,514,515,1,0,0,0,515,513,1,0,0,0,515,516,
        1,0,0,0,516,45,1,0,0,0,517,519,3,90,45,0,518,517,1,0,0,0,519,520,
        1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,47,1,0,0,0,522,524,3,
        92,46,0,523,522,1,0,0,0,524,525,1,0,0,0,525,523,1,0,0,0,525,526,
        1,0,0,0,526,49,1,0,0,0,527,529,3,94,47,0,528,527,1,0,0,0,529,530,
        1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,51,1,0,0,0,532,534,3,
        96,48,0,533,532,1,0,0,0,534,535,1,0,0,0,535,533,1,0,0,0,535,536,
        1,0,0,0,536,53,1,0,0,0,537,539,3,98,49,0,538,537,1,0,0,0,539,540,
        1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,55,1,0,0,0,542,544,3,
        100,50,0,543,542,1,0,0,0,544,545,1,0,0,0,545,543,1,0,0,0,545,546,
        1,0,0,0,546,57,1,0,0,0,547,548,5,136,0,0,548,549,5,4,0,0,549,550,
        5,1,0,0,550,551,3,102,51,0,551,552,3,210,105,0,552,553,3,212,106,
        0,553,554,3,224,112,0,554,556,3,192,96,0,555,557,3,226,113,0,556,
        555,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,559,5,2,0,0,559,
        560,5,5,0,0,560,59,1,0,0,0,561,562,5,136,0,0,562,563,5,4,0,0,563,
        564,5,1,0,0,564,566,3,104,52,0,565,567,3,146,73,0,566,565,1,0,0,
        0,566,567,1,0,0,0,567,569,1,0,0,0,568,570,3,176,88,0,569,568,1,0,
        0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,573,3,178,89,0,572,571,1,
        0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,576,3,148,74,0,575,574,
        1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,579,3,332,166,0,578,
        577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,5,2,0,0,581,
        582,5,5,0,0,582,61,1,0,0,0,583,584,5,136,0,0,584,585,5,4,0,0,585,
        586,5,1,0,0,586,587,3,106,53,0,587,588,3,150,75,0,588,589,3,152,
        76,0,589,590,3,154,77,0,590,591,3,156,78,0,591,592,5,2,0,0,592,593,
        5,5,0,0,593,63,1,0,0,0,594,595,5,136,0,0,595,596,5,4,0,0,596,597,
        5,1,0,0,597,598,3,108,54,0,598,599,3,198,99,0,599,600,3,316,158,
        0,600,601,3,318,159,0,601,603,3,200,100,0,602,604,3,192,96,0,603,
        602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,606,3,202,101,0,
        606,607,5,2,0,0,607,608,5,5,0,0,608,65,1,0,0,0,609,610,5,136,0,0,
        610,611,5,4,0,0,611,612,5,1,0,0,612,614,3,110,55,0,613,615,3,160,
        80,0,614,613,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,618,3,162,
        81,0,617,616,1,0,0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,621,3,158,
        79,0,620,619,1,0,0,0,620,621,1,0,0,0,621,623,1,0,0,0,622,624,3,166,
        83,0,623,622,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,627,3,168,
        84,0,626,625,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,630,3,164,
        82,0,629,628,1,0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,633,3,232,
        116,0,632,631,1,0,0,0,632,633,1,0,0,0,633,635,1,0,0,0,634,636,3,
        192,96,0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,639,
        3,194,97,0,638,637,1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,0,640,642,
        3,236,118,0,641,640,1,0,0,0,641,642,1,0,0,0,642,644,1,0,0,0,643,
        645,3,196,98,0,644,643,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,
        648,3,170,85,0,647,646,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,
        651,3,234,117,0,650,649,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,
        652,654,3,172,86,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,
        0,655,656,5,2,0,0,656,657,5,5,0,0,657,67,1,0,0,0,658,659,5,136,0,
        0,659,660,5,4,0,0,660,661,5,1,0,0,661,662,3,112,56,0,662,663,3,198,
        99,0,663,664,3,200,100,0,664,665,3,202,101,0,665,666,5,2,0,0,666,
        667,5,5,0,0,667,69,1,0,0,0,668,669,5,136,0,0,669,670,5,4,0,0,670,
        671,5,1,0,0,671,672,3,114,57,0,672,674,3,180,90,0,673,675,3,168,
        84,0,674,673,1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,678,3,166,
        83,0,677,676,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,681,3,192,
        96,0,680,679,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,684,3,194,
        97,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,3,196,
        98,0,686,688,3,170,85,0,687,686,1,0,0,0,687,688,1,0,0,0,688,690,
        1,0,0,0,689,691,3,172,86,0,690,689,1,0,0,0,690,691,1,0,0,0,691,693,
        1,0,0,0,692,694,3,174,87,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,
        1,0,0,0,695,696,5,2,0,0,696,697,5,5,0,0,697,71,1,0,0,0,698,699,5,
        136,0,0,699,700,5,4,0,0,700,701,5,1,0,0,701,702,3,116,58,0,702,703,
        3,198,99,0,703,704,3,200,100,0,704,705,3,202,101,0,705,706,5,2,0,
        0,706,707,5,5,0,0,707,73,1,0,0,0,708,709,5,136,0,0,709,710,5,4,0,
        0,710,711,5,1,0,0,711,712,3,118,59,0,712,713,3,210,105,0,713,714,
        3,212,106,0,714,715,3,214,107,0,715,716,3,224,112,0,716,718,3,192,
        96,0,717,719,3,182,91,0,718,717,1,0,0,0,718,719,1,0,0,0,719,721,
        1,0,0,0,720,722,3,190,95,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,
        1,0,0,0,723,724,3,226,113,0,724,725,3,228,114,0,725,726,3,230,115,
        0,726,727,5,2,0,0,727,728,5,5,0,0,728,75,1,0,0,0,729,730,5,136,0,
        0,730,731,5,4,0,0,731,732,5,1,0,0,732,733,3,120,60,0,733,734,3,216,
        108,0,734,735,3,210,105,0,735,736,3,212,106,0,736,737,3,218,109,
        0,737,738,3,220,110,0,738,739,3,224,112,0,739,740,3,192,96,0,740,
        741,3,222,111,0,741,742,3,226,113,0,742,743,5,2,0,0,743,744,5,5,
        0,0,744,77,1,0,0,0,745,746,5,136,0,0,746,747,5,4,0,0,747,748,5,1,
        0,0,748,750,3,122,61,0,749,751,3,238,119,0,750,749,1,0,0,0,750,751,
        1,0,0,0,751,752,1,0,0,0,752,753,3,210,105,0,753,755,3,268,134,0,
        754,756,3,270,135,0,755,754,1,0,0,0,755,756,1,0,0,0,756,757,1,0,
        0,0,757,759,3,272,136,0,758,760,3,274,137,0,759,758,1,0,0,0,759,
        760,1,0,0,0,760,761,1,0,0,0,761,763,3,276,138,0,762,764,3,280,140,
        0,763,762,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,767,3,278,
        139,0,766,765,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,770,3,
        282,141,0,769,771,3,284,142,0,770,769,1,0,0,0,770,771,1,0,0,0,771,
        772,1,0,0,0,772,773,3,286,143,0,773,774,3,288,144,0,774,775,5,2,
        0,0,775,776,5,5,0,0,776,79,1,0,0,0,777,778,5,136,0,0,778,779,5,4,
        0,0,779,780,5,1,0,0,780,781,3,124,62,0,781,783,3,308,154,0,782,784,
        3,192,96,0,783,782,1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,786,
        3,194,97,0,786,787,3,310,155,0,787,788,3,196,98,0,788,789,5,2,0,
        0,789,790,5,5,0,0,790,81,1,0,0,0,791,792,5,136,0,0,792,793,5,4,0,
        0,793,794,5,1,0,0,794,795,3,126,63,0,795,796,3,198,99,0,796,797,
        3,200,100,0,797,798,3,202,101,0,798,799,5,2,0,0,799,800,5,5,0,0,
        800,83,1,0,0,0,801,802,5,136,0,0,802,803,5,4,0,0,803,804,5,1,0,0,
        804,805,3,128,64,0,805,806,3,198,99,0,806,808,3,200,100,0,807,809,
        3,290,145,0,808,807,1,0,0,0,808,809,1,0,0,0,809,811,1,0,0,0,810,
        812,3,292,146,0,811,810,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,
        813,815,3,192,96,0,814,813,1,0,0,0,814,815,1,0,0,0,815,817,1,0,0,
        0,816,818,3,294,147,0,817,816,1,0,0,0,817,818,1,0,0,0,818,820,1,
        0,0,0,819,821,3,296,148,0,820,819,1,0,0,0,820,821,1,0,0,0,821,822,
        1,0,0,0,822,823,3,202,101,0,823,824,3,298,149,0,824,826,3,300,150,
        0,825,827,3,302,151,0,826,825,1,0,0,0,826,827,1,0,0,0,827,828,1,
        0,0,0,828,829,5,2,0,0,829,830,5,5,0,0,830,85,1,0,0,0,831,832,5,136,
        0,0,832,833,5,4,0,0,833,834,5,1,0,0,834,835,3,130,65,0,835,836,3,
        198,99,0,836,837,3,200,100,0,837,838,3,202,101,0,838,839,5,2,0,0,
        839,840,5,5,0,0,840,87,1,0,0,0,841,842,5,136,0,0,842,843,5,4,0,0,
        843,844,5,1,0,0,844,846,3,132,66,0,845,847,3,192,96,0,846,845,1,
        0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,850,3,176,88,0,849,848,
        1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,853,3,178,89,0,852,851,
        1,0,0,0,852,853,1,0,0,0,853,855,1,0,0,0,854,856,3,304,152,0,855,
        854,1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,858,3,306,153,0,
        858,859,5,2,0,0,859,860,5,5,0,0,860,89,1,0,0,0,861,862,5,136,0,0,
        862,863,5,4,0,0,863,864,5,1,0,0,864,865,3,134,67,0,865,866,3,180,
        90,0,866,868,3,192,96,0,867,869,3,194,97,0,868,867,1,0,0,0,868,869,
        1,0,0,0,869,870,1,0,0,0,870,871,3,196,98,0,871,872,5,2,0,0,872,873,
        5,5,0,0,873,91,1,0,0,0,874,875,5,136,0,0,875,876,5,4,0,0,876,877,
        5,1,0,0,877,879,3,136,68,0,878,880,3,312,156,0,879,878,1,0,0,0,879,
        880,1,0,0,0,880,881,1,0,0,0,881,882,3,314,157,0,882,883,3,192,96,
        0,883,884,5,2,0,0,884,885,5,5,0,0,885,93,1,0,0,0,886,887,5,136,0,
        0,887,888,5,4,0,0,888,889,5,1,0,0,889,890,3,138,69,0,890,891,3,326,
        163,0,891,893,3,328,164,0,892,894,3,330,165,0,893,892,1,0,0,0,893,
        894,1,0,0,0,894,895,1,0,0,0,895,896,5,2,0,0,896,897,5,5,0,0,897,
        95,1,0,0,0,898,899,5,136,0,0,899,900,5,4,0,0,900,901,5,1,0,0,901,
        902,3,140,70,0,902,903,3,184,92,0,903,904,3,186,93,0,904,905,5,2,
        0,0,905,906,5,5,0,0,906,97,1,0,0,0,907,908,5,136,0,0,908,909,5,4,
        0,0,909,910,5,1,0,0,910,912,3,142,71,0,911,913,3,188,94,0,912,911,
        1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,915,3,226,113,0,915,
        916,5,2,0,0,916,917,5,5,0,0,917,99,1,0,0,0,918,919,5,136,0,0,919,
        920,5,4,0,0,920,921,5,1,0,0,921,922,3,144,72,0,922,923,3,180,90,
        0,923,925,3,336,168,0,924,926,3,192,96,0,925,924,1,0,0,0,925,926,
        1,0,0,0,926,927,1,0,0,0,927,928,3,194,97,0,928,929,3,196,98,0,929,
        930,3,338,169,0,930,931,5,2,0,0,931,932,5,5,0,0,932,101,1,0,0,0,
        933,934,5,126,0,0,934,935,5,4,0,0,935,936,5,7,0,0,936,937,5,5,0,
        0,937,103,1,0,0,0,938,939,5,126,0,0,939,940,5,4,0,0,940,941,5,8,
        0,0,941,942,5,5,0,0,942,105,1,0,0,0,943,944,5,126,0,0,944,945,5,
        4,0,0,945,946,5,9,0,0,946,947,5,5,0,0,947,107,1,0,0,0,948,949,5,
        126,0,0,949,950,5,4,0,0,950,951,5,10,0,0,951,952,5,5,0,0,952,109,
        1,0,0,0,953,954,5,126,0,0,954,955,5,4,0,0,955,956,5,11,0,0,956,957,
        5,5,0,0,957,111,1,0,0,0,958,959,5,126,0,0,959,960,5,4,0,0,960,961,
        5,12,0,0,961,962,5,5,0,0,962,113,1,0,0,0,963,964,5,126,0,0,964,965,
        5,4,0,0,965,966,5,13,0,0,966,967,5,5,0,0,967,115,1,0,0,0,968,969,
        5,126,0,0,969,970,5,4,0,0,970,971,5,14,0,0,971,972,5,5,0,0,972,117,
        1,0,0,0,973,974,5,126,0,0,974,975,5,4,0,0,975,976,5,15,0,0,976,977,
        5,5,0,0,977,119,1,0,0,0,978,979,5,126,0,0,979,980,5,4,0,0,980,981,
        5,16,0,0,981,982,5,5,0,0,982,121,1,0,0,0,983,984,5,126,0,0,984,985,
        5,4,0,0,985,986,5,17,0,0,986,987,5,5,0,0,987,123,1,0,0,0,988,989,
        5,126,0,0,989,990,5,4,0,0,990,991,5,18,0,0,991,992,5,5,0,0,992,125,
        1,0,0,0,993,994,5,126,0,0,994,995,5,4,0,0,995,996,5,19,0,0,996,997,
        5,5,0,0,997,127,1,0,0,0,998,999,5,126,0,0,999,1000,5,4,0,0,1000,
        1001,5,20,0,0,1001,1002,5,5,0,0,1002,129,1,0,0,0,1003,1004,5,126,
        0,0,1004,1005,5,4,0,0,1005,1006,5,21,0,0,1006,1007,5,5,0,0,1007,
        131,1,0,0,0,1008,1009,5,126,0,0,1009,1010,5,4,0,0,1010,1011,5,22,
        0,0,1011,1012,5,5,0,0,1012,133,1,0,0,0,1013,1014,5,126,0,0,1014,
        1015,5,4,0,0,1015,1016,5,23,0,0,1016,1017,5,5,0,0,1017,135,1,0,0,
        0,1018,1019,5,126,0,0,1019,1020,5,4,0,0,1020,1021,5,24,0,0,1021,
        1022,5,5,0,0,1022,137,1,0,0,0,1023,1024,5,126,0,0,1024,1025,5,4,
        0,0,1025,1026,5,25,0,0,1026,1027,5,5,0,0,1027,139,1,0,0,0,1028,1029,
        5,126,0,0,1029,1030,5,4,0,0,1030,1031,5,26,0,0,1031,1032,5,5,0,0,
        1032,141,1,0,0,0,1033,1034,5,126,0,0,1034,1035,5,4,0,0,1035,1036,
        5,27,0,0,1036,1037,5,5,0,0,1037,143,1,0,0,0,1038,1039,5,126,0,0,
        1039,1040,5,4,0,0,1040,1041,5,28,0,0,1041,1042,5,5,0,0,1042,145,
        1,0,0,0,1043,1044,5,29,0,0,1044,1045,5,4,0,0,1045,1046,5,136,0,0,
        1046,1047,5,5,0,0,1047,147,1,0,0,0,1048,1049,5,30,0,0,1049,1050,
        5,4,0,0,1050,1051,5,136,0,0,1051,1052,5,5,0,0,1052,149,1,0,0,0,1053,
        1054,5,31,0,0,1054,1055,5,4,0,0,1055,1056,5,136,0,0,1056,1057,5,
        5,0,0,1057,151,1,0,0,0,1058,1059,5,32,0,0,1059,1060,5,4,0,0,1060,
        1061,5,129,0,0,1061,1062,5,5,0,0,1062,153,1,0,0,0,1063,1064,5,33,
        0,0,1064,1065,5,4,0,0,1065,1066,5,136,0,0,1066,1067,5,5,0,0,1067,
        155,1,0,0,0,1068,1069,5,34,0,0,1069,1070,5,4,0,0,1070,1071,3,342,
        171,0,1071,1072,5,5,0,0,1072,157,1,0,0,0,1073,1074,5,35,0,0,1074,
        1075,5,4,0,0,1075,1076,5,129,0,0,1076,1077,5,5,0,0,1077,159,1,0,
        0,0,1078,1079,5,36,0,0,1079,1080,5,4,0,0,1080,1081,3,342,171,0,1081,
        1082,5,5,0,0,1082,161,1,0,0,0,1083,1084,5,37,0,0,1084,1085,5,4,0,
        0,1085,1086,3,342,171,0,1086,1087,5,5,0,0,1087,163,1,0,0,0,1088,
        1089,5,38,0,0,1089,1090,5,4,0,0,1090,1091,3,342,171,0,1091,1092,
        5,5,0,0,1092,165,1,0,0,0,1093,1094,5,39,0,0,1094,1095,5,4,0,0,1095,
        1096,5,129,0,0,1096,1097,5,5,0,0,1097,167,1,0,0,0,1098,1099,5,40,
        0,0,1099,1100,5,4,0,0,1100,1101,5,129,0,0,1101,1102,5,5,0,0,1102,
        169,1,0,0,0,1103,1104,5,41,0,0,1104,1105,5,4,0,0,1105,1106,5,129,
        0,0,1106,1107,5,5,0,0,1107,171,1,0,0,0,1108,1109,5,42,0,0,1109,1110,
        5,4,0,0,1110,1111,5,129,0,0,1111,1112,5,5,0,0,1112,173,1,0,0,0,1113,
        1114,5,43,0,0,1114,1115,5,4,0,0,1115,1116,5,129,0,0,1116,1117,5,
        5,0,0,1117,175,1,0,0,0,1118,1119,5,44,0,0,1119,1120,5,4,0,0,1120,
        1121,7,0,0,0,1121,1122,5,5,0,0,1122,177,1,0,0,0,1123,1124,5,45,0,
        0,1124,1125,5,4,0,0,1125,1126,3,206,103,0,1126,1127,5,5,0,0,1127,
        179,1,0,0,0,1128,1129,5,46,0,0,1129,1130,5,4,0,0,1130,1131,3,204,
        102,0,1131,1132,5,5,0,0,1132,181,1,0,0,0,1133,1134,5,47,0,0,1134,
        1135,5,4,0,0,1135,1136,5,137,0,0,1136,1137,5,5,0,0,1137,183,1,0,
        0,0,1138,1139,5,48,0,0,1139,1140,5,4,0,0,1140,1141,5,137,0,0,1141,
        1142,5,5,0,0,1142,185,1,0,0,0,1143,1144,5,49,0,0,1144,1145,5,4,0,
        0,1145,1149,5,1,0,0,1146,1148,3,324,162,0,1147,1146,1,0,0,0,1148,
        1151,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1152,1,0,0,
        0,1151,1149,1,0,0,0,1152,1153,5,2,0,0,1153,1154,5,5,0,0,1154,187,
        1,0,0,0,1155,1156,5,50,0,0,1156,1157,5,4,0,0,1157,1158,5,136,0,0,
        1158,1159,5,5,0,0,1159,189,1,0,0,0,1160,1161,5,51,0,0,1161,1162,
        5,4,0,0,1162,1163,3,204,102,0,1163,1164,5,5,0,0,1164,191,1,0,0,0,
        1165,1166,5,52,0,0,1166,1167,5,4,0,0,1167,1168,7,0,0,0,1168,1169,
        5,5,0,0,1169,193,1,0,0,0,1170,1171,5,53,0,0,1171,1172,5,4,0,0,1172,
        1173,7,0,0,0,1173,1174,5,5,0,0,1174,195,1,0,0,0,1175,1176,5,54,0,
        0,1176,1177,5,4,0,0,1177,1178,7,0,0,0,1178,1179,5,5,0,0,1179,197,
        1,0,0,0,1180,1181,5,55,0,0,1181,1182,5,4,0,0,1182,1183,5,129,0,0,
        1183,1184,5,5,0,0,1184,199,1,0,0,0,1185,1186,5,56,0,0,1186,1187,
        5,4,0,0,1187,1188,3,204,102,0,1188,1189,5,5,0,0,1189,201,1,0,0,0,
        1190,1191,5,57,0,0,1191,1192,5,4,0,0,1192,1193,5,129,0,0,1193,1194,
        5,5,0,0,1194,203,1,0,0,0,1195,1200,5,58,0,0,1196,1197,5,136,0,0,
        1197,1199,5,59,0,0,1198,1196,1,0,0,0,1199,1202,1,0,0,0,1200,1198,
        1,0,0,0,1200,1201,1,0,0,0,1201,1203,1,0,0,0,1202,1200,1,0,0,0,1203,
        1204,5,60,0,0,1204,205,1,0,0,0,1205,1211,5,58,0,0,1206,1207,3,342,
        171,0,1207,1208,5,59,0,0,1208,1210,1,0,0,0,1209,1206,1,0,0,0,1210,
        1213,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1214,1,0,0,
        0,1213,1211,1,0,0,0,1214,1215,5,60,0,0,1215,207,1,0,0,0,1216,1221,
        5,58,0,0,1217,1218,5,138,0,0,1218,1220,5,59,0,0,1219,1217,1,0,0,
        0,1220,1223,1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,1224,
        1,0,0,0,1223,1221,1,0,0,0,1224,1225,5,60,0,0,1225,209,1,0,0,0,1226,
        1227,5,61,0,0,1227,1228,5,4,0,0,1228,1229,5,136,0,0,1229,1230,5,
        5,0,0,1230,211,1,0,0,0,1231,1232,5,62,0,0,1232,1233,5,4,0,0,1233,
        1234,3,204,102,0,1234,1235,5,5,0,0,1235,213,1,0,0,0,1236,1237,5,
        63,0,0,1237,1238,5,4,0,0,1238,1239,3,204,102,0,1239,1240,5,5,0,0,
        1240,215,1,0,0,0,1241,1242,5,64,0,0,1242,1243,5,4,0,0,1243,1244,
        7,0,0,0,1244,1245,5,5,0,0,1245,217,1,0,0,0,1246,1247,5,65,0,0,1247,
        1248,5,4,0,0,1248,1249,7,0,0,0,1249,1250,5,5,0,0,1250,219,1,0,0,
        0,1251,1252,5,66,0,0,1252,1253,5,4,0,0,1253,1254,7,0,0,0,1254,1255,
        5,5,0,0,1255,221,1,0,0,0,1256,1257,5,67,0,0,1257,1258,5,4,0,0,1258,
        1259,5,129,0,0,1259,1260,5,5,0,0,1260,223,1,0,0,0,1261,1262,5,68,
        0,0,1262,1263,5,4,0,0,1263,1264,3,204,102,0,1264,1265,5,5,0,0,1265,
        225,1,0,0,0,1266,1267,5,69,0,0,1267,1268,5,4,0,0,1268,1269,3,342,
        171,0,1269,1270,5,5,0,0,1270,227,1,0,0,0,1271,1272,5,70,0,0,1272,
        1273,5,4,0,0,1273,1274,5,136,0,0,1274,1275,5,5,0,0,1275,229,1,0,
        0,0,1276,1277,5,71,0,0,1277,1278,5,4,0,0,1278,1279,5,137,0,0,1279,
        1280,5,5,0,0,1280,231,1,0,0,0,1281,1282,5,72,0,0,1282,1283,5,4,0,
        0,1283,1284,5,129,0,0,1284,1285,5,5,0,0,1285,233,1,0,0,0,1286,1287,
        5,73,0,0,1287,1288,5,4,0,0,1288,1289,3,342,171,0,1289,1290,5,5,0,
        0,1290,235,1,0,0,0,1291,1292,5,74,0,0,1292,1293,5,4,0,0,1293,1294,
        3,342,171,0,1294,1295,5,5,0,0,1295,237,1,0,0,0,1296,1297,5,75,0,
        0,1297,1298,5,4,0,0,1298,1300,5,1,0,0,1299,1301,3,246,123,0,1300,
        1299,1,0,0,0,1300,1301,1,0,0,0,1301,1303,1,0,0,0,1302,1304,3,340,
        170,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1306,1,0,0,0,1305,
        1307,3,242,121,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,1309,1,
        0,0,0,1308,1310,3,240,120,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,
        1310,1312,1,0,0,0,1311,1313,3,244,122,0,1312,1311,1,0,0,0,1312,1313,
        1,0,0,0,1313,1315,1,0,0,0,1314,1316,3,248,124,0,1315,1314,1,0,0,
        0,1315,1316,1,0,0,0,1316,1318,1,0,0,0,1317,1319,3,250,125,0,1318,
        1317,1,0,0,0,1318,1319,1,0,0,0,1319,1321,1,0,0,0,1320,1322,3,252,
        126,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,1324,1,0,0,0,1323,
        1325,3,254,127,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,1326,1,
        0,0,0,1326,1327,5,2,0,0,1327,1328,5,5,0,0,1328,239,1,0,0,0,1329,
        1330,5,76,0,0,1330,1331,5,4,0,0,1331,1332,5,129,0,0,1332,1333,5,
        5,0,0,1333,241,1,0,0,0,1334,1335,5,77,0,0,1335,1336,5,4,0,0,1336,
        1337,5,138,0,0,1337,1338,5,5,0,0,1338,243,1,0,0,0,1339,1340,5,78,
        0,0,1340,1341,5,4,0,0,1341,1342,5,129,0,0,1342,1343,5,5,0,0,1343,
        245,1,0,0,0,1344,1345,5,79,0,0,1345,1346,5,4,0,0,1346,1347,7,1,0,
        0,1347,1348,5,5,0,0,1348,247,1,0,0,0,1349,1350,5,80,0,0,1350,1351,
        5,4,0,0,1351,1352,5,129,0,0,1352,1353,5,5,0,0,1353,249,1,0,0,0,1354,
        1355,5,81,0,0,1355,1356,5,4,0,0,1356,1357,5,129,0,0,1357,1358,5,
        5,0,0,1358,251,1,0,0,0,1359,1360,5,82,0,0,1360,1361,5,4,0,0,1361,
        1362,3,342,171,0,1362,1363,5,5,0,0,1363,253,1,0,0,0,1364,1365,5,
        83,0,0,1365,1366,5,4,0,0,1366,1370,5,1,0,0,1367,1369,3,256,128,0,
        1368,1367,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,
        1,0,0,0,1371,1373,1,0,0,0,1372,1370,1,0,0,0,1373,1374,5,2,0,0,1374,
        1375,5,5,0,0,1375,255,1,0,0,0,1376,1377,5,136,0,0,1377,1378,5,4,
        0,0,1378,1380,5,1,0,0,1379,1381,3,258,129,0,1380,1379,1,0,0,0,1380,
        1381,1,0,0,0,1381,1383,1,0,0,0,1382,1384,3,260,130,0,1383,1382,1,
        0,0,0,1383,1384,1,0,0,0,1384,1386,1,0,0,0,1385,1387,3,262,131,0,
        1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,0,0,0,1388,1390,
        3,264,132,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1392,1,0,0,
        0,1391,1393,3,240,120,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,
        1395,1,0,0,0,1394,1396,3,266,133,0,1395,1394,1,0,0,0,1395,1396,1,
        0,0,0,1396,1398,1,0,0,0,1397,1399,3,334,167,0,1398,1397,1,0,0,0,
        1398,1399,1,0,0,0,1399,1401,1,0,0,0,1400,1402,3,260,130,0,1401,1400,
        1,0,0,0,1401,1402,1,0,0,0,1402,1403,1,0,0,0,1403,1404,5,2,0,0,1404,
        1405,5,5,0,0,1405,257,1,0,0,0,1406,1407,5,84,0,0,1407,1408,5,4,0,
        0,1408,1409,5,138,0,0,1409,1410,5,5,0,0,1410,259,1,0,0,0,1411,1412,
        5,85,0,0,1412,1413,5,4,0,0,1413,1414,5,136,0,0,1414,1415,5,5,0,0,
        1415,261,1,0,0,0,1416,1417,5,86,0,0,1417,1418,5,4,0,0,1418,1419,
        7,0,0,0,1419,1420,5,5,0,0,1420,263,1,0,0,0,1421,1422,5,87,0,0,1422,
        1423,5,4,0,0,1423,1424,7,0,0,0,1424,1425,5,5,0,0,1425,265,1,0,0,
        0,1426,1427,5,88,0,0,1427,1428,5,4,0,0,1428,1429,5,138,0,0,1429,
        1430,5,5,0,0,1430,267,1,0,0,0,1431,1432,5,89,0,0,1432,1433,5,4,0,
        0,1433,1434,5,137,0,0,1434,1435,5,5,0,0,1435,269,1,0,0,0,1436,1437,
        5,90,0,0,1437,1438,5,4,0,0,1438,1439,5,138,0,0,1439,1440,5,5,0,0,
        1440,271,1,0,0,0,1441,1442,5,91,0,0,1442,1443,5,4,0,0,1443,1444,
        5,129,0,0,1444,1445,5,5,0,0,1445,273,1,0,0,0,1446,1447,5,92,0,0,
        1447,1448,5,4,0,0,1448,1449,3,206,103,0,1449,1450,5,5,0,0,1450,275,
        1,0,0,0,1451,1452,5,93,0,0,1452,1453,5,4,0,0,1453,1454,5,136,0,0,
        1454,1455,5,5,0,0,1455,277,1,0,0,0,1456,1457,5,94,0,0,1457,1458,
        5,4,0,0,1458,1459,5,136,0,0,1459,1460,5,5,0,0,1460,279,1,0,0,0,1461,
        1462,5,95,0,0,1462,1463,5,4,0,0,1463,1464,3,204,102,0,1464,1465,
        5,5,0,0,1465,281,1,0,0,0,1466,1467,5,96,0,0,1467,1468,5,4,0,0,1468,
        1469,7,0,0,0,1469,1470,5,5,0,0,1470,283,1,0,0,0,1471,1472,5,97,0,
        0,1472,1473,5,4,0,0,1473,1474,3,342,171,0,1474,1475,5,5,0,0,1475,
        1484,1,0,0,0,1476,1477,5,97,0,0,1477,1478,5,4,0,0,1478,1479,5,58,
        0,0,1479,1480,3,320,160,0,1480,1481,5,60,0,0,1481,1482,5,5,0,0,1482,
        1484,1,0,0,0,1483,1471,1,0,0,0,1483,1476,1,0,0,0,1484,285,1,0,0,
        0,1485,1486,5,98,0,0,1486,1487,5,4,0,0,1487,1488,7,0,0,0,1488,1489,
        5,5,0,0,1489,287,1,0,0,0,1490,1491,5,99,0,0,1491,1492,5,4,0,0,1492,
        1493,3,204,102,0,1493,1494,5,5,0,0,1494,289,1,0,0,0,1495,1496,5,
        100,0,0,1496,1497,5,4,0,0,1497,1498,3,206,103,0,1498,1499,5,5,0,
        0,1499,291,1,0,0,0,1500,1501,5,101,0,0,1501,1502,5,4,0,0,1502,1503,
        3,206,103,0,1503,1504,5,5,0,0,1504,293,1,0,0,0,1505,1506,5,102,0,
        0,1506,1507,5,4,0,0,1507,1508,3,206,103,0,1508,1509,5,5,0,0,1509,
        295,1,0,0,0,1510,1511,5,103,0,0,1511,1512,5,4,0,0,1512,1513,3,206,
        103,0,1513,1514,5,5,0,0,1514,297,1,0,0,0,1515,1516,5,104,0,0,1516,
        1517,5,4,0,0,1517,1518,5,138,0,0,1518,1519,5,5,0,0,1519,299,1,0,
        0,0,1520,1521,5,105,0,0,1521,1522,5,4,0,0,1522,1523,7,0,0,0,1523,
        1524,5,5,0,0,1524,301,1,0,0,0,1525,1526,5,106,0,0,1526,1527,5,4,
        0,0,1527,1528,5,129,0,0,1528,1529,5,5,0,0,1529,303,1,0,0,0,1530,
        1531,5,107,0,0,1531,1532,5,4,0,0,1532,1533,5,136,0,0,1533,1534,5,
        5,0,0,1534,305,1,0,0,0,1535,1536,5,108,0,0,1536,1537,5,4,0,0,1537,
        1538,5,136,0,0,1538,1539,5,5,0,0,1539,307,1,0,0,0,1540,1541,5,109,
        0,0,1541,1542,5,4,0,0,1542,1543,3,342,171,0,1543,1544,5,5,0,0,1544,
        309,1,0,0,0,1545,1546,5,110,0,0,1546,1547,5,4,0,0,1547,1548,5,136,
        0,0,1548,1549,5,5,0,0,1549,311,1,0,0,0,1550,1551,5,111,0,0,1551,
        1552,5,4,0,0,1552,1553,5,136,0,0,1553,1554,5,5,0,0,1554,313,1,0,
        0,0,1555,1556,5,112,0,0,1556,1557,5,4,0,0,1557,1561,5,1,0,0,1558,
        1560,3,324,162,0,1559,1558,1,0,0,0,1560,1563,1,0,0,0,1561,1559,1,
        0,0,0,1561,1562,1,0,0,0,1562,1564,1,0,0,0,1563,1561,1,0,0,0,1564,
        1565,5,2,0,0,1565,1566,5,5,0,0,1566,315,1,0,0,0,1567,1568,5,113,
        0,0,1568,1569,5,4,0,0,1569,1570,7,0,0,0,1570,1571,5,5,0,0,1571,317,
        1,0,0,0,1572,1573,5,114,0,0,1573,1574,5,4,0,0,1574,1575,5,129,0,
        0,1575,1576,5,5,0,0,1576,319,1,0,0,0,1577,1579,3,322,161,0,1578,
        1577,1,0,0,0,1579,1582,1,0,0,0,1580,1578,1,0,0,0,1580,1581,1,0,0,
        0,1581,321,1,0,0,0,1582,1580,1,0,0,0,1583,1584,5,1,0,0,1584,1585,
        5,115,0,0,1585,1586,5,4,0,0,1586,1587,5,136,0,0,1587,1588,5,5,0,
        0,1588,1589,5,116,0,0,1589,1590,5,4,0,0,1590,1591,5,136,0,0,1591,
        1592,5,5,0,0,1592,1593,5,2,0,0,1593,1594,5,59,0,0,1594,323,1,0,0,
        0,1595,1596,3,342,171,0,1596,1597,5,4,0,0,1597,1598,3,342,171,0,
        1598,1599,5,5,0,0,1599,1632,1,0,0,0,1600,1601,3,342,171,0,1601,1602,
        5,4,0,0,1602,1603,5,129,0,0,1603,1604,5,5,0,0,1604,1632,1,0,0,0,
        1605,1606,3,342,171,0,1606,1607,5,4,0,0,1607,1608,5,131,0,0,1608,
        1609,5,5,0,0,1609,1632,1,0,0,0,1610,1611,3,342,171,0,1611,1612,5,
        4,0,0,1612,1613,5,1,0,0,1613,1614,3,324,162,0,1614,1615,5,2,0,0,
        1615,1616,5,5,0,0,1616,1632,1,0,0,0,1617,1618,3,342,171,0,1618,1619,
        5,4,0,0,1619,1625,5,58,0,0,1620,1621,3,342,171,0,1621,1622,5,59,
        0,0,1622,1624,1,0,0,0,1623,1620,1,0,0,0,1624,1627,1,0,0,0,1625,1623,
        1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,1625,1,0,0,0,1628,
        1629,5,60,0,0,1629,1630,5,5,0,0,1630,1632,1,0,0,0,1631,1595,1,0,
        0,0,1631,1600,1,0,0,0,1631,1605,1,0,0,0,1631,1610,1,0,0,0,1631,1617,
        1,0,0,0,1632,325,1,0,0,0,1633,1634,5,117,0,0,1634,1635,5,4,0,0,1635,
        1636,3,204,102,0,1636,1637,5,5,0,0,1637,327,1,0,0,0,1638,1639,5,
        118,0,0,1639,1640,5,4,0,0,1640,1641,5,129,0,0,1641,1642,5,5,0,0,
        1642,329,1,0,0,0,1643,1644,5,119,0,0,1644,1645,5,4,0,0,1645,1646,
        7,0,0,0,1646,1647,5,5,0,0,1647,331,1,0,0,0,1648,1649,5,120,0,0,1649,
        1650,5,4,0,0,1650,1654,5,1,0,0,1651,1653,3,324,162,0,1652,1651,1,
        0,0,0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,1655,1,0,0,0,1655,
        1657,1,0,0,0,1656,1654,1,0,0,0,1657,1658,5,2,0,0,1658,1659,5,5,0,
        0,1659,333,1,0,0,0,1660,1661,5,121,0,0,1661,1662,5,4,0,0,1662,1666,
        5,1,0,0,1663,1665,3,324,162,0,1664,1663,1,0,0,0,1665,1668,1,0,0,
        0,1666,1664,1,0,0,0,1666,1667,1,0,0,0,1667,1669,1,0,0,0,1668,1666,
        1,0,0,0,1669,1670,5,2,0,0,1670,1671,5,5,0,0,1671,335,1,0,0,0,1672,
        1673,5,122,0,0,1673,1674,5,4,0,0,1674,1675,5,136,0,0,1675,1676,5,
        5,0,0,1676,337,1,0,0,0,1677,1678,5,123,0,0,1678,1679,5,4,0,0,1679,
        1680,5,138,0,0,1680,1681,5,5,0,0,1681,339,1,0,0,0,1682,1683,5,124,
        0,0,1683,1684,5,4,0,0,1684,1685,3,342,171,0,1685,1686,5,5,0,0,1686,
        341,1,0,0,0,1687,1688,7,2,0,0,1688,343,1,0,0,0,120,374,377,380,383,
        387,391,394,397,401,404,407,410,413,416,421,424,427,440,445,450,
        455,460,465,470,475,480,485,490,495,500,505,510,515,520,525,530,
        535,540,545,556,566,569,572,575,578,603,614,617,620,623,626,629,
        632,635,638,641,644,647,650,653,674,677,680,683,687,690,693,718,
        721,750,755,759,763,766,770,783,808,811,814,817,820,826,846,849,
        852,855,868,879,893,912,925,1149,1200,1211,1221,1300,1303,1306,1309,
        1312,1315,1318,1321,1324,1370,1380,1383,1386,1389,1392,1395,1398,
        1401,1483,1561,1580,1625,1631,1654,1666
    ]

class PBXProjParser ( Parser ):

    grammarFileName = "PBXProj.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'archiveVersion'", "'='", 
                     "';'", "'objectVersion'", "'PBXAggregateTarget'", "'PBXBuildFile'", 
                     "'PBXContainerItemProxy'", "'PBXCopyFilesBuildPhase'", 
                     "'PBXFileReference'", "'PBXFrameworksBuildPhase'", 
                     "'PBXGroup'", "'PBXHeadersBuildPhase'", "'PBXNativeTarget'", 
                     "'PBXLegacyTarget'", "'PBXProject'", "'PBXReferenceProxy'", 
                     "'PBXResourcesBuildPhase'", "'PBXShellScriptBuildPhase'", 
                     "'PBXSourcesBuildPhase'", "'PBXTargetDependency'", 
                     "'PBXVariantGroup'", "'XCBuildConfiguration'", "'XCConfigurationList'", 
                     "'XCRemoteSwiftPackageReference'", "'XCSwiftPackageProductDependency'", 
                     "'XCVersionGroup'", "'fileRef'", "'productRef'", "'containerPortal'", 
                     "'proxyType'", "'remoteGlobalIDString'", "'remoteInfo'", 
                     "'fileEncoding'", "'comments'", "'explicitFileType'", 
                     "'lastKnownFileType'", "'includeInIndex'", "'indentWidth'", 
                     "'tabWidth'", "'usesTabs'", "'wrapsLines'", "'platformFilter'", 
                     "'platformFilters'", "'children'", "'productInstallPath'", 
                     "'repositoryURL'", "'requirement'", "'package'", "'packageProductDependencies'", 
                     "'name'", "'path'", "'sourceTree'", "'buildActionMask'", 
                     "'files'", "'runOnlyForDeploymentPostprocessing'", 
                     "'('", "','", "')'", "'buildConfigurationList'", "'buildPhases'", 
                     "'buildRules'", "'buildArgumentsString'", "'buildToolPath'", 
                     "'buildWorkingDirectory'", "'passBuildSettingsInEnvironment'", 
                     "'dependencies'", "'productName'", "'productReference'", 
                     "'productType'", "'lineEnding'", "'xcLanguageSpecificationIdentifier'", 
                     "'plistStructureDefinitionIdentifier'", "'attributes'", 
                     "'LastSwiftMigration'", "'DefaultBuildSystemTypeForWorkspace'", 
                     "'LastSwiftUpdateCheck'", "'BuildIndependentTargetsInParallel'", 
                     "'LastTestingUpgradeCheck'", "'LastUpgradeCheck'", 
                     "'ORGANIZATIONNAME'", "'TargetAttributes'", "'CreatedOnToolsVersion'", 
                     "'TestTargetID'", "'DevelopmentTeam'", "'DevelopmentTeamName'", 
                     "'ProvisioningStyle'", "'compatibilityVersion'", "'developmentRegion'", 
                     "'hasScannedForEncodings'", "'knownRegions'", "'mainGroup'", 
                     "'productRefGroup'", "'packageReferences'", "'projectDirPath'", 
                     "'projectReferences'", "'projectRoot'", "'targets'", 
                     "'inputFileListPaths'", "'inputPaths'", "'outputFileListPaths'", 
                     "'outputPaths'", "'shellPath'", "'shellScript'", "'showEnvVarsInLog'", 
                     "'target'", "'targetProxy'", "'fileType'", "'remoteRef'", 
                     "'baseConfigurationReference'", "'buildSettings'", 
                     "'dstPath'", "'dstSubfolderSpec'", "'ProductGroup'", 
                     "'ProjectRef'", "'buildConfigurations'", "'defaultConfigurationIsVisible'", 
                     "'defaultConfigurationName'", "'settings'", "'SystemCapabilities'", 
                     "'currentVersion'", "'versionGroupType'", "'CLASSPREFIX'", 
                     "'classes'", "'isa'", "'objects'", "'rootObject'", 
                     "<INVALID>", "'.'", "<INVALID>", "<INVALID>", "'-'", 
                     "'_'", "'/'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "CLASSES", "ISA", "OBJECTS", "ROOT_OBJECT", 
                      "NUMBER", "DOT", "ALPHA_NUMERIC", "ALPHA_NUMERIC_CAP", 
                      "DASH", "UNDERSCORE", "SLASH", "REFERENCE", "QUOTED_STRING", 
                      "NON_QUOTED_STRING", "VARIABLE", "WS", "COMMENT", 
                      "LINE_COMMENT" ]

    RULE_start = 0
    RULE_root_element = 1
    RULE_archive_version = 2
    RULE_classes = 3
    RULE_object_version = 4
    RULE_objects = 5
    RULE_root_object = 6
    RULE_pbx_aggregate_target_section = 7
    RULE_pbx_build_file_section = 8
    RULE_pbx_container_item_proxy_section = 9
    RULE_pbx_copy_files_build_phase_section = 10
    RULE_pbx_file_reference_section = 11
    RULE_pbx_frameworks_build_phase_section = 12
    RULE_pbx_group_section = 13
    RULE_pbx_headers_build_phase_section = 14
    RULE_pbx_native_target_section = 15
    RULE_pbx_legacy_target_section = 16
    RULE_pbx_project_section = 17
    RULE_pbx_reference_proxy_section = 18
    RULE_pbx_resources_build_phase_section = 19
    RULE_pbx_shell_script_build_phase_section = 20
    RULE_pbx_sources_build_phase_section = 21
    RULE_pbx_target_dependency_section = 22
    RULE_pbx_variant_group_section = 23
    RULE_xc_build_configuration_section = 24
    RULE_xc_configuration_list_section = 25
    RULE_xc_remote_swift_package_reference_section = 26
    RULE_xc_swift_package_product_dependency_section = 27
    RULE_xc_version_group_section = 28
    RULE_pbx_aggregate_target = 29
    RULE_pbx_build_file = 30
    RULE_pbx_container_item_proxy = 31
    RULE_pbx_copy_files_build_phase = 32
    RULE_pbx_file_reference = 33
    RULE_pbx_frameworks_build_phase = 34
    RULE_pbx_group = 35
    RULE_pbx_headers_build_phase = 36
    RULE_pbx_native_target = 37
    RULE_pbx_legacy_target = 38
    RULE_pbx_project = 39
    RULE_pbx_reference_proxy = 40
    RULE_pbx_resources_build_phase = 41
    RULE_pbx_shell_script_build_phase = 42
    RULE_pbx_sources_build_phase = 43
    RULE_pbx_target_dependency = 44
    RULE_pbx_variant_group = 45
    RULE_xc_build_configuration = 46
    RULE_xc_configuration_list = 47
    RULE_xc_remote_swift_package_reference = 48
    RULE_xc_swift_package_product_dependency = 49
    RULE_xc_version_group = 50
    RULE_isa_pbx_aggregate_target = 51
    RULE_isa_pbx_build_file = 52
    RULE_isa_pbx_container_item_proxy = 53
    RULE_isa_pbx_copy_files_build_phase = 54
    RULE_isa_pbx_file_reference = 55
    RULE_isa_pbx_frameworks_build_phase = 56
    RULE_isa_pbx_group = 57
    RULE_isa_pbx_header_build_phase = 58
    RULE_isa_pbx_native_target = 59
    RULE_isa_pbx_legacy_target = 60
    RULE_isa_pbx_project = 61
    RULE_isa_pbx_reference_proxy = 62
    RULE_isa_pbx_resources_build_phase = 63
    RULE_isa_pbx_shell_script_build_phase = 64
    RULE_isa_pbx_sources_build_phase = 65
    RULE_isa_pbx_target_dependency = 66
    RULE_isa_pbx_variant_group = 67
    RULE_isa_xc_build_configuration = 68
    RULE_isa_xc_configuration_list = 69
    RULE_isa_xc_remote_swift_package_reference = 70
    RULE_isa_xc_swift_package_product_dependency = 71
    RULE_isa_xc_version_group = 72
    RULE_file_ref = 73
    RULE_product_ref = 74
    RULE_container_portal = 75
    RULE_proxy_type = 76
    RULE_remote_global_id_string = 77
    RULE_remote_info = 78
    RULE_file_encoding = 79
    RULE_comments = 80
    RULE_explicit_file_type = 81
    RULE_last_known_file_type = 82
    RULE_include_in_index = 83
    RULE_indent_width = 84
    RULE_tab_width = 85
    RULE_uses_tabs = 86
    RULE_wraps_lines = 87
    RULE_platform_filter = 88
    RULE_platform_filters = 89
    RULE_children = 90
    RULE_product_install_path = 91
    RULE_repository_url = 92
    RULE_requirement = 93
    RULE_xc_package = 94
    RULE_package_product_dependencies = 95
    RULE_name = 96
    RULE_path = 97
    RULE_source_tree = 98
    RULE_build_action_mask = 99
    RULE_files = 100
    RULE_run_only_for_deployment_postprocessing = 101
    RULE_reference_list = 102
    RULE_any_string_list = 103
    RULE_non_quoted_strings_list = 104
    RULE_build_configuration_list = 105
    RULE_build_phases = 106
    RULE_build_rules = 107
    RULE_build_arguments_string = 108
    RULE_build_tool_path = 109
    RULE_build_working_directory = 110
    RULE_pass_build_settings_in_environment = 111
    RULE_dependencies = 112
    RULE_product_name = 113
    RULE_product_reference = 114
    RULE_product_type = 115
    RULE_line_ending = 116
    RULE_xc_language_specification_identifier = 117
    RULE_plist_structure_definition_identifier = 118
    RULE_attributes = 119
    RULE_last_swift_migration = 120
    RULE_default_build_system_type_for_workspace = 121
    RULE_last_swift_update_check = 122
    RULE_build_targets_in_parallel = 123
    RULE_last_testing_upgrade_check = 124
    RULE_last_upgrade_check = 125
    RULE_organization_name = 126
    RULE_target_attributes = 127
    RULE_target_attribute = 128
    RULE_created_on_tools_version = 129
    RULE_test_target_id = 130
    RULE_development_team = 131
    RULE_development_team_name = 132
    RULE_provisioning_style = 133
    RULE_compatibility_version = 134
    RULE_development_region = 135
    RULE_has_scanned_for_encodings = 136
    RULE_known_regions = 137
    RULE_main_group = 138
    RULE_product_ref_group = 139
    RULE_package_references = 140
    RULE_project_dir_path = 141
    RULE_project_references = 142
    RULE_project_root = 143
    RULE_targets = 144
    RULE_input_file_list_paths = 145
    RULE_input_paths = 146
    RULE_output_file_list_paths = 147
    RULE_output_paths = 148
    RULE_shell_path = 149
    RULE_shell_script = 150
    RULE_show_env_vars_in_log = 151
    RULE_target = 152
    RULE_target_proxy = 153
    RULE_file_type = 154
    RULE_remote_ref = 155
    RULE_base_configuration_reference = 156
    RULE_build_settings = 157
    RULE_dst_path = 158
    RULE_dst_subfolder_spec = 159
    RULE_project_references_list = 160
    RULE_project_references_list_element = 161
    RULE_key_value = 162
    RULE_build_configurations = 163
    RULE_default_configuration_is_visible = 164
    RULE_default_configuration_name = 165
    RULE_settings = 166
    RULE_system_capabilities = 167
    RULE_current_version = 168
    RULE_version_group_type = 169
    RULE_class_prefix = 170
    RULE_any_string = 171

    ruleNames =  [ "start", "root_element", "archive_version", "classes", 
                   "object_version", "objects", "root_object", "pbx_aggregate_target_section", 
                   "pbx_build_file_section", "pbx_container_item_proxy_section", 
                   "pbx_copy_files_build_phase_section", "pbx_file_reference_section", 
                   "pbx_frameworks_build_phase_section", "pbx_group_section", 
                   "pbx_headers_build_phase_section", "pbx_native_target_section", 
                   "pbx_legacy_target_section", "pbx_project_section", "pbx_reference_proxy_section", 
                   "pbx_resources_build_phase_section", "pbx_shell_script_build_phase_section", 
                   "pbx_sources_build_phase_section", "pbx_target_dependency_section", 
                   "pbx_variant_group_section", "xc_build_configuration_section", 
                   "xc_configuration_list_section", "xc_remote_swift_package_reference_section", 
                   "xc_swift_package_product_dependency_section", "xc_version_group_section", 
                   "pbx_aggregate_target", "pbx_build_file", "pbx_container_item_proxy", 
                   "pbx_copy_files_build_phase", "pbx_file_reference", "pbx_frameworks_build_phase", 
                   "pbx_group", "pbx_headers_build_phase", "pbx_native_target", 
                   "pbx_legacy_target", "pbx_project", "pbx_reference_proxy", 
                   "pbx_resources_build_phase", "pbx_shell_script_build_phase", 
                   "pbx_sources_build_phase", "pbx_target_dependency", "pbx_variant_group", 
                   "xc_build_configuration", "xc_configuration_list", "xc_remote_swift_package_reference", 
                   "xc_swift_package_product_dependency", "xc_version_group", 
                   "isa_pbx_aggregate_target", "isa_pbx_build_file", "isa_pbx_container_item_proxy", 
                   "isa_pbx_copy_files_build_phase", "isa_pbx_file_reference", 
                   "isa_pbx_frameworks_build_phase", "isa_pbx_group", "isa_pbx_header_build_phase", 
                   "isa_pbx_native_target", "isa_pbx_legacy_target", "isa_pbx_project", 
                   "isa_pbx_reference_proxy", "isa_pbx_resources_build_phase", 
                   "isa_pbx_shell_script_build_phase", "isa_pbx_sources_build_phase", 
                   "isa_pbx_target_dependency", "isa_pbx_variant_group", 
                   "isa_xc_build_configuration", "isa_xc_configuration_list", 
                   "isa_xc_remote_swift_package_reference", "isa_xc_swift_package_product_dependency", 
                   "isa_xc_version_group", "file_ref", "product_ref", "container_portal", 
                   "proxy_type", "remote_global_id_string", "remote_info", 
                   "file_encoding", "comments", "explicit_file_type", "last_known_file_type", 
                   "include_in_index", "indent_width", "tab_width", "uses_tabs", 
                   "wraps_lines", "platform_filter", "platform_filters", 
                   "children", "product_install_path", "repository_url", 
                   "requirement", "xc_package", "package_product_dependencies", 
                   "name", "path", "source_tree", "build_action_mask", "files", 
                   "run_only_for_deployment_postprocessing", "reference_list", 
                   "any_string_list", "non_quoted_strings_list", "build_configuration_list", 
                   "build_phases", "build_rules", "build_arguments_string", 
                   "build_tool_path", "build_working_directory", "pass_build_settings_in_environment", 
                   "dependencies", "product_name", "product_reference", 
                   "product_type", "line_ending", "xc_language_specification_identifier", 
                   "plist_structure_definition_identifier", "attributes", 
                   "last_swift_migration", "default_build_system_type_for_workspace", 
                   "last_swift_update_check", "build_targets_in_parallel", 
                   "last_testing_upgrade_check", "last_upgrade_check", "organization_name", 
                   "target_attributes", "target_attribute", "created_on_tools_version", 
                   "test_target_id", "development_team", "development_team_name", 
                   "provisioning_style", "compatibility_version", "development_region", 
                   "has_scanned_for_encodings", "known_regions", "main_group", 
                   "product_ref_group", "package_references", "project_dir_path", 
                   "project_references", "project_root", "targets", "input_file_list_paths", 
                   "input_paths", "output_file_list_paths", "output_paths", 
                   "shell_path", "shell_script", "show_env_vars_in_log", 
                   "target", "target_proxy", "file_type", "remote_ref", 
                   "base_configuration_reference", "build_settings", "dst_path", 
                   "dst_subfolder_spec", "project_references_list", "project_references_list_element", 
                   "key_value", "build_configurations", "default_configuration_is_visible", 
                   "default_configuration_name", "settings", "system_capabilities", 
                   "current_version", "version_group_type", "class_prefix", 
                   "any_string" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    CLASSES=125
    ISA=126
    OBJECTS=127
    ROOT_OBJECT=128
    NUMBER=129
    DOT=130
    ALPHA_NUMERIC=131
    ALPHA_NUMERIC_CAP=132
    DASH=133
    UNDERSCORE=134
    SLASH=135
    REFERENCE=136
    QUOTED_STRING=137
    NON_QUOTED_STRING=138
    VARIABLE=139
    WS=140
    COMMENT=141
    LINE_COMMENT=142

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def root_element(self):
            return self.getTypedRuleContext(PBXProjParser.Root_elementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = PBXProjParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.root_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def archive_version(self):
            return self.getTypedRuleContext(PBXProjParser.Archive_versionContext,0)


        def classes(self):
            return self.getTypedRuleContext(PBXProjParser.ClassesContext,0)


        def object_version(self):
            return self.getTypedRuleContext(PBXProjParser.Object_versionContext,0)


        def objects(self):
            return self.getTypedRuleContext(PBXProjParser.ObjectsContext,0)


        def root_object(self):
            return self.getTypedRuleContext(PBXProjParser.Root_objectContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_root_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_element" ):
                listener.enterRoot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_element" ):
                listener.exitRoot_element(self)




    def root_element(self):

        localctx = PBXProjParser.Root_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_root_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(PBXProjParser.T__0)
            self.state = 347
            self.archive_version()
            self.state = 348
            self.classes()
            self.state = 349
            self.object_version()
            self.state = 350
            self.objects()
            self.state = 351
            self.root_object()
            self.state = 352
            self.match(PBXProjParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Archive_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_archive_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchive_version" ):
                listener.enterArchive_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchive_version" ):
                listener.exitArchive_version(self)




    def archive_version(self):

        localctx = PBXProjParser.Archive_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_archive_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(PBXProjParser.T__2)
            self.state = 355
            self.match(PBXProjParser.T__3)
            self.state = 356
            self.match(PBXProjParser.NUMBER)
            self.state = 357
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSES(self):
            return self.getToken(PBXProjParser.CLASSES, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasses" ):
                listener.enterClasses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasses" ):
                listener.exitClasses(self)




    def classes(self):

        localctx = PBXProjParser.ClassesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(PBXProjParser.CLASSES)
            self.state = 360
            self.match(PBXProjParser.T__3)
            self.state = 361
            self.match(PBXProjParser.T__0)
            self.state = 362
            self.match(PBXProjParser.T__1)
            self.state = 363
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_object_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_version" ):
                listener.enterObject_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_version" ):
                listener.exitObject_version(self)




    def object_version(self):

        localctx = PBXProjParser.Object_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_object_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(PBXProjParser.T__5)
            self.state = 366
            self.match(PBXProjParser.T__3)
            self.state = 367
            self.match(PBXProjParser.NUMBER)
            self.state = 368
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECTS(self):
            return self.getToken(PBXProjParser.OBJECTS, 0)

        def pbx_file_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_file_reference_sectionContext,0)


        def pbx_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_group_sectionContext,0)


        def pbx_project_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_project_sectionContext,0)


        def xc_build_configuration_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_build_configuration_sectionContext,0)


        def xc_configuration_list_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_configuration_list_sectionContext,0)


        def pbx_aggregate_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_target_sectionContext,0)


        def pbx_build_file_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_file_sectionContext,0)


        def pbx_container_item_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxy_sectionContext,0)


        def pbx_copy_files_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phase_sectionContext,0)


        def pbx_frameworks_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phase_sectionContext,0)


        def pbx_headers_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phase_sectionContext,0)


        def pbx_legacy_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_legacy_target_sectionContext,0)


        def pbx_native_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_native_target_sectionContext,0)


        def pbx_reference_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxy_sectionContext,0)


        def pbx_resources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phase_sectionContext,0)


        def pbx_shell_script_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phase_sectionContext,0)


        def pbx_sources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phase_sectionContext,0)


        def pbx_target_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependency_sectionContext,0)


        def pbx_variant_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_variant_group_sectionContext,0)


        def xc_remote_swift_package_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_reference_sectionContext,0)


        def xc_swift_package_product_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependency_sectionContext,0)


        def xc_version_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_version_group_sectionContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_objects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjects" ):
                listener.enterObjects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjects" ):
                listener.exitObjects(self)




    def objects(self):

        localctx = PBXProjParser.ObjectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_objects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(PBXProjParser.OBJECTS)
            self.state = 371
            self.match(PBXProjParser.T__3)
            self.state = 372
            self.match(PBXProjParser.T__0)
            self.state = 374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 373
                self.pbx_aggregate_target_section()


            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 376
                self.pbx_build_file_section()


            self.state = 380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 379
                self.pbx_container_item_proxy_section()


            self.state = 383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 382
                self.pbx_copy_files_build_phase_section()


            self.state = 385
            self.pbx_file_reference_section()
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 386
                self.pbx_frameworks_build_phase_section()


            self.state = 389
            self.pbx_group_section()
            self.state = 391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 390
                self.pbx_headers_build_phase_section()


            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 393
                self.pbx_legacy_target_section()


            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 396
                self.pbx_native_target_section()


            self.state = 399
            self.pbx_project_section()
            self.state = 401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 400
                self.pbx_reference_proxy_section()


            self.state = 404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 403
                self.pbx_resources_build_phase_section()


            self.state = 407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 406
                self.pbx_shell_script_build_phase_section()


            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 409
                self.pbx_sources_build_phase_section()


            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 412
                self.pbx_target_dependency_section()


            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 415
                self.pbx_variant_group_section()


            self.state = 418
            self.xc_build_configuration_section()
            self.state = 419
            self.xc_configuration_list_section()
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 420
                self.xc_remote_swift_package_reference_section()


            self.state = 424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 423
                self.xc_swift_package_product_dependency_section()


            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 426
                self.xc_version_group_section()


            self.state = 429
            self.match(PBXProjParser.T__1)
            self.state = 430
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROOT_OBJECT(self):
            return self.getToken(PBXProjParser.ROOT_OBJECT, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_root_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_object" ):
                listener.enterRoot_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_object" ):
                listener.exitRoot_object(self)




    def root_object(self):

        localctx = PBXProjParser.Root_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_root_object)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(PBXProjParser.ROOT_OBJECT)
            self.state = 433
            self.match(PBXProjParser.T__3)
            self.state = 434
            self.match(PBXProjParser.REFERENCE)
            self.state = 435
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_aggregate_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_aggregate_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target_section" ):
                listener.enterPbx_aggregate_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target_section" ):
                listener.exitPbx_aggregate_target_section(self)




    def pbx_aggregate_target_section(self):

        localctx = PBXProjParser.Pbx_aggregate_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_pbx_aggregate_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 437
                    self.pbx_aggregate_target()

                else:
                    raise NoViableAltException(self)
                self.state = 440 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_file_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_file(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_fileContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_fileContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file_section" ):
                listener.enterPbx_build_file_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file_section" ):
                listener.exitPbx_build_file_section(self)




    def pbx_build_file_section(self):

        localctx = PBXProjParser.Pbx_build_file_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pbx_build_file_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 442
                    self.pbx_build_file()

                else:
                    raise NoViableAltException(self)
                self.state = 445 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_container_item_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_container_item_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy_section" ):
                listener.enterPbx_container_item_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy_section" ):
                listener.exitPbx_container_item_proxy_section(self)




    def pbx_container_item_proxy_section(self):

        localctx = PBXProjParser.Pbx_container_item_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pbx_container_item_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 447
                    self.pbx_container_item_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 450 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_copy_files_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_copy_files_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase_section" ):
                listener.enterPbx_copy_files_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase_section" ):
                listener.exitPbx_copy_files_build_phase_section(self)




    def pbx_copy_files_build_phase_section(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_pbx_copy_files_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 452
                    self.pbx_copy_files_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 455 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_file_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_file_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_file_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference_section" ):
                listener.enterPbx_file_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference_section" ):
                listener.exitPbx_file_reference_section(self)




    def pbx_file_reference_section(self):

        localctx = PBXProjParser.Pbx_file_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_pbx_file_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 457
                    self.pbx_file_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 460 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_frameworks_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_frameworks_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase_section" ):
                listener.enterPbx_frameworks_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase_section" ):
                listener.exitPbx_frameworks_build_phase_section(self)




    def pbx_frameworks_build_phase_section(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pbx_frameworks_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 462
                    self.pbx_frameworks_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 465 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group_section" ):
                listener.enterPbx_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group_section" ):
                listener.exitPbx_group_section(self)




    def pbx_group_section(self):

        localctx = PBXProjParser.Pbx_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pbx_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 467
                    self.pbx_group()

                else:
                    raise NoViableAltException(self)
                self.state = 470 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_headers_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_headers_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase_section" ):
                listener.enterPbx_headers_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase_section" ):
                listener.exitPbx_headers_build_phase_section(self)




    def pbx_headers_build_phase_section(self):

        localctx = PBXProjParser.Pbx_headers_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pbx_headers_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 472
                    self.pbx_headers_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 475 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_native_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_native_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_native_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target_section" ):
                listener.enterPbx_native_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target_section" ):
                listener.exitPbx_native_target_section(self)




    def pbx_native_target_section(self):

        localctx = PBXProjParser.Pbx_native_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pbx_native_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 477
                    self.pbx_native_target()

                else:
                    raise NoViableAltException(self)
                self.state = 480 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_legacy_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_legacy_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_legacy_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_legacy_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_legacy_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_legacy_target_section" ):
                listener.enterPbx_legacy_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_legacy_target_section" ):
                listener.exitPbx_legacy_target_section(self)




    def pbx_legacy_target_section(self):

        localctx = PBXProjParser.Pbx_legacy_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pbx_legacy_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 482
                    self.pbx_legacy_target()

                else:
                    raise NoViableAltException(self)
                self.state = 485 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_project_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_project(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_projectContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_projectContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project_section" ):
                listener.enterPbx_project_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project_section" ):
                listener.exitPbx_project_section(self)




    def pbx_project_section(self):

        localctx = PBXProjParser.Pbx_project_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pbx_project_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 487
                    self.pbx_project()

                else:
                    raise NoViableAltException(self)
                self.state = 490 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_reference_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_reference_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy_section" ):
                listener.enterPbx_reference_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy_section" ):
                listener.exitPbx_reference_proxy_section(self)




    def pbx_reference_proxy_section(self):

        localctx = PBXProjParser.Pbx_reference_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pbx_reference_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 492
                    self.pbx_reference_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 495 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_resources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_resources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase_section" ):
                listener.enterPbx_resources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase_section" ):
                listener.exitPbx_resources_build_phase_section(self)




    def pbx_resources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_resources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pbx_resources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 497
                    self.pbx_resources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 500 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_shell_script_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_shell_script_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase_section" ):
                listener.enterPbx_shell_script_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase_section" ):
                listener.exitPbx_shell_script_build_phase_section(self)




    def pbx_shell_script_build_phase_section(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pbx_shell_script_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 502
                    self.pbx_shell_script_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 505 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_sources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_sources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase_section" ):
                listener.enterPbx_sources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase_section" ):
                listener.exitPbx_sources_build_phase_section(self)




    def pbx_sources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_sources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pbx_sources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 507
                    self.pbx_sources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 510 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_target_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_target_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency_section" ):
                listener.enterPbx_target_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency_section" ):
                listener.exitPbx_target_dependency_section(self)




    def pbx_target_dependency_section(self):

        localctx = PBXProjParser.Pbx_target_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pbx_target_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 512
                    self.pbx_target_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 515 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_variant_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_variant_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_variant_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group_section" ):
                listener.enterPbx_variant_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group_section" ):
                listener.exitPbx_variant_group_section(self)




    def pbx_variant_group_section(self):

        localctx = PBXProjParser.Pbx_variant_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pbx_variant_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 517
                    self.pbx_variant_group()

                else:
                    raise NoViableAltException(self)
                self.state = 520 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configuration_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_build_configuration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_build_configurationContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_build_configurationContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration_section" ):
                listener.enterXc_build_configuration_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration_section" ):
                listener.exitXc_build_configuration_section(self)




    def xc_build_configuration_section(self):

        localctx = PBXProjParser.Xc_build_configuration_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_xc_build_configuration_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 522
                    self.xc_build_configuration()

                else:
                    raise NoViableAltException(self)
                self.state = 525 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_list_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_configuration_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_configuration_listContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_configuration_listContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list_section" ):
                listener.enterXc_configuration_list_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list_section" ):
                listener.exitXc_configuration_list_section(self)




    def xc_configuration_list_section(self):

        localctx = PBXProjParser.Xc_configuration_list_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_xc_configuration_list_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 527
                    self.xc_configuration_list()

                else:
                    raise NoViableAltException(self)
                self.state = 530 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_remote_swift_package_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_remote_swift_package_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference_section" ):
                listener.enterXc_remote_swift_package_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference_section" ):
                listener.exitXc_remote_swift_package_reference_section(self)




    def xc_remote_swift_package_reference_section(self):

        localctx = PBXProjParser.Xc_remote_swift_package_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_xc_remote_swift_package_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 532
                    self.xc_remote_swift_package_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 535 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_swift_package_product_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_swift_package_product_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency_section" ):
                listener.enterXc_swift_package_product_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency_section" ):
                listener.exitXc_swift_package_product_dependency_section(self)




    def xc_swift_package_product_dependency_section(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_xc_swift_package_product_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 537
                    self.xc_swift_package_product_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 540 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_version_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_version_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_version_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group_section" ):
                listener.enterXc_version_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group_section" ):
                listener.exitXc_version_group_section(self)




    def xc_version_group_section(self):

        localctx = PBXProjParser.Xc_version_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_xc_version_group_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 542
                self.xc_version_group()
                self.state = 545 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_aggregate_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_aggregate_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target" ):
                listener.enterPbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target" ):
                listener.exitPbx_aggregate_target(self)




    def pbx_aggregate_target(self):

        localctx = PBXProjParser.Pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pbx_aggregate_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(PBXProjParser.REFERENCE)
            self.state = 548
            self.match(PBXProjParser.T__3)
            self.state = 549
            self.match(PBXProjParser.T__0)
            self.state = 550
            self.isa_pbx_aggregate_target()
            self.state = 551
            self.build_configuration_list()
            self.state = 552
            self.build_phases()
            self.state = 553
            self.dependencies()
            self.state = 554
            self.name()
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 555
                self.product_name()


            self.state = 558
            self.match(PBXProjParser.T__1)
            self.state = 559
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_file(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_fileContext,0)


        def file_ref(self):
            return self.getTypedRuleContext(PBXProjParser.File_refContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def platform_filters(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filtersContext,0)


        def product_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Product_refContext,0)


        def settings(self):
            return self.getTypedRuleContext(PBXProjParser.SettingsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file" ):
                listener.enterPbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file" ):
                listener.exitPbx_build_file(self)




    def pbx_build_file(self):

        localctx = PBXProjParser.Pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pbx_build_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(PBXProjParser.REFERENCE)
            self.state = 562
            self.match(PBXProjParser.T__3)
            self.state = 563
            self.match(PBXProjParser.T__0)
            self.state = 564
            self.isa_pbx_build_file()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 565
                self.file_ref()


            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 568
                self.platform_filter()


            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 571
                self.platform_filters()


            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 574
                self.product_ref()


            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 577
                self.settings()


            self.state = 580
            self.match(PBXProjParser.T__1)
            self.state = 581
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_container_item_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_container_item_proxyContext,0)


        def container_portal(self):
            return self.getTypedRuleContext(PBXProjParser.Container_portalContext,0)


        def proxy_type(self):
            return self.getTypedRuleContext(PBXProjParser.Proxy_typeContext,0)


        def remote_global_id_string(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_global_id_stringContext,0)


        def remote_info(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_infoContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy" ):
                listener.enterPbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy" ):
                listener.exitPbx_container_item_proxy(self)




    def pbx_container_item_proxy(self):

        localctx = PBXProjParser.Pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(PBXProjParser.REFERENCE)
            self.state = 584
            self.match(PBXProjParser.T__3)
            self.state = 585
            self.match(PBXProjParser.T__0)
            self.state = 586
            self.isa_pbx_container_item_proxy()
            self.state = 587
            self.container_portal()
            self.state = 588
            self.proxy_type()
            self.state = 589
            self.remote_global_id_string()
            self.state = 590
            self.remote_info()
            self.state = 591
            self.match(PBXProjParser.T__1)
            self.state = 592
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_copy_files_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_copy_files_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def dst_path(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_pathContext,0)


        def dst_subfolder_spec(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_subfolder_specContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase" ):
                listener.enterPbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase" ):
                listener.exitPbx_copy_files_build_phase(self)




    def pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pbx_copy_files_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(PBXProjParser.REFERENCE)
            self.state = 595
            self.match(PBXProjParser.T__3)
            self.state = 596
            self.match(PBXProjParser.T__0)
            self.state = 597
            self.isa_pbx_copy_files_build_phase()
            self.state = 598
            self.build_action_mask()
            self.state = 599
            self.dst_path()
            self.state = 600
            self.dst_subfolder_spec()
            self.state = 601
            self.files()
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 602
                self.name()


            self.state = 605
            self.run_only_for_deployment_postprocessing()
            self.state = 606
            self.match(PBXProjParser.T__1)
            self.state = 607
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_file_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_file_referenceContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def explicit_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Explicit_file_typeContext,0)


        def file_encoding(self):
            return self.getTypedRuleContext(PBXProjParser.File_encodingContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def last_known_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Last_known_file_typeContext,0)


        def line_ending(self):
            return self.getTypedRuleContext(PBXProjParser.Line_endingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def plist_structure_definition_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Plist_structure_definition_identifierContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def xc_language_specification_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_language_specification_identifierContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference" ):
                listener.enterPbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference" ):
                listener.exitPbx_file_reference(self)




    def pbx_file_reference(self):

        localctx = PBXProjParser.Pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_pbx_file_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(PBXProjParser.REFERENCE)
            self.state = 610
            self.match(PBXProjParser.T__3)
            self.state = 611
            self.match(PBXProjParser.T__0)
            self.state = 612
            self.isa_pbx_file_reference()
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 613
                self.comments()


            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 616
                self.explicit_file_type()


            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 619
                self.file_encoding()


            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 622
                self.include_in_index()


            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 625
                self.indent_width()


            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 628
                self.last_known_file_type()


            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 631
                self.line_ending()


            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 634
                self.name()


            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 637
                self.path()


            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 640
                self.plist_structure_definition_identifier()


            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 643
                self.source_tree()


            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 646
                self.tab_width()


            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 649
                self.xc_language_specification_identifier()


            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 652
                self.uses_tabs()


            self.state = 655
            self.match(PBXProjParser.T__1)
            self.state = 656
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_frameworks_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_frameworks_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase" ):
                listener.enterPbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase" ):
                listener.exitPbx_frameworks_build_phase(self)




    def pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(PBXProjParser.REFERENCE)
            self.state = 659
            self.match(PBXProjParser.T__3)
            self.state = 660
            self.match(PBXProjParser.T__0)
            self.state = 661
            self.isa_pbx_frameworks_build_phase()
            self.state = 662
            self.build_action_mask()
            self.state = 663
            self.files()
            self.state = 664
            self.run_only_for_deployment_postprocessing()
            self.state = 665
            self.match(PBXProjParser.T__1)
            self.state = 666
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def wraps_lines(self):
            return self.getTypedRuleContext(PBXProjParser.Wraps_linesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group" ):
                listener.enterPbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group" ):
                listener.exitPbx_group(self)




    def pbx_group(self):

        localctx = PBXProjParser.Pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_pbx_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(PBXProjParser.REFERENCE)
            self.state = 669
            self.match(PBXProjParser.T__3)
            self.state = 670
            self.match(PBXProjParser.T__0)
            self.state = 671
            self.isa_pbx_group()
            self.state = 672
            self.children()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 673
                self.indent_width()


            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 676
                self.include_in_index()


            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 679
                self.name()


            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 682
                self.path()


            self.state = 685
            self.source_tree()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 686
                self.tab_width()


            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 689
                self.uses_tabs()


            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 692
                self.wraps_lines()


            self.state = 695
            self.match(PBXProjParser.T__1)
            self.state = 696
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_header_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_header_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase" ):
                listener.enterPbx_headers_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase" ):
                listener.exitPbx_headers_build_phase(self)




    def pbx_headers_build_phase(self):

        localctx = PBXProjParser.Pbx_headers_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_pbx_headers_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(PBXProjParser.REFERENCE)
            self.state = 699
            self.match(PBXProjParser.T__3)
            self.state = 700
            self.match(PBXProjParser.T__0)
            self.state = 701
            self.isa_pbx_header_build_phase()
            self.state = 702
            self.build_action_mask()
            self.state = 703
            self.files()
            self.state = 704
            self.run_only_for_deployment_postprocessing()
            self.state = 705
            self.match(PBXProjParser.T__1)
            self.state = 706
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_native_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_native_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_rules(self):
            return self.getTypedRuleContext(PBXProjParser.Build_rulesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def product_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Product_referenceContext,0)


        def product_type(self):
            return self.getTypedRuleContext(PBXProjParser.Product_typeContext,0)


        def product_install_path(self):
            return self.getTypedRuleContext(PBXProjParser.Product_install_pathContext,0)


        def package_product_dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.Package_product_dependenciesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target" ):
                listener.enterPbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target" ):
                listener.exitPbx_native_target(self)




    def pbx_native_target(self):

        localctx = PBXProjParser.Pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_pbx_native_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(PBXProjParser.REFERENCE)
            self.state = 709
            self.match(PBXProjParser.T__3)
            self.state = 710
            self.match(PBXProjParser.T__0)
            self.state = 711
            self.isa_pbx_native_target()
            self.state = 712
            self.build_configuration_list()
            self.state = 713
            self.build_phases()
            self.state = 714
            self.build_rules()
            self.state = 715
            self.dependencies()
            self.state = 716
            self.name()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 717
                self.product_install_path()


            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 720
                self.package_product_dependencies()


            self.state = 723
            self.product_name()
            self.state = 724
            self.product_reference()
            self.state = 725
            self.product_type()
            self.state = 726
            self.match(PBXProjParser.T__1)
            self.state = 727
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_legacy_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_legacy_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_legacy_targetContext,0)


        def build_arguments_string(self):
            return self.getTypedRuleContext(PBXProjParser.Build_arguments_stringContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_tool_path(self):
            return self.getTypedRuleContext(PBXProjParser.Build_tool_pathContext,0)


        def build_working_directory(self):
            return self.getTypedRuleContext(PBXProjParser.Build_working_directoryContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def pass_build_settings_in_environment(self):
            return self.getTypedRuleContext(PBXProjParser.Pass_build_settings_in_environmentContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_legacy_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_legacy_target" ):
                listener.enterPbx_legacy_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_legacy_target" ):
                listener.exitPbx_legacy_target(self)




    def pbx_legacy_target(self):

        localctx = PBXProjParser.Pbx_legacy_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pbx_legacy_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(PBXProjParser.REFERENCE)
            self.state = 730
            self.match(PBXProjParser.T__3)
            self.state = 731
            self.match(PBXProjParser.T__0)
            self.state = 732
            self.isa_pbx_legacy_target()
            self.state = 733
            self.build_arguments_string()
            self.state = 734
            self.build_configuration_list()
            self.state = 735
            self.build_phases()
            self.state = 736
            self.build_tool_path()
            self.state = 737
            self.build_working_directory()
            self.state = 738
            self.dependencies()
            self.state = 739
            self.name()
            self.state = 740
            self.pass_build_settings_in_environment()
            self.state = 741
            self.product_name()
            self.state = 742
            self.match(PBXProjParser.T__1)
            self.state = 743
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_project(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_projectContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def compatibility_version(self):
            return self.getTypedRuleContext(PBXProjParser.Compatibility_versionContext,0)


        def has_scanned_for_encodings(self):
            return self.getTypedRuleContext(PBXProjParser.Has_scanned_for_encodingsContext,0)


        def main_group(self):
            return self.getTypedRuleContext(PBXProjParser.Main_groupContext,0)


        def project_dir_path(self):
            return self.getTypedRuleContext(PBXProjParser.Project_dir_pathContext,0)


        def project_root(self):
            return self.getTypedRuleContext(PBXProjParser.Project_rootContext,0)


        def targets(self):
            return self.getTypedRuleContext(PBXProjParser.TargetsContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PBXProjParser.AttributesContext,0)


        def development_region(self):
            return self.getTypedRuleContext(PBXProjParser.Development_regionContext,0)


        def known_regions(self):
            return self.getTypedRuleContext(PBXProjParser.Known_regionsContext,0)


        def package_references(self):
            return self.getTypedRuleContext(PBXProjParser.Package_referencesContext,0)


        def product_ref_group(self):
            return self.getTypedRuleContext(PBXProjParser.Product_ref_groupContext,0)


        def project_references(self):
            return self.getTypedRuleContext(PBXProjParser.Project_referencesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project" ):
                listener.enterPbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project" ):
                listener.exitPbx_project(self)




    def pbx_project(self):

        localctx = PBXProjParser.Pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pbx_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(PBXProjParser.REFERENCE)
            self.state = 746
            self.match(PBXProjParser.T__3)
            self.state = 747
            self.match(PBXProjParser.T__0)
            self.state = 748
            self.isa_pbx_project()
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 749
                self.attributes()


            self.state = 752
            self.build_configuration_list()
            self.state = 753
            self.compatibility_version()
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 754
                self.development_region()


            self.state = 757
            self.has_scanned_for_encodings()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 758
                self.known_regions()


            self.state = 761
            self.main_group()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 762
                self.package_references()


            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 765
                self.product_ref_group()


            self.state = 768
            self.project_dir_path()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 769
                self.project_references()


            self.state = 772
            self.project_root()
            self.state = 773
            self.targets()
            self.state = 774
            self.match(PBXProjParser.T__1)
            self.state = 775
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_reference_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_reference_proxyContext,0)


        def file_type(self):
            return self.getTypedRuleContext(PBXProjParser.File_typeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def remote_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_refContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy" ):
                listener.enterPbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy" ):
                listener.exitPbx_reference_proxy(self)




    def pbx_reference_proxy(self):

        localctx = PBXProjParser.Pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pbx_reference_proxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(PBXProjParser.REFERENCE)
            self.state = 778
            self.match(PBXProjParser.T__3)
            self.state = 779
            self.match(PBXProjParser.T__0)
            self.state = 780
            self.isa_pbx_reference_proxy()
            self.state = 781
            self.file_type()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 782
                self.name()


            self.state = 785
            self.path()
            self.state = 786
            self.remote_ref()
            self.state = 787
            self.source_tree()
            self.state = 788
            self.match(PBXProjParser.T__1)
            self.state = 789
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_resources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_resources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase" ):
                listener.enterPbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase" ):
                listener.exitPbx_resources_build_phase(self)




    def pbx_resources_build_phase(self):

        localctx = PBXProjParser.Pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(PBXProjParser.REFERENCE)
            self.state = 792
            self.match(PBXProjParser.T__3)
            self.state = 793
            self.match(PBXProjParser.T__0)
            self.state = 794
            self.isa_pbx_resources_build_phase()
            self.state = 795
            self.build_action_mask()
            self.state = 796
            self.files()
            self.state = 797
            self.run_only_for_deployment_postprocessing()
            self.state = 798
            self.match(PBXProjParser.T__1)
            self.state = 799
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_shell_script_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_shell_script_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def shell_path(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_pathContext,0)


        def shell_script(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_scriptContext,0)


        def input_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_file_list_pathsContext,0)


        def input_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_pathsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def output_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_file_list_pathsContext,0)


        def output_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_pathsContext,0)


        def show_env_vars_in_log(self):
            return self.getTypedRuleContext(PBXProjParser.Show_env_vars_in_logContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase" ):
                listener.enterPbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase" ):
                listener.exitPbx_shell_script_build_phase(self)




    def pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_pbx_shell_script_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(PBXProjParser.REFERENCE)
            self.state = 802
            self.match(PBXProjParser.T__3)
            self.state = 803
            self.match(PBXProjParser.T__0)
            self.state = 804
            self.isa_pbx_shell_script_build_phase()
            self.state = 805
            self.build_action_mask()
            self.state = 806
            self.files()
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 807
                self.input_file_list_paths()


            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 810
                self.input_paths()


            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 813
                self.name()


            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 816
                self.output_file_list_paths()


            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 819
                self.output_paths()


            self.state = 822
            self.run_only_for_deployment_postprocessing()
            self.state = 823
            self.shell_path()
            self.state = 824
            self.shell_script()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 825
                self.show_env_vars_in_log()


            self.state = 828
            self.match(PBXProjParser.T__1)
            self.state = 829
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_sources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_sources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase" ):
                listener.enterPbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase" ):
                listener.exitPbx_sources_build_phase(self)




    def pbx_sources_build_phase(self):

        localctx = PBXProjParser.Pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(PBXProjParser.REFERENCE)
            self.state = 832
            self.match(PBXProjParser.T__3)
            self.state = 833
            self.match(PBXProjParser.T__0)
            self.state = 834
            self.isa_pbx_sources_build_phase()
            self.state = 835
            self.build_action_mask()
            self.state = 836
            self.files()
            self.state = 837
            self.run_only_for_deployment_postprocessing()
            self.state = 838
            self.match(PBXProjParser.T__1)
            self.state = 839
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_target_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_target_dependencyContext,0)


        def target_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Target_proxyContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def platform_filters(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filtersContext,0)


        def target(self):
            return self.getTypedRuleContext(PBXProjParser.TargetContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency" ):
                listener.enterPbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency" ):
                listener.exitPbx_target_dependency(self)




    def pbx_target_dependency(self):

        localctx = PBXProjParser.Pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_pbx_target_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(PBXProjParser.REFERENCE)
            self.state = 842
            self.match(PBXProjParser.T__3)
            self.state = 843
            self.match(PBXProjParser.T__0)
            self.state = 844
            self.isa_pbx_target_dependency()
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 845
                self.name()


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 848
                self.platform_filter()


            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 851
                self.platform_filters()


            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 854
                self.target()


            self.state = 857
            self.target_proxy()
            self.state = 858
            self.match(PBXProjParser.T__1)
            self.state = 859
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_variant_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_variant_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group" ):
                listener.enterPbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group" ):
                listener.exitPbx_variant_group(self)




    def pbx_variant_group(self):

        localctx = PBXProjParser.Pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_pbx_variant_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(PBXProjParser.REFERENCE)
            self.state = 862
            self.match(PBXProjParser.T__3)
            self.state = 863
            self.match(PBXProjParser.T__0)
            self.state = 864
            self.isa_pbx_variant_group()
            self.state = 865
            self.children()
            self.state = 866
            self.name()
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 867
                self.path()


            self.state = 870
            self.source_tree()
            self.state = 871
            self.match(PBXProjParser.T__1)
            self.state = 872
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_build_configuration(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_build_configurationContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def base_configuration_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Base_configuration_referenceContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration" ):
                listener.enterXc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration" ):
                listener.exitXc_build_configuration(self)




    def xc_build_configuration(self):

        localctx = PBXProjParser.Xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xc_build_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(PBXProjParser.REFERENCE)
            self.state = 875
            self.match(PBXProjParser.T__3)
            self.state = 876
            self.match(PBXProjParser.T__0)
            self.state = 877
            self.isa_xc_build_configuration()
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 878
                self.base_configuration_reference()


            self.state = 881
            self.build_settings()
            self.state = 882
            self.name()
            self.state = 883
            self.match(PBXProjParser.T__1)
            self.state = 884
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_configuration_listContext,0)


        def build_configurations(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configurationsContext,0)


        def default_configuration_is_visible(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_is_visibleContext,0)


        def default_configuration_name(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list" ):
                listener.enterXc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list" ):
                listener.exitXc_configuration_list(self)




    def xc_configuration_list(self):

        localctx = PBXProjParser.Xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_xc_configuration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.match(PBXProjParser.REFERENCE)
            self.state = 887
            self.match(PBXProjParser.T__3)
            self.state = 888
            self.match(PBXProjParser.T__0)
            self.state = 889
            self.isa_xc_configuration_list()
            self.state = 890
            self.build_configurations()
            self.state = 891
            self.default_configuration_is_visible()
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 892
                self.default_configuration_name()


            self.state = 895
            self.match(PBXProjParser.T__1)
            self.state = 896
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_remote_swift_package_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_remote_swift_package_referenceContext,0)


        def repository_url(self):
            return self.getTypedRuleContext(PBXProjParser.Repository_urlContext,0)


        def requirement(self):
            return self.getTypedRuleContext(PBXProjParser.RequirementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference" ):
                listener.enterXc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference" ):
                listener.exitXc_remote_swift_package_reference(self)




    def xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.match(PBXProjParser.REFERENCE)
            self.state = 899
            self.match(PBXProjParser.T__3)
            self.state = 900
            self.match(PBXProjParser.T__0)
            self.state = 901
            self.isa_xc_remote_swift_package_reference()
            self.state = 902
            self.repository_url()
            self.state = 903
            self.requirement()
            self.state = 904
            self.match(PBXProjParser.T__1)
            self.state = 905
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_swift_package_product_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_swift_package_product_dependencyContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def xc_package(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_packageContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency" ):
                listener.enterXc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency" ):
                listener.exitXc_swift_package_product_dependency(self)




    def xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_xc_swift_package_product_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(PBXProjParser.REFERENCE)
            self.state = 908
            self.match(PBXProjParser.T__3)
            self.state = 909
            self.match(PBXProjParser.T__0)
            self.state = 910
            self.isa_xc_swift_package_product_dependency()
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 911
                self.xc_package()


            self.state = 914
            self.product_name()
            self.state = 915
            self.match(PBXProjParser.T__1)
            self.state = 916
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_version_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_version_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def current_version(self):
            return self.getTypedRuleContext(PBXProjParser.Current_versionContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def version_group_type(self):
            return self.getTypedRuleContext(PBXProjParser.Version_group_typeContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group" ):
                listener.enterXc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group" ):
                listener.exitXc_version_group(self)




    def xc_version_group(self):

        localctx = PBXProjParser.Xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_xc_version_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(PBXProjParser.REFERENCE)
            self.state = 919
            self.match(PBXProjParser.T__3)
            self.state = 920
            self.match(PBXProjParser.T__0)
            self.state = 921
            self.isa_xc_version_group()
            self.state = 922
            self.children()
            self.state = 923
            self.current_version()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 924
                self.name()


            self.state = 927
            self.path()
            self.state = 928
            self.source_tree()
            self.state = 929
            self.version_group_type()
            self.state = 930
            self.match(PBXProjParser.T__1)
            self.state = 931
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_aggregate_target" ):
                listener.enterIsa_pbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_aggregate_target" ):
                listener.exitIsa_pbx_aggregate_target(self)




    def isa_pbx_aggregate_target(self):

        localctx = PBXProjParser.Isa_pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_isa_pbx_aggregate_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(PBXProjParser.ISA)
            self.state = 934
            self.match(PBXProjParser.T__3)
            self.state = 935
            self.match(PBXProjParser.T__6)
            self.state = 936
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_build_file" ):
                listener.enterIsa_pbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_build_file" ):
                listener.exitIsa_pbx_build_file(self)




    def isa_pbx_build_file(self):

        localctx = PBXProjParser.Isa_pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_isa_pbx_build_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(PBXProjParser.ISA)
            self.state = 939
            self.match(PBXProjParser.T__3)
            self.state = 940
            self.match(PBXProjParser.T__7)
            self.state = 941
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_container_item_proxy" ):
                listener.enterIsa_pbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_container_item_proxy" ):
                listener.exitIsa_pbx_container_item_proxy(self)




    def isa_pbx_container_item_proxy(self):

        localctx = PBXProjParser.Isa_pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_isa_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(PBXProjParser.ISA)
            self.state = 944
            self.match(PBXProjParser.T__3)
            self.state = 945
            self.match(PBXProjParser.T__8)
            self.state = 946
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_copy_files_build_phase" ):
                listener.enterIsa_pbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_copy_files_build_phase" ):
                listener.exitIsa_pbx_copy_files_build_phase(self)




    def isa_pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_isa_pbx_copy_files_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(PBXProjParser.ISA)
            self.state = 949
            self.match(PBXProjParser.T__3)
            self.state = 950
            self.match(PBXProjParser.T__9)
            self.state = 951
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_file_reference" ):
                listener.enterIsa_pbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_file_reference" ):
                listener.exitIsa_pbx_file_reference(self)




    def isa_pbx_file_reference(self):

        localctx = PBXProjParser.Isa_pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_isa_pbx_file_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(PBXProjParser.ISA)
            self.state = 954
            self.match(PBXProjParser.T__3)
            self.state = 955
            self.match(PBXProjParser.T__10)
            self.state = 956
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_frameworks_build_phase" ):
                listener.enterIsa_pbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_frameworks_build_phase" ):
                listener.exitIsa_pbx_frameworks_build_phase(self)




    def isa_pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_isa_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(PBXProjParser.ISA)
            self.state = 959
            self.match(PBXProjParser.T__3)
            self.state = 960
            self.match(PBXProjParser.T__11)
            self.state = 961
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_group" ):
                listener.enterIsa_pbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_group" ):
                listener.exitIsa_pbx_group(self)




    def isa_pbx_group(self):

        localctx = PBXProjParser.Isa_pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_isa_pbx_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(PBXProjParser.ISA)
            self.state = 964
            self.match(PBXProjParser.T__3)
            self.state = 965
            self.match(PBXProjParser.T__12)
            self.state = 966
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_header_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_header_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_header_build_phase" ):
                listener.enterIsa_pbx_header_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_header_build_phase" ):
                listener.exitIsa_pbx_header_build_phase(self)




    def isa_pbx_header_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_header_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_isa_pbx_header_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(PBXProjParser.ISA)
            self.state = 969
            self.match(PBXProjParser.T__3)
            self.state = 970
            self.match(PBXProjParser.T__13)
            self.state = 971
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_native_target" ):
                listener.enterIsa_pbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_native_target" ):
                listener.exitIsa_pbx_native_target(self)




    def isa_pbx_native_target(self):

        localctx = PBXProjParser.Isa_pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_isa_pbx_native_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(PBXProjParser.ISA)
            self.state = 974
            self.match(PBXProjParser.T__3)
            self.state = 975
            self.match(PBXProjParser.T__14)
            self.state = 976
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_legacy_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_legacy_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_legacy_target" ):
                listener.enterIsa_pbx_legacy_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_legacy_target" ):
                listener.exitIsa_pbx_legacy_target(self)




    def isa_pbx_legacy_target(self):

        localctx = PBXProjParser.Isa_pbx_legacy_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_isa_pbx_legacy_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(PBXProjParser.ISA)
            self.state = 979
            self.match(PBXProjParser.T__3)
            self.state = 980
            self.match(PBXProjParser.T__15)
            self.state = 981
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_project" ):
                listener.enterIsa_pbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_project" ):
                listener.exitIsa_pbx_project(self)




    def isa_pbx_project(self):

        localctx = PBXProjParser.Isa_pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_isa_pbx_project)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(PBXProjParser.ISA)
            self.state = 984
            self.match(PBXProjParser.T__3)
            self.state = 985
            self.match(PBXProjParser.T__16)
            self.state = 986
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_reference_proxy" ):
                listener.enterIsa_pbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_reference_proxy" ):
                listener.exitIsa_pbx_reference_proxy(self)




    def isa_pbx_reference_proxy(self):

        localctx = PBXProjParser.Isa_pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_isa_pbx_reference_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(PBXProjParser.ISA)
            self.state = 989
            self.match(PBXProjParser.T__3)
            self.state = 990
            self.match(PBXProjParser.T__17)
            self.state = 991
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_resources_build_phase" ):
                listener.enterIsa_pbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_resources_build_phase" ):
                listener.exitIsa_pbx_resources_build_phase(self)




    def isa_pbx_resources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_isa_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(PBXProjParser.ISA)
            self.state = 994
            self.match(PBXProjParser.T__3)
            self.state = 995
            self.match(PBXProjParser.T__18)
            self.state = 996
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_shell_script_build_phase" ):
                listener.enterIsa_pbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_shell_script_build_phase" ):
                listener.exitIsa_pbx_shell_script_build_phase(self)




    def isa_pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_isa_pbx_shell_script_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.match(PBXProjParser.ISA)
            self.state = 999
            self.match(PBXProjParser.T__3)
            self.state = 1000
            self.match(PBXProjParser.T__19)
            self.state = 1001
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_sources_build_phase" ):
                listener.enterIsa_pbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_sources_build_phase" ):
                listener.exitIsa_pbx_sources_build_phase(self)




    def isa_pbx_sources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_isa_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(PBXProjParser.ISA)
            self.state = 1004
            self.match(PBXProjParser.T__3)
            self.state = 1005
            self.match(PBXProjParser.T__20)
            self.state = 1006
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_target_dependency" ):
                listener.enterIsa_pbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_target_dependency" ):
                listener.exitIsa_pbx_target_dependency(self)




    def isa_pbx_target_dependency(self):

        localctx = PBXProjParser.Isa_pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_isa_pbx_target_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(PBXProjParser.ISA)
            self.state = 1009
            self.match(PBXProjParser.T__3)
            self.state = 1010
            self.match(PBXProjParser.T__21)
            self.state = 1011
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_variant_group" ):
                listener.enterIsa_pbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_variant_group" ):
                listener.exitIsa_pbx_variant_group(self)




    def isa_pbx_variant_group(self):

        localctx = PBXProjParser.Isa_pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_isa_pbx_variant_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(PBXProjParser.ISA)
            self.state = 1014
            self.match(PBXProjParser.T__3)
            self.state = 1015
            self.match(PBXProjParser.T__22)
            self.state = 1016
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_build_configuration" ):
                listener.enterIsa_xc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_build_configuration" ):
                listener.exitIsa_xc_build_configuration(self)




    def isa_xc_build_configuration(self):

        localctx = PBXProjParser.Isa_xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_isa_xc_build_configuration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(PBXProjParser.ISA)
            self.state = 1019
            self.match(PBXProjParser.T__3)
            self.state = 1020
            self.match(PBXProjParser.T__23)
            self.state = 1021
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_configuration_list" ):
                listener.enterIsa_xc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_configuration_list" ):
                listener.exitIsa_xc_configuration_list(self)




    def isa_xc_configuration_list(self):

        localctx = PBXProjParser.Isa_xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_isa_xc_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(PBXProjParser.ISA)
            self.state = 1024
            self.match(PBXProjParser.T__3)
            self.state = 1025
            self.match(PBXProjParser.T__24)
            self.state = 1026
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_remote_swift_package_reference" ):
                listener.enterIsa_xc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_remote_swift_package_reference" ):
                listener.exitIsa_xc_remote_swift_package_reference(self)




    def isa_xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Isa_xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_isa_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(PBXProjParser.ISA)
            self.state = 1029
            self.match(PBXProjParser.T__3)
            self.state = 1030
            self.match(PBXProjParser.T__25)
            self.state = 1031
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_swift_package_product_dependency" ):
                listener.enterIsa_xc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_swift_package_product_dependency" ):
                listener.exitIsa_xc_swift_package_product_dependency(self)




    def isa_xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Isa_xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_isa_xc_swift_package_product_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(PBXProjParser.ISA)
            self.state = 1034
            self.match(PBXProjParser.T__3)
            self.state = 1035
            self.match(PBXProjParser.T__26)
            self.state = 1036
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_version_group" ):
                listener.enterIsa_xc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_version_group" ):
                listener.exitIsa_xc_version_group(self)




    def isa_xc_version_group(self):

        localctx = PBXProjParser.Isa_xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_isa_xc_version_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(PBXProjParser.ISA)
            self.state = 1039
            self.match(PBXProjParser.T__3)
            self.state = 1040
            self.match(PBXProjParser.T__27)
            self.state = 1041
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_ref" ):
                listener.enterFile_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_ref" ):
                listener.exitFile_ref(self)




    def file_ref(self):

        localctx = PBXProjParser.File_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_file_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(PBXProjParser.T__28)
            self.state = 1044
            self.match(PBXProjParser.T__3)
            self.state = 1045
            self.match(PBXProjParser.REFERENCE)
            self.state = 1046
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref" ):
                listener.enterProduct_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref" ):
                listener.exitProduct_ref(self)




    def product_ref(self):

        localctx = PBXProjParser.Product_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_product_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(PBXProjParser.T__29)
            self.state = 1049
            self.match(PBXProjParser.T__3)
            self.state = 1050
            self.match(PBXProjParser.REFERENCE)
            self.state = 1051
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Container_portalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_container_portal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_portal" ):
                listener.enterContainer_portal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_portal" ):
                listener.exitContainer_portal(self)




    def container_portal(self):

        localctx = PBXProjParser.Container_portalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_container_portal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(PBXProjParser.T__30)
            self.state = 1054
            self.match(PBXProjParser.T__3)
            self.state = 1055
            self.match(PBXProjParser.REFERENCE)
            self.state = 1056
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_proxy_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_type" ):
                listener.enterProxy_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_type" ):
                listener.exitProxy_type(self)




    def proxy_type(self):

        localctx = PBXProjParser.Proxy_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_proxy_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(PBXProjParser.T__31)
            self.state = 1059
            self.match(PBXProjParser.T__3)
            self.state = 1060
            self.match(PBXProjParser.NUMBER)
            self.state = 1061
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_global_id_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_global_id_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_global_id_string" ):
                listener.enterRemote_global_id_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_global_id_string" ):
                listener.exitRemote_global_id_string(self)




    def remote_global_id_string(self):

        localctx = PBXProjParser.Remote_global_id_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_remote_global_id_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(PBXProjParser.T__32)
            self.state = 1064
            self.match(PBXProjParser.T__3)
            self.state = 1065
            self.match(PBXProjParser.REFERENCE)
            self.state = 1066
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_info" ):
                listener.enterRemote_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_info" ):
                listener.exitRemote_info(self)




    def remote_info(self):

        localctx = PBXProjParser.Remote_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_remote_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(PBXProjParser.T__33)
            self.state = 1069
            self.match(PBXProjParser.T__3)
            self.state = 1070
            self.any_string()
            self.state = 1071
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_encoding" ):
                listener.enterFile_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_encoding" ):
                listener.exitFile_encoding(self)




    def file_encoding(self):

        localctx = PBXProjParser.File_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_file_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(PBXProjParser.T__34)
            self.state = 1074
            self.match(PBXProjParser.T__3)
            self.state = 1075
            self.match(PBXProjParser.NUMBER)
            self.state = 1076
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = PBXProjParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(PBXProjParser.T__35)
            self.state = 1079
            self.match(PBXProjParser.T__3)
            self.state = 1080
            self.any_string()
            self.state = 1081
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_explicit_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_file_type" ):
                listener.enterExplicit_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_file_type" ):
                listener.exitExplicit_file_type(self)




    def explicit_file_type(self):

        localctx = PBXProjParser.Explicit_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_explicit_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(PBXProjParser.T__36)
            self.state = 1084
            self.match(PBXProjParser.T__3)
            self.state = 1085
            self.any_string()
            self.state = 1086
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_known_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_last_known_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_known_file_type" ):
                listener.enterLast_known_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_known_file_type" ):
                listener.exitLast_known_file_type(self)




    def last_known_file_type(self):

        localctx = PBXProjParser.Last_known_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_last_known_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(PBXProjParser.T__37)
            self.state = 1089
            self.match(PBXProjParser.T__3)
            self.state = 1090
            self.any_string()
            self.state = 1091
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_in_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_include_in_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_in_index" ):
                listener.enterInclude_in_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_in_index" ):
                listener.exitInclude_in_index(self)




    def include_in_index(self):

        localctx = PBXProjParser.Include_in_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_include_in_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(PBXProjParser.T__38)
            self.state = 1094
            self.match(PBXProjParser.T__3)
            self.state = 1095
            self.match(PBXProjParser.NUMBER)
            self.state = 1096
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indent_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_indent_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndent_width" ):
                listener.enterIndent_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndent_width" ):
                listener.exitIndent_width(self)




    def indent_width(self):

        localctx = PBXProjParser.Indent_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_indent_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(PBXProjParser.T__39)
            self.state = 1099
            self.match(PBXProjParser.T__3)
            self.state = 1100
            self.match(PBXProjParser.NUMBER)
            self.state = 1101
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tab_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_tab_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_width" ):
                listener.enterTab_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_width" ):
                listener.exitTab_width(self)




    def tab_width(self):

        localctx = PBXProjParser.Tab_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_tab_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(PBXProjParser.T__40)
            self.state = 1104
            self.match(PBXProjParser.T__3)
            self.state = 1105
            self.match(PBXProjParser.NUMBER)
            self.state = 1106
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uses_tabsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_uses_tabs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUses_tabs" ):
                listener.enterUses_tabs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUses_tabs" ):
                listener.exitUses_tabs(self)




    def uses_tabs(self):

        localctx = PBXProjParser.Uses_tabsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_uses_tabs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(PBXProjParser.T__41)
            self.state = 1109
            self.match(PBXProjParser.T__3)
            self.state = 1110
            self.match(PBXProjParser.NUMBER)
            self.state = 1111
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wraps_linesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_wraps_lines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWraps_lines" ):
                listener.enterWraps_lines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWraps_lines" ):
                listener.exitWraps_lines(self)




    def wraps_lines(self):

        localctx = PBXProjParser.Wraps_linesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_wraps_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(PBXProjParser.T__42)
            self.state = 1114
            self.match(PBXProjParser.T__3)
            self.state = 1115
            self.match(PBXProjParser.NUMBER)
            self.state = 1116
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_platform_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_filter" ):
                listener.enterPlatform_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_filter" ):
                listener.exitPlatform_filter(self)




    def platform_filter(self):

        localctx = PBXProjParser.Platform_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_platform_filter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(PBXProjParser.T__43)
            self.state = 1119
            self.match(PBXProjParser.T__3)
            self.state = 1120
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1121
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_filtersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_platform_filters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_filters" ):
                listener.enterPlatform_filters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_filters" ):
                listener.exitPlatform_filters(self)




    def platform_filters(self):

        localctx = PBXProjParser.Platform_filtersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_platform_filters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.match(PBXProjParser.T__44)
            self.state = 1124
            self.match(PBXProjParser.T__3)
            self.state = 1125
            self.any_string_list()
            self.state = 1126
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChildrenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_children

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChildren" ):
                listener.enterChildren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChildren" ):
                listener.exitChildren(self)




    def children(self):

        localctx = PBXProjParser.ChildrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(PBXProjParser.T__45)
            self.state = 1129
            self.match(PBXProjParser.T__3)
            self.state = 1130
            self.reference_list()
            self.state = 1131
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_install_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_install_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_install_path" ):
                listener.enterProduct_install_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_install_path" ):
                listener.exitProduct_install_path(self)




    def product_install_path(self):

        localctx = PBXProjParser.Product_install_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_product_install_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(PBXProjParser.T__46)
            self.state = 1134
            self.match(PBXProjParser.T__3)
            self.state = 1135
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1136
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repository_urlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_repository_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepository_url" ):
                listener.enterRepository_url(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepository_url" ):
                listener.exitRepository_url(self)




    def repository_url(self):

        localctx = PBXProjParser.Repository_urlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_repository_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(PBXProjParser.T__47)
            self.state = 1139
            self.match(PBXProjParser.T__3)
            self.state = 1140
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1141
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = PBXProjParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(PBXProjParser.T__48)
            self.state = 1144
            self.match(PBXProjParser.T__3)
            self.state = 1145
            self.match(PBXProjParser.T__0)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1793) != 0:
                self.state = 1146
                self.key_value()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1152
            self.match(PBXProjParser.T__1)
            self.state = 1153
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_packageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_package" ):
                listener.enterXc_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_package" ):
                listener.exitXc_package(self)




    def xc_package(self):

        localctx = PBXProjParser.Xc_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_xc_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(PBXProjParser.T__49)
            self.state = 1156
            self.match(PBXProjParser.T__3)
            self.state = 1157
            self.match(PBXProjParser.REFERENCE)
            self.state = 1158
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_product_dependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_product_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_product_dependencies" ):
                listener.enterPackage_product_dependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_product_dependencies" ):
                listener.exitPackage_product_dependencies(self)




    def package_product_dependencies(self):

        localctx = PBXProjParser.Package_product_dependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_package_product_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(PBXProjParser.T__50)
            self.state = 1161
            self.match(PBXProjParser.T__3)
            self.state = 1162
            self.reference_list()
            self.state = 1163
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = PBXProjParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.match(PBXProjParser.T__51)
            self.state = 1166
            self.match(PBXProjParser.T__3)
            self.state = 1167
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1168
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)




    def path(self):

        localctx = PBXProjParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(PBXProjParser.T__52)
            self.state = 1171
            self.match(PBXProjParser.T__3)
            self.state = 1172
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1173
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_treeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_source_tree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_tree" ):
                listener.enterSource_tree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_tree" ):
                listener.exitSource_tree(self)




    def source_tree(self):

        localctx = PBXProjParser.Source_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_source_tree)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(PBXProjParser.T__53)
            self.state = 1176
            self.match(PBXProjParser.T__3)
            self.state = 1177
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1178
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_action_maskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_action_mask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_action_mask" ):
                listener.enterBuild_action_mask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_action_mask" ):
                listener.exitBuild_action_mask(self)




    def build_action_mask(self):

        localctx = PBXProjParser.Build_action_maskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_build_action_mask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(PBXProjParser.T__54)
            self.state = 1181
            self.match(PBXProjParser.T__3)
            self.state = 1182
            self.match(PBXProjParser.NUMBER)
            self.state = 1183
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiles" ):
                listener.enterFiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiles" ):
                listener.exitFiles(self)




    def files(self):

        localctx = PBXProjParser.FilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_files)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(PBXProjParser.T__55)
            self.state = 1186
            self.match(PBXProjParser.T__3)
            self.state = 1187
            self.reference_list()
            self.state = 1188
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Run_only_for_deployment_postprocessingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_run_only_for_deployment_postprocessing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRun_only_for_deployment_postprocessing" ):
                listener.enterRun_only_for_deployment_postprocessing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRun_only_for_deployment_postprocessing" ):
                listener.exitRun_only_for_deployment_postprocessing(self)




    def run_only_for_deployment_postprocessing(self):

        localctx = PBXProjParser.Run_only_for_deployment_postprocessingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_run_only_for_deployment_postprocessing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(PBXProjParser.T__56)
            self.state = 1191
            self.match(PBXProjParser.T__3)
            self.state = 1192
            self.match(PBXProjParser.NUMBER)
            self.state = 1193
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_reference_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_list" ):
                listener.enterReference_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_list" ):
                listener.exitReference_list(self)




    def reference_list(self):

        localctx = PBXProjParser.Reference_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_reference_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.match(PBXProjParser.T__57)
            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1196
                self.match(PBXProjParser.REFERENCE)
                self.state = 1197
                self.match(PBXProjParser.T__58)
                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1203
            self.match(PBXProjParser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_string_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Any_stringContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Any_stringContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string_list" ):
                listener.enterAny_string_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string_list" ):
                listener.exitAny_string_list(self)




    def any_string_list(self):

        localctx = PBXProjParser.Any_string_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_any_string_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(PBXProjParser.T__57)
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1793) != 0:
                self.state = 1206
                self.any_string()
                self.state = 1207
                self.match(PBXProjParser.T__58)
                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1214
            self.match(PBXProjParser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_quoted_strings_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.NON_QUOTED_STRING)
            else:
                return self.getToken(PBXProjParser.NON_QUOTED_STRING, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_non_quoted_strings_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_quoted_strings_list" ):
                listener.enterNon_quoted_strings_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_quoted_strings_list" ):
                listener.exitNon_quoted_strings_list(self)




    def non_quoted_strings_list(self):

        localctx = PBXProjParser.Non_quoted_strings_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_non_quoted_strings_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(PBXProjParser.T__57)
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1217
                self.match(PBXProjParser.NON_QUOTED_STRING)
                self.state = 1218
                self.match(PBXProjParser.T__58)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1224
            self.match(PBXProjParser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configuration_list" ):
                listener.enterBuild_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configuration_list" ):
                listener.exitBuild_configuration_list(self)




    def build_configuration_list(self):

        localctx = PBXProjParser.Build_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_build_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(PBXProjParser.T__60)
            self.state = 1227
            self.match(PBXProjParser.T__3)
            self.state = 1228
            self.match(PBXProjParser.REFERENCE)
            self.state = 1229
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_phasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_phases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_phases" ):
                listener.enterBuild_phases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_phases" ):
                listener.exitBuild_phases(self)




    def build_phases(self):

        localctx = PBXProjParser.Build_phasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_build_phases)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(PBXProjParser.T__61)
            self.state = 1232
            self.match(PBXProjParser.T__3)
            self.state = 1233
            self.reference_list()
            self.state = 1234
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_rules" ):
                listener.enterBuild_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_rules" ):
                listener.exitBuild_rules(self)




    def build_rules(self):

        localctx = PBXProjParser.Build_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_build_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(PBXProjParser.T__62)
            self.state = 1237
            self.match(PBXProjParser.T__3)
            self.state = 1238
            self.reference_list()
            self.state = 1239
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_arguments_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_arguments_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_arguments_string" ):
                listener.enterBuild_arguments_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_arguments_string" ):
                listener.exitBuild_arguments_string(self)




    def build_arguments_string(self):

        localctx = PBXProjParser.Build_arguments_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_build_arguments_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(PBXProjParser.T__63)
            self.state = 1242
            self.match(PBXProjParser.T__3)
            self.state = 1243
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1244
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_tool_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_tool_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_tool_path" ):
                listener.enterBuild_tool_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_tool_path" ):
                listener.exitBuild_tool_path(self)




    def build_tool_path(self):

        localctx = PBXProjParser.Build_tool_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_build_tool_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(PBXProjParser.T__64)
            self.state = 1247
            self.match(PBXProjParser.T__3)
            self.state = 1248
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1249
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_working_directoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_working_directory

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_working_directory" ):
                listener.enterBuild_working_directory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_working_directory" ):
                listener.exitBuild_working_directory(self)




    def build_working_directory(self):

        localctx = PBXProjParser.Build_working_directoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_build_working_directory)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(PBXProjParser.T__65)
            self.state = 1252
            self.match(PBXProjParser.T__3)
            self.state = 1253
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1254
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_build_settings_in_environmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_pass_build_settings_in_environment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_build_settings_in_environment" ):
                listener.enterPass_build_settings_in_environment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_build_settings_in_environment" ):
                listener.exitPass_build_settings_in_environment(self)




    def pass_build_settings_in_environment(self):

        localctx = PBXProjParser.Pass_build_settings_in_environmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_pass_build_settings_in_environment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(PBXProjParser.T__66)
            self.state = 1257
            self.match(PBXProjParser.T__3)
            self.state = 1258
            self.match(PBXProjParser.NUMBER)
            self.state = 1259
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependencies" ):
                listener.enterDependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependencies" ):
                listener.exitDependencies(self)




    def dependencies(self):

        localctx = PBXProjParser.DependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self.match(PBXProjParser.T__67)
            self.state = 1262
            self.match(PBXProjParser.T__3)
            self.state = 1263
            self.reference_list()
            self.state = 1264
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_product_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_name" ):
                listener.enterProduct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_name" ):
                listener.exitProduct_name(self)




    def product_name(self):

        localctx = PBXProjParser.Product_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_product_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(PBXProjParser.T__68)
            self.state = 1267
            self.match(PBXProjParser.T__3)
            self.state = 1268
            self.any_string()
            self.state = 1269
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_reference" ):
                listener.enterProduct_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_reference" ):
                listener.exitProduct_reference(self)




    def product_reference(self):

        localctx = PBXProjParser.Product_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_product_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(PBXProjParser.T__69)
            self.state = 1272
            self.match(PBXProjParser.T__3)
            self.state = 1273
            self.match(PBXProjParser.REFERENCE)
            self.state = 1274
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_type" ):
                listener.enterProduct_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_type" ):
                listener.exitProduct_type(self)




    def product_type(self):

        localctx = PBXProjParser.Product_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_product_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(PBXProjParser.T__70)
            self.state = 1277
            self.match(PBXProjParser.T__3)
            self.state = 1278
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1279
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_endingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_line_ending

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_ending" ):
                listener.enterLine_ending(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_ending" ):
                listener.exitLine_ending(self)




    def line_ending(self):

        localctx = PBXProjParser.Line_endingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_line_ending)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(PBXProjParser.T__71)
            self.state = 1282
            self.match(PBXProjParser.T__3)
            self.state = 1283
            self.match(PBXProjParser.NUMBER)
            self.state = 1284
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_language_specification_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_language_specification_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_language_specification_identifier" ):
                listener.enterXc_language_specification_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_language_specification_identifier" ):
                listener.exitXc_language_specification_identifier(self)




    def xc_language_specification_identifier(self):

        localctx = PBXProjParser.Xc_language_specification_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_xc_language_specification_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(PBXProjParser.T__72)
            self.state = 1287
            self.match(PBXProjParser.T__3)
            self.state = 1288
            self.any_string()
            self.state = 1289
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plist_structure_definition_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_plist_structure_definition_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlist_structure_definition_identifier" ):
                listener.enterPlist_structure_definition_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlist_structure_definition_identifier" ):
                listener.exitPlist_structure_definition_identifier(self)




    def plist_structure_definition_identifier(self):

        localctx = PBXProjParser.Plist_structure_definition_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_plist_structure_definition_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(PBXProjParser.T__73)
            self.state = 1292
            self.match(PBXProjParser.T__3)
            self.state = 1293
            self.any_string()
            self.state = 1294
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def build_targets_in_parallel(self):
            return self.getTypedRuleContext(PBXProjParser.Build_targets_in_parallelContext,0)


        def class_prefix(self):
            return self.getTypedRuleContext(PBXProjParser.Class_prefixContext,0)


        def default_build_system_type_for_workspace(self):
            return self.getTypedRuleContext(PBXProjParser.Default_build_system_type_for_workspaceContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def last_swift_update_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_update_checkContext,0)


        def last_testing_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_testing_upgrade_checkContext,0)


        def last_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_upgrade_checkContext,0)


        def organization_name(self):
            return self.getTypedRuleContext(PBXProjParser.Organization_nameContext,0)


        def target_attributes(self):
            return self.getTypedRuleContext(PBXProjParser.Target_attributesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PBXProjParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(PBXProjParser.T__74)
            self.state = 1297
            self.match(PBXProjParser.T__3)
            self.state = 1298
            self.match(PBXProjParser.T__0)
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 1299
                self.build_targets_in_parallel()


            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1302
                self.class_prefix()


            self.state = 1306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1305
                self.default_build_system_type_for_workspace()


            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1308
                self.last_swift_migration()


            self.state = 1312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 1311
                self.last_swift_update_check()


            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 1314
                self.last_testing_upgrade_check()


            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 1317
                self.last_upgrade_check()


            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1320
                self.organization_name()


            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 1323
                self.target_attributes()


            self.state = 1326
            self.match(PBXProjParser.T__1)
            self.state = 1327
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_migrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_migration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_migration" ):
                listener.enterLast_swift_migration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_migration" ):
                listener.exitLast_swift_migration(self)




    def last_swift_migration(self):

        localctx = PBXProjParser.Last_swift_migrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_last_swift_migration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(PBXProjParser.T__75)
            self.state = 1330
            self.match(PBXProjParser.T__3)
            self.state = 1331
            self.match(PBXProjParser.NUMBER)
            self.state = 1332
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_build_system_type_for_workspaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_build_system_type_for_workspace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_build_system_type_for_workspace" ):
                listener.enterDefault_build_system_type_for_workspace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_build_system_type_for_workspace" ):
                listener.exitDefault_build_system_type_for_workspace(self)




    def default_build_system_type_for_workspace(self):

        localctx = PBXProjParser.Default_build_system_type_for_workspaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_default_build_system_type_for_workspace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.match(PBXProjParser.T__76)
            self.state = 1335
            self.match(PBXProjParser.T__3)
            self.state = 1336
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1337
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_update_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_update_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_update_check" ):
                listener.enterLast_swift_update_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_update_check" ):
                listener.exitLast_swift_update_check(self)




    def last_swift_update_check(self):

        localctx = PBXProjParser.Last_swift_update_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_last_swift_update_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.match(PBXProjParser.T__77)
            self.state = 1340
            self.match(PBXProjParser.T__3)
            self.state = 1341
            self.match(PBXProjParser.NUMBER)
            self.state = 1342
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_targets_in_parallelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_targets_in_parallel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_targets_in_parallel" ):
                listener.enterBuild_targets_in_parallel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_targets_in_parallel" ):
                listener.exitBuild_targets_in_parallel(self)




    def build_targets_in_parallel(self):

        localctx = PBXProjParser.Build_targets_in_parallelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_build_targets_in_parallel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.match(PBXProjParser.T__78)
            self.state = 1345
            self.match(PBXProjParser.T__3)
            self.state = 1346
            _la = self._input.LA(1)
            if not(_la==129 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1347
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_testing_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_testing_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_testing_upgrade_check" ):
                listener.enterLast_testing_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_testing_upgrade_check" ):
                listener.exitLast_testing_upgrade_check(self)




    def last_testing_upgrade_check(self):

        localctx = PBXProjParser.Last_testing_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_last_testing_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(PBXProjParser.T__79)
            self.state = 1350
            self.match(PBXProjParser.T__3)
            self.state = 1351
            self.match(PBXProjParser.NUMBER)
            self.state = 1352
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_upgrade_check" ):
                listener.enterLast_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_upgrade_check" ):
                listener.exitLast_upgrade_check(self)




    def last_upgrade_check(self):

        localctx = PBXProjParser.Last_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_last_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(PBXProjParser.T__80)
            self.state = 1355
            self.match(PBXProjParser.T__3)
            self.state = 1356
            self.match(PBXProjParser.NUMBER)
            self.state = 1357
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Organization_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_organization_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrganization_name" ):
                listener.enterOrganization_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrganization_name" ):
                listener.exitOrganization_name(self)




    def organization_name(self):

        localctx = PBXProjParser.Organization_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_organization_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.match(PBXProjParser.T__81)
            self.state = 1360
            self.match(PBXProjParser.T__3)
            self.state = 1361
            self.any_string()
            self.state = 1362
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def target_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Target_attributeContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Target_attributeContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attributes" ):
                listener.enterTarget_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attributes" ):
                listener.exitTarget_attributes(self)




    def target_attributes(self):

        localctx = PBXProjParser.Target_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_target_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(PBXProjParser.T__82)
            self.state = 1365
            self.match(PBXProjParser.T__3)
            self.state = 1366
            self.match(PBXProjParser.T__0)
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1367
                self.target_attribute()
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1373
            self.match(PBXProjParser.T__1)
            self.state = 1374
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def created_on_tools_version(self):
            return self.getTypedRuleContext(PBXProjParser.Created_on_tools_versionContext,0)


        def test_target_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Test_target_idContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Test_target_idContext,i)


        def development_team(self):
            return self.getTypedRuleContext(PBXProjParser.Development_teamContext,0)


        def development_team_name(self):
            return self.getTypedRuleContext(PBXProjParser.Development_team_nameContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def provisioning_style(self):
            return self.getTypedRuleContext(PBXProjParser.Provisioning_styleContext,0)


        def system_capabilities(self):
            return self.getTypedRuleContext(PBXProjParser.System_capabilitiesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attribute" ):
                listener.enterTarget_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attribute" ):
                listener.exitTarget_attribute(self)




    def target_attribute(self):

        localctx = PBXProjParser.Target_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_target_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(PBXProjParser.REFERENCE)
            self.state = 1377
            self.match(PBXProjParser.T__3)
            self.state = 1378
            self.match(PBXProjParser.T__0)
            self.state = 1380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 1379
                self.created_on_tools_version()


            self.state = 1383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1382
                self.test_target_id()


            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1385
                self.development_team()


            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 1388
                self.development_team_name()


            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1391
                self.last_swift_migration()


            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1394
                self.provisioning_style()


            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1397
                self.system_capabilities()


            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 1400
                self.test_target_id()


            self.state = 1403
            self.match(PBXProjParser.T__1)
            self.state = 1404
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Created_on_tools_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_created_on_tools_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreated_on_tools_version" ):
                listener.enterCreated_on_tools_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreated_on_tools_version" ):
                listener.exitCreated_on_tools_version(self)




    def created_on_tools_version(self):

        localctx = PBXProjParser.Created_on_tools_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_created_on_tools_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.match(PBXProjParser.T__83)
            self.state = 1407
            self.match(PBXProjParser.T__3)
            self.state = 1408
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1409
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_target_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_test_target_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_target_id" ):
                listener.enterTest_target_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_target_id" ):
                listener.exitTest_target_id(self)




    def test_target_id(self):

        localctx = PBXProjParser.Test_target_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_test_target_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(PBXProjParser.T__84)
            self.state = 1412
            self.match(PBXProjParser.T__3)
            self.state = 1413
            self.match(PBXProjParser.REFERENCE)
            self.state = 1414
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_teamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team" ):
                listener.enterDevelopment_team(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team" ):
                listener.exitDevelopment_team(self)




    def development_team(self):

        localctx = PBXProjParser.Development_teamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_development_team)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.match(PBXProjParser.T__85)
            self.state = 1417
            self.match(PBXProjParser.T__3)
            self.state = 1418
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1419
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_team_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team_name" ):
                listener.enterDevelopment_team_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team_name" ):
                listener.exitDevelopment_team_name(self)




    def development_team_name(self):

        localctx = PBXProjParser.Development_team_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_development_team_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(PBXProjParser.T__86)
            self.state = 1422
            self.match(PBXProjParser.T__3)
            self.state = 1423
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1424
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provisioning_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_provisioning_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvisioning_style" ):
                listener.enterProvisioning_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvisioning_style" ):
                listener.exitProvisioning_style(self)




    def provisioning_style(self):

        localctx = PBXProjParser.Provisioning_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_provisioning_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.match(PBXProjParser.T__87)
            self.state = 1427
            self.match(PBXProjParser.T__3)
            self.state = 1428
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1429
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compatibility_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_compatibility_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompatibility_version" ):
                listener.enterCompatibility_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompatibility_version" ):
                listener.exitCompatibility_version(self)




    def compatibility_version(self):

        localctx = PBXProjParser.Compatibility_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_compatibility_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(PBXProjParser.T__88)
            self.state = 1432
            self.match(PBXProjParser.T__3)
            self.state = 1433
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1434
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_regionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_region

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_region" ):
                listener.enterDevelopment_region(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_region" ):
                listener.exitDevelopment_region(self)




    def development_region(self):

        localctx = PBXProjParser.Development_regionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_development_region)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.match(PBXProjParser.T__89)
            self.state = 1437
            self.match(PBXProjParser.T__3)
            self.state = 1438
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1439
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_scanned_for_encodingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_has_scanned_for_encodings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_scanned_for_encodings" ):
                listener.enterHas_scanned_for_encodings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_scanned_for_encodings" ):
                listener.exitHas_scanned_for_encodings(self)




    def has_scanned_for_encodings(self):

        localctx = PBXProjParser.Has_scanned_for_encodingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_has_scanned_for_encodings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(PBXProjParser.T__90)
            self.state = 1442
            self.match(PBXProjParser.T__3)
            self.state = 1443
            self.match(PBXProjParser.NUMBER)
            self.state = 1444
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Known_regionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_known_regions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKnown_regions" ):
                listener.enterKnown_regions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKnown_regions" ):
                listener.exitKnown_regions(self)




    def known_regions(self):

        localctx = PBXProjParser.Known_regionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_known_regions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.match(PBXProjParser.T__91)
            self.state = 1447
            self.match(PBXProjParser.T__3)
            self.state = 1448
            self.any_string_list()
            self.state = 1449
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_main_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_group" ):
                listener.enterMain_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_group" ):
                listener.exitMain_group(self)




    def main_group(self):

        localctx = PBXProjParser.Main_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_main_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(PBXProjParser.T__92)
            self.state = 1452
            self.match(PBXProjParser.T__3)
            self.state = 1453
            self.match(PBXProjParser.REFERENCE)
            self.state = 1454
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_ref_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref_group" ):
                listener.enterProduct_ref_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref_group" ):
                listener.exitProduct_ref_group(self)




    def product_ref_group(self):

        localctx = PBXProjParser.Product_ref_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_product_ref_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.match(PBXProjParser.T__93)
            self.state = 1457
            self.match(PBXProjParser.T__3)
            self.state = 1458
            self.match(PBXProjParser.REFERENCE)
            self.state = 1459
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_references" ):
                listener.enterPackage_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_references" ):
                listener.exitPackage_references(self)




    def package_references(self):

        localctx = PBXProjParser.Package_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_package_references)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(PBXProjParser.T__94)
            self.state = 1462
            self.match(PBXProjParser.T__3)
            self.state = 1463
            self.reference_list()
            self.state = 1464
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_dir_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_dir_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_dir_path" ):
                listener.enterProject_dir_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_dir_path" ):
                listener.exitProject_dir_path(self)




    def project_dir_path(self):

        localctx = PBXProjParser.Project_dir_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_project_dir_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(PBXProjParser.T__95)
            self.state = 1467
            self.match(PBXProjParser.T__3)
            self.state = 1468
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1469
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def project_references_list(self):
            return self.getTypedRuleContext(PBXProjParser.Project_references_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references" ):
                listener.enterProject_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references" ):
                listener.exitProject_references(self)




    def project_references(self):

        localctx = PBXProjParser.Project_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_project_references)
        try:
            self.state = 1483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1471
                self.match(PBXProjParser.T__96)
                self.state = 1472
                self.match(PBXProjParser.T__3)
                self.state = 1473
                self.any_string()
                self.state = 1474
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1476
                self.match(PBXProjParser.T__96)
                self.state = 1477
                self.match(PBXProjParser.T__3)
                self.state = 1478
                self.match(PBXProjParser.T__57)
                self.state = 1479
                self.project_references_list()
                self.state = 1480
                self.match(PBXProjParser.T__59)
                self.state = 1481
                self.match(PBXProjParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_rootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_root" ):
                listener.enterProject_root(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_root" ):
                listener.exitProject_root(self)




    def project_root(self):

        localctx = PBXProjParser.Project_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_project_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(PBXProjParser.T__97)
            self.state = 1486
            self.match(PBXProjParser.T__3)
            self.state = 1487
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1488
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_targets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargets" ):
                listener.enterTargets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargets" ):
                listener.exitTargets(self)




    def targets(self):

        localctx = PBXProjParser.TargetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_targets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.match(PBXProjParser.T__98)
            self.state = 1491
            self.match(PBXProjParser.T__3)
            self.state = 1492
            self.reference_list()
            self.state = 1493
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_file_list_paths" ):
                listener.enterInput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_file_list_paths" ):
                listener.exitInput_file_list_paths(self)




    def input_file_list_paths(self):

        localctx = PBXProjParser.Input_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_input_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.match(PBXProjParser.T__99)
            self.state = 1496
            self.match(PBXProjParser.T__3)
            self.state = 1497
            self.any_string_list()
            self.state = 1498
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_paths" ):
                listener.enterInput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_paths" ):
                listener.exitInput_paths(self)




    def input_paths(self):

        localctx = PBXProjParser.Input_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_input_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.match(PBXProjParser.T__100)
            self.state = 1501
            self.match(PBXProjParser.T__3)
            self.state = 1502
            self.any_string_list()
            self.state = 1503
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_file_list_paths" ):
                listener.enterOutput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_file_list_paths" ):
                listener.exitOutput_file_list_paths(self)




    def output_file_list_paths(self):

        localctx = PBXProjParser.Output_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_output_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self.match(PBXProjParser.T__101)
            self.state = 1506
            self.match(PBXProjParser.T__3)
            self.state = 1507
            self.any_string_list()
            self.state = 1508
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_paths" ):
                listener.enterOutput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_paths" ):
                listener.exitOutput_paths(self)




    def output_paths(self):

        localctx = PBXProjParser.Output_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_output_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(PBXProjParser.T__102)
            self.state = 1511
            self.match(PBXProjParser.T__3)
            self.state = 1512
            self.any_string_list()
            self.state = 1513
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_path" ):
                listener.enterShell_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_path" ):
                listener.exitShell_path(self)




    def shell_path(self):

        localctx = PBXProjParser.Shell_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_shell_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.match(PBXProjParser.T__103)
            self.state = 1516
            self.match(PBXProjParser.T__3)
            self.state = 1517
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1518
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_scriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_script" ):
                listener.enterShell_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_script" ):
                listener.exitShell_script(self)




    def shell_script(self):

        localctx = PBXProjParser.Shell_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_shell_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(PBXProjParser.T__104)
            self.state = 1521
            self.match(PBXProjParser.T__3)
            self.state = 1522
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1523
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_env_vars_in_logContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_show_env_vars_in_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_env_vars_in_log" ):
                listener.enterShow_env_vars_in_log(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_env_vars_in_log" ):
                listener.exitShow_env_vars_in_log(self)




    def show_env_vars_in_log(self):

        localctx = PBXProjParser.Show_env_vars_in_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_show_env_vars_in_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.match(PBXProjParser.T__105)
            self.state = 1526
            self.match(PBXProjParser.T__3)
            self.state = 1527
            self.match(PBXProjParser.NUMBER)
            self.state = 1528
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget" ):
                listener.enterTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget" ):
                listener.exitTarget(self)




    def target(self):

        localctx = PBXProjParser.TargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(PBXProjParser.T__106)
            self.state = 1531
            self.match(PBXProjParser.T__3)
            self.state = 1532
            self.match(PBXProjParser.REFERENCE)
            self.state = 1533
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_proxy" ):
                listener.enterTarget_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_proxy" ):
                listener.exitTarget_proxy(self)




    def target_proxy(self):

        localctx = PBXProjParser.Target_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_target_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(PBXProjParser.T__107)
            self.state = 1536
            self.match(PBXProjParser.T__3)
            self.state = 1537
            self.match(PBXProjParser.REFERENCE)
            self.state = 1538
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_type" ):
                listener.enterFile_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_type" ):
                listener.exitFile_type(self)




    def file_type(self):

        localctx = PBXProjParser.File_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.match(PBXProjParser.T__108)
            self.state = 1541
            self.match(PBXProjParser.T__3)
            self.state = 1542
            self.any_string()
            self.state = 1543
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_ref" ):
                listener.enterRemote_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_ref" ):
                listener.exitRemote_ref(self)




    def remote_ref(self):

        localctx = PBXProjParser.Remote_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_remote_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            self.match(PBXProjParser.T__109)
            self.state = 1546
            self.match(PBXProjParser.T__3)
            self.state = 1547
            self.match(PBXProjParser.REFERENCE)
            self.state = 1548
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_configuration_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_base_configuration_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_configuration_reference" ):
                listener.enterBase_configuration_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_configuration_reference" ):
                listener.exitBase_configuration_reference(self)




    def base_configuration_reference(self):

        localctx = PBXProjParser.Base_configuration_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_base_configuration_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.match(PBXProjParser.T__110)
            self.state = 1551
            self.match(PBXProjParser.T__3)
            self.state = 1552
            self.match(PBXProjParser.REFERENCE)
            self.state = 1553
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_settings" ):
                listener.enterBuild_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_settings" ):
                listener.exitBuild_settings(self)




    def build_settings(self):

        localctx = PBXProjParser.Build_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_build_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.match(PBXProjParser.T__111)
            self.state = 1556
            self.match(PBXProjParser.T__3)
            self.state = 1557
            self.match(PBXProjParser.T__0)
            self.state = 1561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1793) != 0:
                self.state = 1558
                self.key_value()
                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1564
            self.match(PBXProjParser.T__1)
            self.state = 1565
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_path" ):
                listener.enterDst_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_path" ):
                listener.exitDst_path(self)




    def dst_path(self):

        localctx = PBXProjParser.Dst_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_dst_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.match(PBXProjParser.T__112)
            self.state = 1568
            self.match(PBXProjParser.T__3)
            self.state = 1569
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1570
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_subfolder_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_subfolder_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_subfolder_spec" ):
                listener.enterDst_subfolder_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_subfolder_spec" ):
                listener.exitDst_subfolder_spec(self)




    def dst_subfolder_spec(self):

        localctx = PBXProjParser.Dst_subfolder_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_dst_subfolder_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(PBXProjParser.T__113)
            self.state = 1573
            self.match(PBXProjParser.T__3)
            self.state = 1574
            self.match(PBXProjParser.NUMBER)
            self.state = 1575
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def project_references_list_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Project_references_list_elementContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Project_references_list_elementContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list" ):
                listener.enterProject_references_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list" ):
                listener.exitProject_references_list(self)




    def project_references_list(self):

        localctx = PBXProjParser.Project_references_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_project_references_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1577
                self.project_references_list_element()
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_list_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list_element" ):
                listener.enterProject_references_list_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list_element" ):
                listener.exitProject_references_list_element(self)




    def project_references_list_element(self):

        localctx = PBXProjParser.Project_references_list_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_project_references_list_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(PBXProjParser.T__0)
            self.state = 1584
            self.match(PBXProjParser.T__114)
            self.state = 1585
            self.match(PBXProjParser.T__3)
            self.state = 1586
            self.match(PBXProjParser.REFERENCE)
            self.state = 1587
            self.match(PBXProjParser.T__4)
            self.state = 1588
            self.match(PBXProjParser.T__115)
            self.state = 1589
            self.match(PBXProjParser.T__3)
            self.state = 1590
            self.match(PBXProjParser.REFERENCE)
            self.state = 1591
            self.match(PBXProjParser.T__4)
            self.state = 1592
            self.match(PBXProjParser.T__1)
            self.state = 1593
            self.match(PBXProjParser.T__58)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Any_stringContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Any_stringContext,i)


        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def ALPHA_NUMERIC(self):
            return self.getToken(PBXProjParser.ALPHA_NUMERIC, 0)

        def key_value(self):
            return self.getTypedRuleContext(PBXProjParser.Key_valueContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_key_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value" ):
                listener.enterKey_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value" ):
                listener.exitKey_value(self)




    def key_value(self):

        localctx = PBXProjParser.Key_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_key_value)
        self._la = 0 # Token type
        try:
            self.state = 1631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1595
                self.any_string()
                self.state = 1596
                self.match(PBXProjParser.T__3)
                self.state = 1597
                self.any_string()
                self.state = 1598
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1600
                self.any_string()
                self.state = 1601
                self.match(PBXProjParser.T__3)
                self.state = 1602
                self.match(PBXProjParser.NUMBER)
                self.state = 1603
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1605
                self.any_string()
                self.state = 1606
                self.match(PBXProjParser.T__3)
                self.state = 1607
                self.match(PBXProjParser.ALPHA_NUMERIC)
                self.state = 1608
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1610
                self.any_string()
                self.state = 1611
                self.match(PBXProjParser.T__3)
                self.state = 1612
                self.match(PBXProjParser.T__0)
                self.state = 1613
                self.key_value()
                self.state = 1614
                self.match(PBXProjParser.T__1)
                self.state = 1615
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1617
                self.any_string()
                self.state = 1618
                self.match(PBXProjParser.T__3)
                self.state = 1619
                self.match(PBXProjParser.T__57)
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1793) != 0:
                    self.state = 1620
                    self.any_string()
                    self.state = 1621
                    self.match(PBXProjParser.T__58)
                    self.state = 1627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1628
                self.match(PBXProjParser.T__59)
                self.state = 1629
                self.match(PBXProjParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configurationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configurations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configurations" ):
                listener.enterBuild_configurations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configurations" ):
                listener.exitBuild_configurations(self)




    def build_configurations(self):

        localctx = PBXProjParser.Build_configurationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_build_configurations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(PBXProjParser.T__116)
            self.state = 1634
            self.match(PBXProjParser.T__3)
            self.state = 1635
            self.reference_list()
            self.state = 1636
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_is_visibleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_is_visible

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_is_visible" ):
                listener.enterDefault_configuration_is_visible(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_is_visible" ):
                listener.exitDefault_configuration_is_visible(self)




    def default_configuration_is_visible(self):

        localctx = PBXProjParser.Default_configuration_is_visibleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_default_configuration_is_visible)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.match(PBXProjParser.T__117)
            self.state = 1639
            self.match(PBXProjParser.T__3)
            self.state = 1640
            self.match(PBXProjParser.NUMBER)
            self.state = 1641
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_name" ):
                listener.enterDefault_configuration_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_name" ):
                listener.exitDefault_configuration_name(self)




    def default_configuration_name(self):

        localctx = PBXProjParser.Default_configuration_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_default_configuration_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.match(PBXProjParser.T__118)
            self.state = 1644
            self.match(PBXProjParser.T__3)
            self.state = 1645
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1646
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettings" ):
                listener.enterSettings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettings" ):
                listener.exitSettings(self)




    def settings(self):

        localctx = PBXProjParser.SettingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.match(PBXProjParser.T__119)
            self.state = 1649
            self.match(PBXProjParser.T__3)
            self.state = 1650
            self.match(PBXProjParser.T__0)
            self.state = 1654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1793) != 0:
                self.state = 1651
                self.key_value()
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1657
            self.match(PBXProjParser.T__1)
            self.state = 1658
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_capabilitiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_system_capabilities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_capabilities" ):
                listener.enterSystem_capabilities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_capabilities" ):
                listener.exitSystem_capabilities(self)




    def system_capabilities(self):

        localctx = PBXProjParser.System_capabilitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_system_capabilities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self.match(PBXProjParser.T__120)
            self.state = 1661
            self.match(PBXProjParser.T__3)
            self.state = 1662
            self.match(PBXProjParser.T__0)
            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1793) != 0:
                self.state = 1663
                self.key_value()
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1669
            self.match(PBXProjParser.T__1)
            self.state = 1670
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Current_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_current_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_version" ):
                listener.enterCurrent_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_version" ):
                listener.exitCurrent_version(self)




    def current_version(self):

        localctx = PBXProjParser.Current_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_current_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.match(PBXProjParser.T__121)
            self.state = 1673
            self.match(PBXProjParser.T__3)
            self.state = 1674
            self.match(PBXProjParser.REFERENCE)
            self.state = 1675
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Version_group_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_version_group_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion_group_type" ):
                listener.enterVersion_group_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion_group_type" ):
                listener.exitVersion_group_type(self)




    def version_group_type(self):

        localctx = PBXProjParser.Version_group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_version_group_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.match(PBXProjParser.T__122)
            self.state = 1678
            self.match(PBXProjParser.T__3)
            self.state = 1679
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1680
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_class_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefix" ):
                listener.enterClass_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefix" ):
                listener.exitClass_prefix(self)




    def class_prefix(self):

        localctx = PBXProjParser.Class_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_class_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.match(PBXProjParser.T__123)
            self.state = 1683
            self.match(PBXProjParser.T__3)
            self.state = 1684
            self.any_string()
            self.state = 1685
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def VARIABLE(self):
            return self.getToken(PBXProjParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string" ):
                listener.enterAny_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string" ):
                listener.exitAny_string(self)




    def any_string(self):

        localctx = PBXProjParser.Any_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_any_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            _la = self._input.LA(1)
            if not((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1793) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





